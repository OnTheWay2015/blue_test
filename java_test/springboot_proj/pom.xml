<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <!-- 需要指定正确版本 Declares to which version of project descriptor this POM conforms -->
    <!-- ( POM 模型的版本 当前固定是4.0.0) -->
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.fqwz.springbootproj</groupId>
    <artifactId>proj</artifactId>
     

    <version>${revision}</version>

    <!--
    只有打包方式为 pom 的 Maven 工程能够管理其他 Maven 工程。
    打包方式为 pom 的 Maven 工程中不写业务代码，它是专门管理其他 Maven 工程的工程，
    -->
    <packaging>pom</packaging> 
 
 <!-- 模块 -->
    <modules>
		<!-- 公用模块 -->
        <!--<module>dependencies_m</module> -->
		
        <!-- 入口模块 -->
        <module>entry_m</module>
		
        <!-- 拓展模块 -->
        <module>normal_m</module>
     <module>normal_ai</module>
</modules>
    <dependencies>
        <dependency>
            <groupId>org.apache.tomcat.embed</groupId>
            <artifactId>tomcat-embed-core</artifactId>
            <version>10.1.44</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>6.2.10</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
            <version>6.2.10</version>
            <scope>compile</scope>
        </dependency>
    </dependencies>


    <name>${project.artifactId}</name>
<description> 多模块测试项目 </description>
<url>https://helloworld.com</url>

<!-- 构建属性 -->
    <properties>

         <!-- 定义统一版本属性 -->
        <pom.model.version>4.0.0</pom.model.version>

        <revision>100-SNAPSHOT</revision>
        <!-- Maven 相关 -->
        <java.version>19</java.version>
        <maven.compiler.release>${java.version}</maven.compiler.release>
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>		
        <maven-compiler-plugin.version>3.14.0</maven-compiler-plugin.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		
		 <!-- 简化多模块项目构建和版本管理的核心插件,减少依赖冲突 -->
        <flatten-maven-plugin.version>1.6.0</flatten-maven-plugin.version>
		
		<!-- 开发插件，通过注解方式自动生成样板代码（如 getter、setter、equals 等方法）‌ -->
        <lombok.version>1.18.38</lombok.version>		

		<!-- 通过编译时生成类型安全的转换代码，简化不同 Java Bean（如 DTO、VO、PO 等）之间的属性拷贝 -->
        <mapstruct.version>1.6.3</mapstruct.version>


        <!-- 第三方库版本号  -->
        <spring-boot.version>3.5.5</spring-boot.version>
        <spring-ai.version>1.0.1</spring-ai.version>

        <redisson.version>3.51.0</redisson.version>
    </properties>
	
 
	<!-- 公共依赖  。  todo  放到 dependencies_m 模块就不行 是为什么？-->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-web</artifactId>
                <version>${spring-boot.version}</version>
            </dependency>

            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-data-redis</artifactId>
                <version>${spring-boot.version}</version>


            </dependency>


            <dependency>
                <groupId>org.springframework.ai</groupId>
                <artifactId>spring-ai-starter-model-deepseek</artifactId>
                <version>${spring-ai.version}</version>
            </dependency>




        </dependencies>
    </dependencyManagement>
	<!-- 插件 -->
	<build>
	
		<!-- 
			pluginManagement 是一个用于集中管理插件配置的机制， 仅定义插件的元信息（如 groupId、artifactId、version），
			不会实际触发插件执行。子模块需在 plugins 中显式引用才会生效
			父子项目结构中，父 POM 通过 pluginManagement 统一规范插件版本（如 maven-compiler-plugin），
			子模块仅需声明 groupId 和 artifactId 即可复用配置
		-->
		<pluginManagement>
            <!-- 不用这个 容易出问题 不好定位 -->
        </pluginManagement>
	
	
		<plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <compilerArgs>
                        <arg>-parameters</arg>
                    </compilerArgs>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.springframework.boot</groupId>
                            <artifactId>spring-boot-configuration-processor</artifactId>
                            <version>${spring-boot.version}</version>
                        </path>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                        <path>
                            <!-- 确保 Lombok 生成的 getter/setter 方法能被 MapStruct 正确识别，
                                 避免出现 No property named “xxx" exists 的编译错误 -->
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok-mapstruct-binding</artifactId>
                            <version>0.2.0</version>
                        </path>
                        <path>
                            <groupId>org.mapstruct</groupId>
                            <artifactId>mapstruct-processor</artifactId>
                            <version>${mapstruct.version}</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>flatten-maven-plugin</artifactId>
                <version>${flatten-maven-plugin.version}</version>
                <configuration>
                    <flattenMode>oss</flattenMode>
                    <updatePomFile>true</updatePomFile>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>flatten</goal>
                        </goals>
                        <id>flatten</id>
                        <phase>process-resources</phase>
                    </execution>
                    <execution>
                        <goals>
                            <goal>clean</goal>
                        </goals>
                        <id>flatten.clean</id>
                        <phase>clean</phase>
                    </execution>
                </executions>
            </plugin>

            <!-- spring-boot打包 -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring-boot.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal> <!-- 将引入的 jar 打入其中 -->
                        </goals>
                    </execution>
                </executions>
            </plugin>
		</plugins>
	</build>

    <!-- 使用 huawei / aliyun 的 Maven 源，提升下载速度 -->
    <repositories>
        <repository>
            <id>huaweicloud</id>
            <name>huawei</name>
            <url>https://mirrors.huaweicloud.com/repository/maven/</url>
        </repository>
        <repository>
            <id>aliyunmaven</id>
            <name>aliyun</name>
            <url>https://maven.aliyun.com/repository/public</url>
        </repository>

        <repository>
            <id>spring-milestones</id>
            <name>Spring Milestones</name>
            <url>https://repo.spring.io/milestone</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
        <repository>
            <id>spring-snapshots</id>
            <name>Spring Snapshots</name>
            <url>https://repo.spring.io/snapshot</url>
            <releases>
                <enabled>false</enabled>
            </releases>
        </repository>
    </repositories>
</project>
