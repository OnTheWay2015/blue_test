// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: t1.proto

#include "t1.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_p1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_TEST_p1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_p1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_TEST_RES_p1_2eproto;
namespace t1 {
class MSG_BASEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_BASE> _instance;
  const ::p1::MSG_TEST* msg_test_;
  const ::p1::MSG_TEST_RES* msg_test_res_;
} _MSG_BASE_default_instance_;
}  // namespace t1
static void InitDefaultsscc_info_MSG_BASE_t1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::t1::_MSG_BASE_default_instance_;
    new (ptr) ::t1::MSG_BASE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::t1::MSG_BASE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MSG_BASE_t1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MSG_BASE_t1_2eproto}, {
      &scc_info_MSG_TEST_p1_2eproto.base,
      &scc_info_MSG_TEST_RES_p1_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_t1_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_t1_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_t1_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_t1_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::t1::MSG_BASE, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::t1::MSG_BASE, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::t1::MSG_BASEDefaultTypeInternal, msg_test_),
  offsetof(::t1::MSG_BASEDefaultTypeInternal, msg_test_res_),
  PROTOBUF_FIELD_OFFSET(::t1::MSG_BASE, msg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::t1::MSG_BASE)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::t1::_MSG_BASE_default_instance_),
};

const char descriptor_table_protodef_t1_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010t1.proto\022\002t1\032\010p1.proto\"]\n\010MSG_BASE\022 \n\010"
  "msg_test\030\001 \001(\0132\014.p1.MSG_TESTH\000\022(\n\014msg_te"
  "st_res\030\002 \001(\0132\020.p1.MSG_TEST_RESH\000B\005\n\003msgb"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_t1_2eproto_deps[1] = {
  &::descriptor_table_p1_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_t1_2eproto_sccs[1] = {
  &scc_info_MSG_BASE_t1_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_t1_2eproto_once;
static bool descriptor_table_t1_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_t1_2eproto = {
  &descriptor_table_t1_2eproto_initialized, descriptor_table_protodef_t1_2eproto, "t1.proto", 127,
  &descriptor_table_t1_2eproto_once, descriptor_table_t1_2eproto_sccs, descriptor_table_t1_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_t1_2eproto::offsets,
  file_level_metadata_t1_2eproto, 1, file_level_enum_descriptors_t1_2eproto, file_level_service_descriptors_t1_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_t1_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_t1_2eproto), true);
namespace t1 {

// ===================================================================

void MSG_BASE::InitAsDefaultInstance() {
  ::t1::_MSG_BASE_default_instance_.msg_test_ = const_cast< ::p1::MSG_TEST*>(
      ::p1::MSG_TEST::internal_default_instance());
  ::t1::_MSG_BASE_default_instance_.msg_test_res_ = const_cast< ::p1::MSG_TEST_RES*>(
      ::p1::MSG_TEST_RES::internal_default_instance());
}
class MSG_BASE::_Internal {
 public:
  static const ::p1::MSG_TEST& msg_test(const MSG_BASE* msg);
  static const ::p1::MSG_TEST_RES& msg_test_res(const MSG_BASE* msg);
};

const ::p1::MSG_TEST&
MSG_BASE::_Internal::msg_test(const MSG_BASE* msg) {
  return *msg->msg_.msg_test_;
}
const ::p1::MSG_TEST_RES&
MSG_BASE::_Internal::msg_test_res(const MSG_BASE* msg) {
  return *msg->msg_.msg_test_res_;
}
void MSG_BASE::set_allocated_msg_test(::p1::MSG_TEST* msg_test) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (msg_test) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_test = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_test, submessage_arena);
    }
    set_has_msg_test();
    msg_.msg_test_ = msg_test;
  }
  // @@protoc_insertion_point(field_set_allocated:t1.MSG_BASE.msg_test)
}
void MSG_BASE::clear_msg_test() {
  if (_internal_has_msg_test()) {
    delete msg_.msg_test_;
    clear_has_msg();
  }
}
void MSG_BASE::set_allocated_msg_test_res(::p1::MSG_TEST_RES* msg_test_res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (msg_test_res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_test_res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_test_res, submessage_arena);
    }
    set_has_msg_test_res();
    msg_.msg_test_res_ = msg_test_res;
  }
  // @@protoc_insertion_point(field_set_allocated:t1.MSG_BASE.msg_test_res)
}
void MSG_BASE::clear_msg_test_res() {
  if (_internal_has_msg_test_res()) {
    delete msg_.msg_test_res_;
    clear_has_msg();
  }
}
MSG_BASE::MSG_BASE()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:t1.MSG_BASE)
}
MSG_BASE::MSG_BASE(const MSG_BASE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_msg();
  switch (from.msg_case()) {
    case kMsgTest: {
      _internal_mutable_msg_test()->::p1::MSG_TEST::MergeFrom(from._internal_msg_test());
      break;
    }
    case kMsgTestRes: {
      _internal_mutable_msg_test_res()->::p1::MSG_TEST_RES::MergeFrom(from._internal_msg_test_res());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:t1.MSG_BASE)
}

void MSG_BASE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_BASE_t1_2eproto.base);
  clear_has_msg();
}

MSG_BASE::~MSG_BASE() {
  // @@protoc_insertion_point(destructor:t1.MSG_BASE)
  SharedDtor();
}

void MSG_BASE::SharedDtor() {
  if (has_msg()) {
    clear_msg();
  }
}

void MSG_BASE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_BASE& MSG_BASE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_BASE_t1_2eproto.base);
  return *internal_default_instance();
}


void MSG_BASE::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:t1.MSG_BASE)
  switch (msg_case()) {
    case kMsgTest: {
      delete msg_.msg_test_;
      break;
    }
    case kMsgTestRes: {
      delete msg_.msg_test_res_;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void MSG_BASE::Clear() {
// @@protoc_insertion_point(message_clear_start:t1.MSG_BASE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_msg();
  _internal_metadata_.Clear();
}

const char* MSG_BASE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .p1.MSG_TEST msg_test = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_test(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .p1.MSG_TEST_RES msg_test_res = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_test_res(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_BASE::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t1.MSG_BASE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .p1.MSG_TEST msg_test = 1;
  if (_internal_has_msg_test()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::msg_test(this), target, stream);
  }

  // .p1.MSG_TEST_RES msg_test_res = 2;
  if (_internal_has_msg_test_res()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::msg_test_res(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t1.MSG_BASE)
  return target;
}

size_t MSG_BASE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t1.MSG_BASE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (msg_case()) {
    // .p1.MSG_TEST msg_test = 1;
    case kMsgTest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.msg_test_);
      break;
    }
    // .p1.MSG_TEST_RES msg_test_res = 2;
    case kMsgTestRes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.msg_test_res_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_BASE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:t1.MSG_BASE)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_BASE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_BASE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:t1.MSG_BASE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:t1.MSG_BASE)
    MergeFrom(*source);
  }
}

void MSG_BASE::MergeFrom(const MSG_BASE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:t1.MSG_BASE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.msg_case()) {
    case kMsgTest: {
      _internal_mutable_msg_test()->::p1::MSG_TEST::MergeFrom(from._internal_msg_test());
      break;
    }
    case kMsgTestRes: {
      _internal_mutable_msg_test_res()->::p1::MSG_TEST_RES::MergeFrom(from._internal_msg_test_res());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void MSG_BASE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:t1.MSG_BASE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_BASE::CopyFrom(const MSG_BASE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t1.MSG_BASE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_BASE::IsInitialized() const {
  return true;
}

void MSG_BASE::InternalSwap(MSG_BASE* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msg_, other->msg_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_BASE::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace t1
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::t1::MSG_BASE* Arena::CreateMaybeMessage< ::t1::MSG_BASE >(Arena* arena) {
  return Arena::CreateInternal< ::t1::MSG_BASE >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
