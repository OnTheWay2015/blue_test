// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: t1.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_t1_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_t1_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "p1.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_t1_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_t1_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_t1_2eproto;
namespace t1 {
class MSG_BASE;
class MSG_BASEDefaultTypeInternal;
extern MSG_BASEDefaultTypeInternal _MSG_BASE_default_instance_;
}  // namespace t1
PROTOBUF_NAMESPACE_OPEN
template<> ::t1::MSG_BASE* Arena::CreateMaybeMessage<::t1::MSG_BASE>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace t1 {

// ===================================================================

class MSG_BASE :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t1.MSG_BASE) */ {
 public:
  MSG_BASE();
  virtual ~MSG_BASE();

  MSG_BASE(const MSG_BASE& from);
  MSG_BASE(MSG_BASE&& from) noexcept
    : MSG_BASE() {
    *this = ::std::move(from);
  }

  inline MSG_BASE& operator=(const MSG_BASE& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_BASE& operator=(MSG_BASE&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_BASE& default_instance();

  enum MsgCase {
    kMsgTest = 1,
    kMsgTestRes = 2,
    MSG_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_BASE* internal_default_instance() {
    return reinterpret_cast<const MSG_BASE*>(
               &_MSG_BASE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MSG_BASE& a, MSG_BASE& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_BASE* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_BASE* New() const final {
    return CreateMaybeMessage<MSG_BASE>(nullptr);
  }

  MSG_BASE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_BASE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_BASE& from);
  void MergeFrom(const MSG_BASE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_BASE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "t1.MSG_BASE";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_t1_2eproto);
    return ::descriptor_table_t1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgTestFieldNumber = 1,
    kMsgTestResFieldNumber = 2,
  };
  // .p1.MSG_TEST msg_test = 1;
  bool has_msg_test() const;
  private:
  bool _internal_has_msg_test() const;
  public:
  void clear_msg_test();
  const ::p1::MSG_TEST& msg_test() const;
  ::p1::MSG_TEST* release_msg_test();
  ::p1::MSG_TEST* mutable_msg_test();
  void set_allocated_msg_test(::p1::MSG_TEST* msg_test);
  private:
  const ::p1::MSG_TEST& _internal_msg_test() const;
  ::p1::MSG_TEST* _internal_mutable_msg_test();
  public:

  // .p1.MSG_TEST_RES msg_test_res = 2;
  bool has_msg_test_res() const;
  private:
  bool _internal_has_msg_test_res() const;
  public:
  void clear_msg_test_res();
  const ::p1::MSG_TEST_RES& msg_test_res() const;
  ::p1::MSG_TEST_RES* release_msg_test_res();
  ::p1::MSG_TEST_RES* mutable_msg_test_res();
  void set_allocated_msg_test_res(::p1::MSG_TEST_RES* msg_test_res);
  private:
  const ::p1::MSG_TEST_RES& _internal_msg_test_res() const;
  ::p1::MSG_TEST_RES* _internal_mutable_msg_test_res();
  public:

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:t1.MSG_BASE)
 private:
  class _Internal;
  void set_has_msg_test();
  void set_has_msg_test_res();

  inline bool has_msg() const;
  inline void clear_has_msg();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union MsgUnion {
    MsgUnion() {}
    ::p1::MSG_TEST* msg_test_;
    ::p1::MSG_TEST_RES* msg_test_res_;
  } msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_t1_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MSG_BASE

// .p1.MSG_TEST msg_test = 1;
inline bool MSG_BASE::_internal_has_msg_test() const {
  return msg_case() == kMsgTest;
}
inline bool MSG_BASE::has_msg_test() const {
  return _internal_has_msg_test();
}
inline void MSG_BASE::set_has_msg_test() {
  _oneof_case_[0] = kMsgTest;
}
inline ::p1::MSG_TEST* MSG_BASE::release_msg_test() {
  // @@protoc_insertion_point(field_release:t1.MSG_BASE.msg_test)
  if (has_msg_test()) {
    clear_has_msg();
      ::p1::MSG_TEST* temp = msg_.msg_test_;
    msg_.msg_test_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::p1::MSG_TEST& MSG_BASE::_internal_msg_test() const {
  return _internal_has_msg_test()
      ? *msg_.msg_test_
      : *reinterpret_cast< ::p1::MSG_TEST*>(&::p1::_MSG_TEST_default_instance_);
}
inline const ::p1::MSG_TEST& MSG_BASE::msg_test() const {
  // @@protoc_insertion_point(field_get:t1.MSG_BASE.msg_test)
  return _internal_msg_test();
}
inline ::p1::MSG_TEST* MSG_BASE::_internal_mutable_msg_test() {
  if (!_internal_has_msg_test()) {
    clear_msg();
    set_has_msg_test();
    msg_.msg_test_ = CreateMaybeMessage< ::p1::MSG_TEST >(
        GetArenaNoVirtual());
  }
  return msg_.msg_test_;
}
inline ::p1::MSG_TEST* MSG_BASE::mutable_msg_test() {
  // @@protoc_insertion_point(field_mutable:t1.MSG_BASE.msg_test)
  return _internal_mutable_msg_test();
}

// .p1.MSG_TEST_RES msg_test_res = 2;
inline bool MSG_BASE::_internal_has_msg_test_res() const {
  return msg_case() == kMsgTestRes;
}
inline bool MSG_BASE::has_msg_test_res() const {
  return _internal_has_msg_test_res();
}
inline void MSG_BASE::set_has_msg_test_res() {
  _oneof_case_[0] = kMsgTestRes;
}
inline ::p1::MSG_TEST_RES* MSG_BASE::release_msg_test_res() {
  // @@protoc_insertion_point(field_release:t1.MSG_BASE.msg_test_res)
  if (has_msg_test_res()) {
    clear_has_msg();
      ::p1::MSG_TEST_RES* temp = msg_.msg_test_res_;
    msg_.msg_test_res_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::p1::MSG_TEST_RES& MSG_BASE::_internal_msg_test_res() const {
  return _internal_has_msg_test_res()
      ? *msg_.msg_test_res_
      : *reinterpret_cast< ::p1::MSG_TEST_RES*>(&::p1::_MSG_TEST_RES_default_instance_);
}
inline const ::p1::MSG_TEST_RES& MSG_BASE::msg_test_res() const {
  // @@protoc_insertion_point(field_get:t1.MSG_BASE.msg_test_res)
  return _internal_msg_test_res();
}
inline ::p1::MSG_TEST_RES* MSG_BASE::_internal_mutable_msg_test_res() {
  if (!_internal_has_msg_test_res()) {
    clear_msg();
    set_has_msg_test_res();
    msg_.msg_test_res_ = CreateMaybeMessage< ::p1::MSG_TEST_RES >(
        GetArenaNoVirtual());
  }
  return msg_.msg_test_res_;
}
inline ::p1::MSG_TEST_RES* MSG_BASE::mutable_msg_test_res() {
  // @@protoc_insertion_point(field_mutable:t1.MSG_BASE.msg_test_res)
  return _internal_mutable_msg_test_res();
}

inline bool MSG_BASE::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void MSG_BASE::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline MSG_BASE::MsgCase MSG_BASE::msg_case() const {
  return MSG_BASE::MsgCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace t1

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_t1_2eproto
