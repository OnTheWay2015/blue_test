// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: p1.proto

#include "p1.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace p1 {
class MSG_TESTDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_TEST> _instance;
} _MSG_TEST_default_instance_;
class MSG_TEST_RESDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_TEST_RES> _instance;
} _MSG_TEST_RES_default_instance_;
class REG_TO_LEADERDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<REG_TO_LEADER> _instance;
} _REG_TO_LEADER_default_instance_;
class REG_TO_LEADER_RESDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<REG_TO_LEADER_RES> _instance;
} _REG_TO_LEADER_RES_default_instance_;
}  // namespace p1
static void InitDefaultsscc_info_MSG_TEST_p1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::p1::_MSG_TEST_default_instance_;
    new (ptr) ::p1::MSG_TEST();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::p1::MSG_TEST::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_TEST_p1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_TEST_p1_2eproto}, {}};

static void InitDefaultsscc_info_MSG_TEST_RES_p1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::p1::_MSG_TEST_RES_default_instance_;
    new (ptr) ::p1::MSG_TEST_RES();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::p1::MSG_TEST_RES::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_TEST_RES_p1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_TEST_RES_p1_2eproto}, {}};

static void InitDefaultsscc_info_REG_TO_LEADER_p1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::p1::_REG_TO_LEADER_default_instance_;
    new (ptr) ::p1::REG_TO_LEADER();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::p1::REG_TO_LEADER::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_REG_TO_LEADER_p1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_REG_TO_LEADER_p1_2eproto}, {}};

static void InitDefaultsscc_info_REG_TO_LEADER_RES_p1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::p1::_REG_TO_LEADER_RES_default_instance_;
    new (ptr) ::p1::REG_TO_LEADER_RES();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::p1::REG_TO_LEADER_RES::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_REG_TO_LEADER_RES_p1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_REG_TO_LEADER_RES_p1_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_p1_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_p1_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_p1_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_p1_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p1::MSG_TEST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::p1::MSG_TEST, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p1::MSG_TEST_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::p1::MSG_TEST_RES, name_res_),
  PROTOBUF_FIELD_OFFSET(::p1::MSG_TEST_RES, a1_),
  PROTOBUF_FIELD_OFFSET(::p1::MSG_TEST_RES, a2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p1::REG_TO_LEADER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::p1::REG_TO_LEADER, packet_id_),
  PROTOBUF_FIELD_OFFSET(::p1::REG_TO_LEADER, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p1::REG_TO_LEADER_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::p1::REG_TO_LEADER_RES, name_res_),
  PROTOBUF_FIELD_OFFSET(::p1::REG_TO_LEADER_RES, packet_id_),
  PROTOBUF_FIELD_OFFSET(::p1::REG_TO_LEADER_RES, a1_),
  PROTOBUF_FIELD_OFFSET(::p1::REG_TO_LEADER_RES, a2_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::p1::MSG_TEST)},
  { 6, -1, sizeof(::p1::MSG_TEST_RES)},
  { 14, -1, sizeof(::p1::REG_TO_LEADER)},
  { 21, -1, sizeof(::p1::REG_TO_LEADER_RES)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p1::_MSG_TEST_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p1::_MSG_TEST_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p1::_REG_TO_LEADER_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p1::_REG_TO_LEADER_RES_default_instance_),
};

const char descriptor_table_protodef_p1_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010p1.proto\022\002p1\"\030\n\010MSG_TEST\022\014\n\004name\030\001 \001(\t"
  "\"8\n\014MSG_TEST_RES\022\020\n\010name_res\030\001 \001(\t\022\n\n\002a1"
  "\030\003 \001(\005\022\n\n\002a2\030\004 \001(\005\"0\n\rREG_TO_LEADER\022\021\n\tp"
  "acket_id\030\002 \001(\005\022\014\n\004name\030\001 \001(\t\"P\n\021REG_TO_L"
  "EADER_RES\022\020\n\010name_res\030\001 \001(\t\022\021\n\tpacket_id"
  "\030\002 \001(\005\022\n\n\002a1\030\003 \001(\005\022\n\n\002a2\030\004 \001(\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_p1_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_p1_2eproto_sccs[4] = {
  &scc_info_MSG_TEST_p1_2eproto.base,
  &scc_info_MSG_TEST_RES_p1_2eproto.base,
  &scc_info_REG_TO_LEADER_p1_2eproto.base,
  &scc_info_REG_TO_LEADER_RES_p1_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_p1_2eproto_once;
static bool descriptor_table_p1_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_p1_2eproto = {
  &descriptor_table_p1_2eproto_initialized, descriptor_table_protodef_p1_2eproto, "p1.proto", 238,
  &descriptor_table_p1_2eproto_once, descriptor_table_p1_2eproto_sccs, descriptor_table_p1_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_p1_2eproto::offsets,
  file_level_metadata_p1_2eproto, 4, file_level_enum_descriptors_p1_2eproto, file_level_service_descriptors_p1_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_p1_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_p1_2eproto), true);
namespace p1 {

// ===================================================================

void MSG_TEST::InitAsDefaultInstance() {
}
class MSG_TEST::_Internal {
 public:
};

MSG_TEST::MSG_TEST()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:p1.MSG_TEST)
}
MSG_TEST::MSG_TEST(const MSG_TEST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:p1.MSG_TEST)
}

void MSG_TEST::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_TEST_p1_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MSG_TEST::~MSG_TEST() {
  // @@protoc_insertion_point(destructor:p1.MSG_TEST)
  SharedDtor();
}

void MSG_TEST::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_TEST::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_TEST& MSG_TEST::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_TEST_p1_2eproto.base);
  return *internal_default_instance();
}


void MSG_TEST::Clear() {
// @@protoc_insertion_point(message_clear_start:p1.MSG_TEST)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* MSG_TEST::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "p1.MSG_TEST.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_TEST::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p1.MSG_TEST)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p1.MSG_TEST.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p1.MSG_TEST)
  return target;
}

size_t MSG_TEST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p1.MSG_TEST)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_TEST::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p1.MSG_TEST)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_TEST* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_TEST>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p1.MSG_TEST)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p1.MSG_TEST)
    MergeFrom(*source);
  }
}

void MSG_TEST::MergeFrom(const MSG_TEST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p1.MSG_TEST)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void MSG_TEST::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p1.MSG_TEST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_TEST::CopyFrom(const MSG_TEST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p1.MSG_TEST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_TEST::IsInitialized() const {
  return true;
}

void MSG_TEST::InternalSwap(MSG_TEST* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_TEST::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_TEST_RES::InitAsDefaultInstance() {
}
class MSG_TEST_RES::_Internal {
 public:
};

MSG_TEST_RES::MSG_TEST_RES()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:p1.MSG_TEST_RES)
}
MSG_TEST_RES::MSG_TEST_RES(const MSG_TEST_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_res_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name_res().empty()) {
    name_res_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_res_);
  }
  ::memcpy(&a1_, &from.a1_,
    static_cast<size_t>(reinterpret_cast<char*>(&a2_) -
    reinterpret_cast<char*>(&a1_)) + sizeof(a2_));
  // @@protoc_insertion_point(copy_constructor:p1.MSG_TEST_RES)
}

void MSG_TEST_RES::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_TEST_RES_p1_2eproto.base);
  name_res_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&a1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a2_) -
      reinterpret_cast<char*>(&a1_)) + sizeof(a2_));
}

MSG_TEST_RES::~MSG_TEST_RES() {
  // @@protoc_insertion_point(destructor:p1.MSG_TEST_RES)
  SharedDtor();
}

void MSG_TEST_RES::SharedDtor() {
  name_res_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_TEST_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_TEST_RES& MSG_TEST_RES::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_TEST_RES_p1_2eproto.base);
  return *internal_default_instance();
}


void MSG_TEST_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:p1.MSG_TEST_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_res_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&a1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a2_) -
      reinterpret_cast<char*>(&a1_)) + sizeof(a2_));
  _internal_metadata_.Clear();
}

const char* MSG_TEST_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name_res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name_res(), ptr, ctx, "p1.MSG_TEST_RES.name_res");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 a1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          a1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 a2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          a2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_TEST_RES::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p1.MSG_TEST_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name_res = 1;
  if (this->name_res().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name_res().data(), static_cast<int>(this->_internal_name_res().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p1.MSG_TEST_RES.name_res");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name_res(), target);
  }

  // int32 a1 = 3;
  if (this->a1() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_a1(), target);
  }

  // int32 a2 = 4;
  if (this->a2() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_a2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p1.MSG_TEST_RES)
  return target;
}

size_t MSG_TEST_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p1.MSG_TEST_RES)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name_res = 1;
  if (this->name_res().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name_res());
  }

  // int32 a1 = 3;
  if (this->a1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_a1());
  }

  // int32 a2 = 4;
  if (this->a2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_a2());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_TEST_RES::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p1.MSG_TEST_RES)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_TEST_RES* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_TEST_RES>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p1.MSG_TEST_RES)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p1.MSG_TEST_RES)
    MergeFrom(*source);
  }
}

void MSG_TEST_RES::MergeFrom(const MSG_TEST_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p1.MSG_TEST_RES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name_res().size() > 0) {

    name_res_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_res_);
  }
  if (from.a1() != 0) {
    _internal_set_a1(from._internal_a1());
  }
  if (from.a2() != 0) {
    _internal_set_a2(from._internal_a2());
  }
}

void MSG_TEST_RES::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p1.MSG_TEST_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_TEST_RES::CopyFrom(const MSG_TEST_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p1.MSG_TEST_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_TEST_RES::IsInitialized() const {
  return true;
}

void MSG_TEST_RES::InternalSwap(MSG_TEST_RES* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_res_.Swap(&other->name_res_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(a1_, other->a1_);
  swap(a2_, other->a2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_TEST_RES::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void REG_TO_LEADER::InitAsDefaultInstance() {
}
class REG_TO_LEADER::_Internal {
 public:
};

REG_TO_LEADER::REG_TO_LEADER()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:p1.REG_TO_LEADER)
}
REG_TO_LEADER::REG_TO_LEADER(const REG_TO_LEADER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  packet_id_ = from.packet_id_;
  // @@protoc_insertion_point(copy_constructor:p1.REG_TO_LEADER)
}

void REG_TO_LEADER::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_REG_TO_LEADER_p1_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  packet_id_ = 0;
}

REG_TO_LEADER::~REG_TO_LEADER() {
  // @@protoc_insertion_point(destructor:p1.REG_TO_LEADER)
  SharedDtor();
}

void REG_TO_LEADER::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void REG_TO_LEADER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const REG_TO_LEADER& REG_TO_LEADER::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_REG_TO_LEADER_p1_2eproto.base);
  return *internal_default_instance();
}


void REG_TO_LEADER::Clear() {
// @@protoc_insertion_point(message_clear_start:p1.REG_TO_LEADER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  packet_id_ = 0;
  _internal_metadata_.Clear();
}

const char* REG_TO_LEADER::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "p1.REG_TO_LEADER.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 packet_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          packet_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* REG_TO_LEADER::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p1.REG_TO_LEADER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p1.REG_TO_LEADER.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 packet_id = 2;
  if (this->packet_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_packet_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p1.REG_TO_LEADER)
  return target;
}

size_t REG_TO_LEADER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p1.REG_TO_LEADER)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 packet_id = 2;
  if (this->packet_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_packet_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void REG_TO_LEADER::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p1.REG_TO_LEADER)
  GOOGLE_DCHECK_NE(&from, this);
  const REG_TO_LEADER* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<REG_TO_LEADER>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p1.REG_TO_LEADER)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p1.REG_TO_LEADER)
    MergeFrom(*source);
  }
}

void REG_TO_LEADER::MergeFrom(const REG_TO_LEADER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p1.REG_TO_LEADER)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.packet_id() != 0) {
    _internal_set_packet_id(from._internal_packet_id());
  }
}

void REG_TO_LEADER::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p1.REG_TO_LEADER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REG_TO_LEADER::CopyFrom(const REG_TO_LEADER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p1.REG_TO_LEADER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REG_TO_LEADER::IsInitialized() const {
  return true;
}

void REG_TO_LEADER::InternalSwap(REG_TO_LEADER* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(packet_id_, other->packet_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata REG_TO_LEADER::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void REG_TO_LEADER_RES::InitAsDefaultInstance() {
}
class REG_TO_LEADER_RES::_Internal {
 public:
};

REG_TO_LEADER_RES::REG_TO_LEADER_RES()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:p1.REG_TO_LEADER_RES)
}
REG_TO_LEADER_RES::REG_TO_LEADER_RES(const REG_TO_LEADER_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_res_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name_res().empty()) {
    name_res_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_res_);
  }
  ::memcpy(&packet_id_, &from.packet_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&a2_) -
    reinterpret_cast<char*>(&packet_id_)) + sizeof(a2_));
  // @@protoc_insertion_point(copy_constructor:p1.REG_TO_LEADER_RES)
}

void REG_TO_LEADER_RES::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_REG_TO_LEADER_RES_p1_2eproto.base);
  name_res_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&packet_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a2_) -
      reinterpret_cast<char*>(&packet_id_)) + sizeof(a2_));
}

REG_TO_LEADER_RES::~REG_TO_LEADER_RES() {
  // @@protoc_insertion_point(destructor:p1.REG_TO_LEADER_RES)
  SharedDtor();
}

void REG_TO_LEADER_RES::SharedDtor() {
  name_res_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void REG_TO_LEADER_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const REG_TO_LEADER_RES& REG_TO_LEADER_RES::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_REG_TO_LEADER_RES_p1_2eproto.base);
  return *internal_default_instance();
}


void REG_TO_LEADER_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:p1.REG_TO_LEADER_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_res_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&packet_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a2_) -
      reinterpret_cast<char*>(&packet_id_)) + sizeof(a2_));
  _internal_metadata_.Clear();
}

const char* REG_TO_LEADER_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name_res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name_res(), ptr, ctx, "p1.REG_TO_LEADER_RES.name_res");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 packet_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          packet_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 a1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          a1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 a2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          a2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* REG_TO_LEADER_RES::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p1.REG_TO_LEADER_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name_res = 1;
  if (this->name_res().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name_res().data(), static_cast<int>(this->_internal_name_res().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p1.REG_TO_LEADER_RES.name_res");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name_res(), target);
  }

  // int32 packet_id = 2;
  if (this->packet_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_packet_id(), target);
  }

  // int32 a1 = 3;
  if (this->a1() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_a1(), target);
  }

  // int32 a2 = 4;
  if (this->a2() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_a2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p1.REG_TO_LEADER_RES)
  return target;
}

size_t REG_TO_LEADER_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p1.REG_TO_LEADER_RES)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name_res = 1;
  if (this->name_res().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name_res());
  }

  // int32 packet_id = 2;
  if (this->packet_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_packet_id());
  }

  // int32 a1 = 3;
  if (this->a1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_a1());
  }

  // int32 a2 = 4;
  if (this->a2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_a2());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void REG_TO_LEADER_RES::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p1.REG_TO_LEADER_RES)
  GOOGLE_DCHECK_NE(&from, this);
  const REG_TO_LEADER_RES* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<REG_TO_LEADER_RES>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p1.REG_TO_LEADER_RES)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p1.REG_TO_LEADER_RES)
    MergeFrom(*source);
  }
}

void REG_TO_LEADER_RES::MergeFrom(const REG_TO_LEADER_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p1.REG_TO_LEADER_RES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name_res().size() > 0) {

    name_res_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_res_);
  }
  if (from.packet_id() != 0) {
    _internal_set_packet_id(from._internal_packet_id());
  }
  if (from.a1() != 0) {
    _internal_set_a1(from._internal_a1());
  }
  if (from.a2() != 0) {
    _internal_set_a2(from._internal_a2());
  }
}

void REG_TO_LEADER_RES::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p1.REG_TO_LEADER_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REG_TO_LEADER_RES::CopyFrom(const REG_TO_LEADER_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p1.REG_TO_LEADER_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REG_TO_LEADER_RES::IsInitialized() const {
  return true;
}

void REG_TO_LEADER_RES::InternalSwap(REG_TO_LEADER_RES* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_res_.Swap(&other->name_res_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(packet_id_, other->packet_id_);
  swap(a1_, other->a1_);
  swap(a2_, other->a2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata REG_TO_LEADER_RES::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace p1
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::p1::MSG_TEST* Arena::CreateMaybeMessage< ::p1::MSG_TEST >(Arena* arena) {
  return Arena::CreateInternal< ::p1::MSG_TEST >(arena);
}
template<> PROTOBUF_NOINLINE ::p1::MSG_TEST_RES* Arena::CreateMaybeMessage< ::p1::MSG_TEST_RES >(Arena* arena) {
  return Arena::CreateInternal< ::p1::MSG_TEST_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::p1::REG_TO_LEADER* Arena::CreateMaybeMessage< ::p1::REG_TO_LEADER >(Arena* arena) {
  return Arena::CreateInternal< ::p1::REG_TO_LEADER >(arena);
}
template<> PROTOBUF_NOINLINE ::p1::REG_TO_LEADER_RES* Arena::CreateMaybeMessage< ::p1::REG_TO_LEADER_RES >(Arena* arena) {
  return Arena::CreateInternal< ::p1::REG_TO_LEADER_RES >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
