// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_base.proto

#include "server_base.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_server_5fbase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_HEARTBEAT_server_5fbase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fbase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_LEADER_BROADCAST_ADD_server_5fbase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fbase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_LEADER_BROADCAST_REMOVE_server_5fbase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fbase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_LEADER_REG_server_5fbase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fbase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_LEADER_REG_RES_server_5fbase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fbase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_LEADER_SERVER_LIST_server_5fbase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fbase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_LEADER_SERVER_LIST_RES_server_5fbase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fbase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_SVR_REG_RES_server_5fbase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fbase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_TEST_server_5fbase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fbase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_TEST_RES_server_5fbase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fbase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SERVICE_INFO_server_5fbase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fbase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SERVICE_INFO_SINGLE_server_5fbase_2eproto;
namespace server_base {
class MSG_TESTDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_TEST> _instance;
} _MSG_TEST_default_instance_;
class MSG_TEST_RESDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_TEST_RES> _instance;
} _MSG_TEST_RES_default_instance_;
class SERVICE_INFODefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SERVICE_INFO> _instance;
} _SERVICE_INFO_default_instance_;
class SERVICE_INFO_SINGLEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SERVICE_INFO_SINGLE> _instance;
} _SERVICE_INFO_SINGLE_default_instance_;
class MSG_HEARTBEATDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_HEARTBEAT> _instance;
} _MSG_HEARTBEAT_default_instance_;
class MSG_HEARTBEAT_RESDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_HEARTBEAT_RES> _instance;
} _MSG_HEARTBEAT_RES_default_instance_;
class MSG_LEADER_REGDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_LEADER_REG> _instance;
} _MSG_LEADER_REG_default_instance_;
class MSG_LEADER_SERVER_LISTDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_LEADER_SERVER_LIST> _instance;
} _MSG_LEADER_SERVER_LIST_default_instance_;
class MSG_LEADER_BROADCAST_ADDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_LEADER_BROADCAST_ADD> _instance;
} _MSG_LEADER_BROADCAST_ADD_default_instance_;
class MSG_LEADER_BROADCAST_REMOVEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_LEADER_BROADCAST_REMOVE> _instance;
} _MSG_LEADER_BROADCAST_REMOVE_default_instance_;
class MSG_LEADER_REG_RESDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_LEADER_REG_RES> _instance;
} _MSG_LEADER_REG_RES_default_instance_;
class MSG_LEADER_SERVER_LIST_RESDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_LEADER_SERVER_LIST_RES> _instance;
} _MSG_LEADER_SERVER_LIST_RES_default_instance_;
class MSG_SVR_REGDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_SVR_REG> _instance;
} _MSG_SVR_REG_default_instance_;
class MSG_SVR_REG_RESDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_SVR_REG_RES> _instance;
} _MSG_SVR_REG_RES_default_instance_;
class MSG_SVR_BASEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_SVR_BASE> _instance;
  const ::server_base::MSG_LEADER_REG* msg_leader_reg_;
  const ::server_base::MSG_LEADER_SERVER_LIST* msg_leader_server_list_;
  const ::server_base::MSG_LEADER_REG_RES* msg_leader_reg_res_;
  const ::server_base::MSG_LEADER_SERVER_LIST_RES* msg_leader_server_list_res_;
  const ::server_base::MSG_LEADER_BROADCAST_ADD* msg_leader_broadcast_add_;
  const ::server_base::MSG_LEADER_BROADCAST_REMOVE* msg_leader_broadcast_remove_;
  const ::server_base::MSG_SVR_REG_RES* msg_svr_reg_;
  const ::server_base::MSG_SVR_REG_RES* msg_svr_reg_res_;
  const ::server_base::MSG_HEARTBEAT* msg_heartbeat_;
  const ::server_base::MSG_HEARTBEAT* msg_heartbeat_res_;
  const ::server_base::MSG_TEST* msg_test_;
  const ::server_base::MSG_TEST_RES* msg_test_res_;
} _MSG_SVR_BASE_default_instance_;
}  // namespace server_base
static void InitDefaultsscc_info_MSG_HEARTBEAT_server_5fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server_base::_MSG_HEARTBEAT_default_instance_;
    new (ptr) ::server_base::MSG_HEARTBEAT();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server_base::MSG_HEARTBEAT::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_HEARTBEAT_server_5fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_HEARTBEAT_server_5fbase_2eproto}, {}};

static void InitDefaultsscc_info_MSG_HEARTBEAT_RES_server_5fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server_base::_MSG_HEARTBEAT_RES_default_instance_;
    new (ptr) ::server_base::MSG_HEARTBEAT_RES();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server_base::MSG_HEARTBEAT_RES::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_HEARTBEAT_RES_server_5fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_HEARTBEAT_RES_server_5fbase_2eproto}, {}};

static void InitDefaultsscc_info_MSG_LEADER_BROADCAST_ADD_server_5fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server_base::_MSG_LEADER_BROADCAST_ADD_default_instance_;
    new (ptr) ::server_base::MSG_LEADER_BROADCAST_ADD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server_base::MSG_LEADER_BROADCAST_ADD::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_LEADER_BROADCAST_ADD_server_5fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_LEADER_BROADCAST_ADD_server_5fbase_2eproto}, {
      &scc_info_SERVICE_INFO_server_5fbase_2eproto.base,}};

static void InitDefaultsscc_info_MSG_LEADER_BROADCAST_REMOVE_server_5fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server_base::_MSG_LEADER_BROADCAST_REMOVE_default_instance_;
    new (ptr) ::server_base::MSG_LEADER_BROADCAST_REMOVE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server_base::MSG_LEADER_BROADCAST_REMOVE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_LEADER_BROADCAST_REMOVE_server_5fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_LEADER_BROADCAST_REMOVE_server_5fbase_2eproto}, {
      &scc_info_SERVICE_INFO_server_5fbase_2eproto.base,}};

static void InitDefaultsscc_info_MSG_LEADER_REG_server_5fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server_base::_MSG_LEADER_REG_default_instance_;
    new (ptr) ::server_base::MSG_LEADER_REG();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server_base::MSG_LEADER_REG::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_LEADER_REG_server_5fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_LEADER_REG_server_5fbase_2eproto}, {
      &scc_info_SERVICE_INFO_server_5fbase_2eproto.base,}};

static void InitDefaultsscc_info_MSG_LEADER_REG_RES_server_5fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server_base::_MSG_LEADER_REG_RES_default_instance_;
    new (ptr) ::server_base::MSG_LEADER_REG_RES();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server_base::MSG_LEADER_REG_RES::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_LEADER_REG_RES_server_5fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_LEADER_REG_RES_server_5fbase_2eproto}, {}};

static void InitDefaultsscc_info_MSG_LEADER_SERVER_LIST_server_5fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server_base::_MSG_LEADER_SERVER_LIST_default_instance_;
    new (ptr) ::server_base::MSG_LEADER_SERVER_LIST();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server_base::MSG_LEADER_SERVER_LIST::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_LEADER_SERVER_LIST_server_5fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_LEADER_SERVER_LIST_server_5fbase_2eproto}, {}};

static void InitDefaultsscc_info_MSG_LEADER_SERVER_LIST_RES_server_5fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server_base::_MSG_LEADER_SERVER_LIST_RES_default_instance_;
    new (ptr) ::server_base::MSG_LEADER_SERVER_LIST_RES();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server_base::MSG_LEADER_SERVER_LIST_RES::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_LEADER_SERVER_LIST_RES_server_5fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_LEADER_SERVER_LIST_RES_server_5fbase_2eproto}, {
      &scc_info_SERVICE_INFO_server_5fbase_2eproto.base,}};

static void InitDefaultsscc_info_MSG_SVR_BASE_server_5fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server_base::_MSG_SVR_BASE_default_instance_;
    new (ptr) ::server_base::MSG_SVR_BASE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server_base::MSG_SVR_BASE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_MSG_SVR_BASE_server_5fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 10, 0, InitDefaultsscc_info_MSG_SVR_BASE_server_5fbase_2eproto}, {
      &scc_info_MSG_LEADER_REG_server_5fbase_2eproto.base,
      &scc_info_MSG_LEADER_SERVER_LIST_server_5fbase_2eproto.base,
      &scc_info_MSG_LEADER_REG_RES_server_5fbase_2eproto.base,
      &scc_info_MSG_LEADER_SERVER_LIST_RES_server_5fbase_2eproto.base,
      &scc_info_MSG_LEADER_BROADCAST_ADD_server_5fbase_2eproto.base,
      &scc_info_MSG_LEADER_BROADCAST_REMOVE_server_5fbase_2eproto.base,
      &scc_info_MSG_SVR_REG_RES_server_5fbase_2eproto.base,
      &scc_info_MSG_HEARTBEAT_server_5fbase_2eproto.base,
      &scc_info_MSG_TEST_server_5fbase_2eproto.base,
      &scc_info_MSG_TEST_RES_server_5fbase_2eproto.base,}};

static void InitDefaultsscc_info_MSG_SVR_REG_server_5fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server_base::_MSG_SVR_REG_default_instance_;
    new (ptr) ::server_base::MSG_SVR_REG();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server_base::MSG_SVR_REG::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_SVR_REG_server_5fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_SVR_REG_server_5fbase_2eproto}, {
      &scc_info_SERVICE_INFO_SINGLE_server_5fbase_2eproto.base,}};

static void InitDefaultsscc_info_MSG_SVR_REG_RES_server_5fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server_base::_MSG_SVR_REG_RES_default_instance_;
    new (ptr) ::server_base::MSG_SVR_REG_RES();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server_base::MSG_SVR_REG_RES::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_SVR_REG_RES_server_5fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_SVR_REG_RES_server_5fbase_2eproto}, {
      &scc_info_SERVICE_INFO_SINGLE_server_5fbase_2eproto.base,}};

static void InitDefaultsscc_info_MSG_TEST_server_5fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server_base::_MSG_TEST_default_instance_;
    new (ptr) ::server_base::MSG_TEST();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server_base::MSG_TEST::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_TEST_server_5fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_TEST_server_5fbase_2eproto}, {}};

static void InitDefaultsscc_info_MSG_TEST_RES_server_5fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server_base::_MSG_TEST_RES_default_instance_;
    new (ptr) ::server_base::MSG_TEST_RES();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server_base::MSG_TEST_RES::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_TEST_RES_server_5fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_TEST_RES_server_5fbase_2eproto}, {}};

static void InitDefaultsscc_info_SERVICE_INFO_server_5fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server_base::_SERVICE_INFO_default_instance_;
    new (ptr) ::server_base::SERVICE_INFO();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server_base::SERVICE_INFO::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SERVICE_INFO_server_5fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SERVICE_INFO_server_5fbase_2eproto}, {}};

static void InitDefaultsscc_info_SERVICE_INFO_SINGLE_server_5fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server_base::_SERVICE_INFO_SINGLE_default_instance_;
    new (ptr) ::server_base::SERVICE_INFO_SINGLE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server_base::SERVICE_INFO_SINGLE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SERVICE_INFO_SINGLE_server_5fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SERVICE_INFO_SINGLE_server_5fbase_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_server_5fbase_2eproto[15];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_server_5fbase_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_server_5fbase_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_server_5fbase_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server_base::MSG_TEST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server_base::MSG_TEST, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server_base::MSG_TEST_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server_base::MSG_TEST_RES, name_res_),
  PROTOBUF_FIELD_OFFSET(::server_base::MSG_TEST_RES, a1_),
  PROTOBUF_FIELD_OFFSET(::server_base::MSG_TEST_RES, a2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server_base::SERVICE_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server_base::SERVICE_INFO, svrid_),
  PROTOBUF_FIELD_OFFSET(::server_base::SERVICE_INFO, type_),
  PROTOBUF_FIELD_OFFSET(::server_base::SERVICE_INFO, mode_),
  PROTOBUF_FIELD_OFFSET(::server_base::SERVICE_INFO, ipstr_),
  PROTOBUF_FIELD_OFFSET(::server_base::SERVICE_INFO, port_),
  PROTOBUF_FIELD_OFFSET(::server_base::SERVICE_INFO, sessionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server_base::SERVICE_INFO_SINGLE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server_base::SERVICE_INFO_SINGLE, svrid_),
  PROTOBUF_FIELD_OFFSET(::server_base::SERVICE_INFO_SINGLE, type_),
  PROTOBUF_FIELD_OFFSET(::server_base::SERVICE_INFO_SINGLE, reg_flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server_base::MSG_HEARTBEAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server_base::MSG_HEARTBEAT_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server_base::MSG_LEADER_REG, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server_base::MSG_LEADER_REG, infos_),
  PROTOBUF_FIELD_OFFSET(::server_base::MSG_LEADER_REG, svrid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server_base::MSG_LEADER_SERVER_LIST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server_base::MSG_LEADER_BROADCAST_ADD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server_base::MSG_LEADER_BROADCAST_ADD, infos_),
  PROTOBUF_FIELD_OFFSET(::server_base::MSG_LEADER_BROADCAST_ADD, svrid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server_base::MSG_LEADER_BROADCAST_REMOVE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server_base::MSG_LEADER_BROADCAST_REMOVE, infos_),
  PROTOBUF_FIELD_OFFSET(::server_base::MSG_LEADER_BROADCAST_REMOVE, svrid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server_base::MSG_LEADER_REG_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server_base::MSG_LEADER_REG_RES, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server_base::MSG_LEADER_SERVER_LIST_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server_base::MSG_LEADER_SERVER_LIST_RES, infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server_base::MSG_SVR_REG, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server_base::MSG_SVR_REG, infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server_base::MSG_SVR_REG_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server_base::MSG_SVR_REG_RES, infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server_base::MSG_SVR_BASE, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::server_base::MSG_SVR_BASE, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::server_base::MSG_SVR_BASEDefaultTypeInternal, msg_leader_reg_),
  offsetof(::server_base::MSG_SVR_BASEDefaultTypeInternal, msg_leader_server_list_),
  offsetof(::server_base::MSG_SVR_BASEDefaultTypeInternal, msg_leader_reg_res_),
  offsetof(::server_base::MSG_SVR_BASEDefaultTypeInternal, msg_leader_server_list_res_),
  offsetof(::server_base::MSG_SVR_BASEDefaultTypeInternal, msg_leader_broadcast_add_),
  offsetof(::server_base::MSG_SVR_BASEDefaultTypeInternal, msg_leader_broadcast_remove_),
  offsetof(::server_base::MSG_SVR_BASEDefaultTypeInternal, msg_svr_reg_),
  offsetof(::server_base::MSG_SVR_BASEDefaultTypeInternal, msg_svr_reg_res_),
  offsetof(::server_base::MSG_SVR_BASEDefaultTypeInternal, msg_heartbeat_),
  offsetof(::server_base::MSG_SVR_BASEDefaultTypeInternal, msg_heartbeat_res_),
  offsetof(::server_base::MSG_SVR_BASEDefaultTypeInternal, msg_test_),
  offsetof(::server_base::MSG_SVR_BASEDefaultTypeInternal, msg_test_res_),
  PROTOBUF_FIELD_OFFSET(::server_base::MSG_SVR_BASE, msg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::server_base::MSG_TEST)},
  { 6, -1, sizeof(::server_base::MSG_TEST_RES)},
  { 14, -1, sizeof(::server_base::SERVICE_INFO)},
  { 25, -1, sizeof(::server_base::SERVICE_INFO_SINGLE)},
  { 33, -1, sizeof(::server_base::MSG_HEARTBEAT)},
  { 38, -1, sizeof(::server_base::MSG_HEARTBEAT_RES)},
  { 43, -1, sizeof(::server_base::MSG_LEADER_REG)},
  { 50, -1, sizeof(::server_base::MSG_LEADER_SERVER_LIST)},
  { 55, -1, sizeof(::server_base::MSG_LEADER_BROADCAST_ADD)},
  { 62, -1, sizeof(::server_base::MSG_LEADER_BROADCAST_REMOVE)},
  { 69, -1, sizeof(::server_base::MSG_LEADER_REG_RES)},
  { 75, -1, sizeof(::server_base::MSG_LEADER_SERVER_LIST_RES)},
  { 81, -1, sizeof(::server_base::MSG_SVR_REG)},
  { 87, -1, sizeof(::server_base::MSG_SVR_REG_RES)},
  { 93, -1, sizeof(::server_base::MSG_SVR_BASE)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server_base::_MSG_TEST_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server_base::_MSG_TEST_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server_base::_SERVICE_INFO_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server_base::_SERVICE_INFO_SINGLE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server_base::_MSG_HEARTBEAT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server_base::_MSG_HEARTBEAT_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server_base::_MSG_LEADER_REG_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server_base::_MSG_LEADER_SERVER_LIST_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server_base::_MSG_LEADER_BROADCAST_ADD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server_base::_MSG_LEADER_BROADCAST_REMOVE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server_base::_MSG_LEADER_REG_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server_base::_MSG_LEADER_SERVER_LIST_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server_base::_MSG_SVR_REG_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server_base::_MSG_SVR_REG_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server_base::_MSG_SVR_BASE_default_instance_),
};

const char descriptor_table_protodef_server_5fbase_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021server_base.proto\022\013server_base\"\030\n\010MSG_"
  "TEST\022\014\n\004name\030\001 \001(\t\"8\n\014MSG_TEST_RES\022\020\n\010na"
  "me_res\030\001 \001(\t\022\n\n\002a1\030\003 \001(\005\022\n\n\002a2\030\004 \001(\005\"i\n\014"
  "SERVICE_INFO\022\r\n\005svrid\030\001 \001(\005\022\014\n\004type\030\002 \001("
  "\005\022\014\n\004mode\030\003 \001(\005\022\r\n\005ipstr\030\004 \001(\t\022\014\n\004port\030\005"
  " \001(\005\022\021\n\tsessionid\030\006 \001(\003\"D\n\023SERVICE_INFO_"
  "SINGLE\022\r\n\005svrid\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\020\n\010r"
  "eg_flag\030\003 \001(\003\"\017\n\rMSG_HEARTBEAT\"\023\n\021MSG_HE"
  "ARTBEAT_RES\"I\n\016MSG_LEADER_REG\022(\n\005infos\030\001"
  " \003(\0132\031.server_base.SERVICE_INFO\022\r\n\005svrid"
  "\030\002 \001(\005\"\030\n\026MSG_LEADER_SERVER_LIST\"S\n\030MSG_"
  "LEADER_BROADCAST_ADD\022(\n\005infos\030\001 \003(\0132\031.se"
  "rver_base.SERVICE_INFO\022\r\n\005svrid\030\002 \001(\005\"V\n"
  "\033MSG_LEADER_BROADCAST_REMOVE\022(\n\005infos\030\001 "
  "\003(\0132\031.server_base.SERVICE_INFO\022\r\n\005svrid\030"
  "\002 \001(\005\"$\n\022MSG_LEADER_REG_RES\022\016\n\006result\030\001 "
  "\001(\005\"F\n\032MSG_LEADER_SERVER_LIST_RES\022(\n\005inf"
  "os\030\001 \003(\0132\031.server_base.SERVICE_INFO\">\n\013M"
  "SG_SVR_REG\022/\n\005infos\030\001 \003(\0132 .server_base."
  "SERVICE_INFO_SINGLE\"B\n\017MSG_SVR_REG_RES\022/"
  "\n\005infos\030\001 \003(\0132 .server_base.SERVICE_INFO"
  "_SINGLE\"\375\005\n\014MSG_SVR_BASE\0225\n\016MSG_LEADER_R"
  "EG\030e \001(\0132\033.server_base.MSG_LEADER_REGH\000\022"
  "E\n\026MSG_LEADER_SERVER_LIST\030f \001(\0132#.server"
  "_base.MSG_LEADER_SERVER_LISTH\000\022=\n\022MSG_LE"
  "ADER_REG_RES\030g \001(\0132\037.server_base.MSG_LEA"
  "DER_REG_RESH\000\022M\n\032MSG_LEADER_SERVER_LIST_"
  "RES\030h \001(\0132\'.server_base.MSG_LEADER_SERVE"
  "R_LIST_RESH\000\022I\n\030MSG_LEADER_BROADCAST_ADD"
  "\030i \001(\0132%.server_base.MSG_LEADER_BROADCAS"
  "T_ADDH\000\022O\n\033MSG_LEADER_BROADCAST_REMOVE\030j"
  " \001(\0132(.server_base.MSG_LEADER_BROADCAST_"
  "REMOVEH\000\0224\n\013MSG_SVR_REG\030\364\003 \001(\0132\034.server_"
  "base.MSG_SVR_REG_RESH\000\0228\n\017MSG_SVR_REG_RE"
  "S\030\365\003 \001(\0132\034.server_base.MSG_SVR_REG_RESH\000"
  "\0224\n\rMSG_HEARTBEAT\030\347\007 \001(\0132\032.server_base.M"
  "SG_HEARTBEATH\000\0228\n\021MSG_HEARTBEAT_RES\030\350\007 \001"
  "(\0132\032.server_base.MSG_HEARTBEATH\000\022*\n\010MSG_"
  "TEST\030\251F \001(\0132\025.server_base.MSG_TESTH\000\0222\n\014"
  "MSG_TEST_RES\030\252F \001(\0132\031.server_base.MSG_TE"
  "ST_RESH\000B\005\n\003msgb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_server_5fbase_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_server_5fbase_2eproto_sccs[15] = {
  &scc_info_MSG_HEARTBEAT_server_5fbase_2eproto.base,
  &scc_info_MSG_HEARTBEAT_RES_server_5fbase_2eproto.base,
  &scc_info_MSG_LEADER_BROADCAST_ADD_server_5fbase_2eproto.base,
  &scc_info_MSG_LEADER_BROADCAST_REMOVE_server_5fbase_2eproto.base,
  &scc_info_MSG_LEADER_REG_server_5fbase_2eproto.base,
  &scc_info_MSG_LEADER_REG_RES_server_5fbase_2eproto.base,
  &scc_info_MSG_LEADER_SERVER_LIST_server_5fbase_2eproto.base,
  &scc_info_MSG_LEADER_SERVER_LIST_RES_server_5fbase_2eproto.base,
  &scc_info_MSG_SVR_BASE_server_5fbase_2eproto.base,
  &scc_info_MSG_SVR_REG_server_5fbase_2eproto.base,
  &scc_info_MSG_SVR_REG_RES_server_5fbase_2eproto.base,
  &scc_info_MSG_TEST_server_5fbase_2eproto.base,
  &scc_info_MSG_TEST_RES_server_5fbase_2eproto.base,
  &scc_info_SERVICE_INFO_server_5fbase_2eproto.base,
  &scc_info_SERVICE_INFO_SINGLE_server_5fbase_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_server_5fbase_2eproto_once;
static bool descriptor_table_server_5fbase_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_5fbase_2eproto = {
  &descriptor_table_server_5fbase_2eproto_initialized, descriptor_table_protodef_server_5fbase_2eproto, "server_base.proto", 1623,
  &descriptor_table_server_5fbase_2eproto_once, descriptor_table_server_5fbase_2eproto_sccs, descriptor_table_server_5fbase_2eproto_deps, 15, 0,
  schemas, file_default_instances, TableStruct_server_5fbase_2eproto::offsets,
  file_level_metadata_server_5fbase_2eproto, 15, file_level_enum_descriptors_server_5fbase_2eproto, file_level_service_descriptors_server_5fbase_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_server_5fbase_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_server_5fbase_2eproto), true);
namespace server_base {

// ===================================================================

void MSG_TEST::InitAsDefaultInstance() {
}
class MSG_TEST::_Internal {
 public:
};

MSG_TEST::MSG_TEST()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:server_base.MSG_TEST)
}
MSG_TEST::MSG_TEST(const MSG_TEST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:server_base.MSG_TEST)
}

void MSG_TEST::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_TEST_server_5fbase_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MSG_TEST::~MSG_TEST() {
  // @@protoc_insertion_point(destructor:server_base.MSG_TEST)
  SharedDtor();
}

void MSG_TEST::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_TEST::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_TEST& MSG_TEST::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_TEST_server_5fbase_2eproto.base);
  return *internal_default_instance();
}


void MSG_TEST::Clear() {
// @@protoc_insertion_point(message_clear_start:server_base.MSG_TEST)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* MSG_TEST::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "server_base.MSG_TEST.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_TEST::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server_base.MSG_TEST)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "server_base.MSG_TEST.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server_base.MSG_TEST)
  return target;
}

size_t MSG_TEST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server_base.MSG_TEST)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_TEST::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server_base.MSG_TEST)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_TEST* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_TEST>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server_base.MSG_TEST)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server_base.MSG_TEST)
    MergeFrom(*source);
  }
}

void MSG_TEST::MergeFrom(const MSG_TEST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server_base.MSG_TEST)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void MSG_TEST::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server_base.MSG_TEST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_TEST::CopyFrom(const MSG_TEST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server_base.MSG_TEST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_TEST::IsInitialized() const {
  return true;
}

void MSG_TEST::InternalSwap(MSG_TEST* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_TEST::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_TEST_RES::InitAsDefaultInstance() {
}
class MSG_TEST_RES::_Internal {
 public:
};

MSG_TEST_RES::MSG_TEST_RES()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:server_base.MSG_TEST_RES)
}
MSG_TEST_RES::MSG_TEST_RES(const MSG_TEST_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_res_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name_res().empty()) {
    name_res_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_res_);
  }
  ::memcpy(&a1_, &from.a1_,
    static_cast<size_t>(reinterpret_cast<char*>(&a2_) -
    reinterpret_cast<char*>(&a1_)) + sizeof(a2_));
  // @@protoc_insertion_point(copy_constructor:server_base.MSG_TEST_RES)
}

void MSG_TEST_RES::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_TEST_RES_server_5fbase_2eproto.base);
  name_res_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&a1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a2_) -
      reinterpret_cast<char*>(&a1_)) + sizeof(a2_));
}

MSG_TEST_RES::~MSG_TEST_RES() {
  // @@protoc_insertion_point(destructor:server_base.MSG_TEST_RES)
  SharedDtor();
}

void MSG_TEST_RES::SharedDtor() {
  name_res_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_TEST_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_TEST_RES& MSG_TEST_RES::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_TEST_RES_server_5fbase_2eproto.base);
  return *internal_default_instance();
}


void MSG_TEST_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:server_base.MSG_TEST_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_res_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&a1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a2_) -
      reinterpret_cast<char*>(&a1_)) + sizeof(a2_));
  _internal_metadata_.Clear();
}

const char* MSG_TEST_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name_res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name_res(), ptr, ctx, "server_base.MSG_TEST_RES.name_res");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 a1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          a1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 a2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          a2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_TEST_RES::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server_base.MSG_TEST_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name_res = 1;
  if (this->name_res().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name_res().data(), static_cast<int>(this->_internal_name_res().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "server_base.MSG_TEST_RES.name_res");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name_res(), target);
  }

  // int32 a1 = 3;
  if (this->a1() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_a1(), target);
  }

  // int32 a2 = 4;
  if (this->a2() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_a2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server_base.MSG_TEST_RES)
  return target;
}

size_t MSG_TEST_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server_base.MSG_TEST_RES)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name_res = 1;
  if (this->name_res().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name_res());
  }

  // int32 a1 = 3;
  if (this->a1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_a1());
  }

  // int32 a2 = 4;
  if (this->a2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_a2());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_TEST_RES::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server_base.MSG_TEST_RES)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_TEST_RES* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_TEST_RES>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server_base.MSG_TEST_RES)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server_base.MSG_TEST_RES)
    MergeFrom(*source);
  }
}

void MSG_TEST_RES::MergeFrom(const MSG_TEST_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server_base.MSG_TEST_RES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name_res().size() > 0) {

    name_res_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_res_);
  }
  if (from.a1() != 0) {
    _internal_set_a1(from._internal_a1());
  }
  if (from.a2() != 0) {
    _internal_set_a2(from._internal_a2());
  }
}

void MSG_TEST_RES::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server_base.MSG_TEST_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_TEST_RES::CopyFrom(const MSG_TEST_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server_base.MSG_TEST_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_TEST_RES::IsInitialized() const {
  return true;
}

void MSG_TEST_RES::InternalSwap(MSG_TEST_RES* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_res_.Swap(&other->name_res_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(a1_, other->a1_);
  swap(a2_, other->a2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_TEST_RES::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SERVICE_INFO::InitAsDefaultInstance() {
}
class SERVICE_INFO::_Internal {
 public:
};

SERVICE_INFO::SERVICE_INFO()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:server_base.SERVICE_INFO)
}
SERVICE_INFO::SERVICE_INFO(const SERVICE_INFO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ipstr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ipstr().empty()) {
    ipstr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ipstr_);
  }
  ::memcpy(&svrid_, &from.svrid_,
    static_cast<size_t>(reinterpret_cast<char*>(&sessionid_) -
    reinterpret_cast<char*>(&svrid_)) + sizeof(sessionid_));
  // @@protoc_insertion_point(copy_constructor:server_base.SERVICE_INFO)
}

void SERVICE_INFO::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SERVICE_INFO_server_5fbase_2eproto.base);
  ipstr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&svrid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sessionid_) -
      reinterpret_cast<char*>(&svrid_)) + sizeof(sessionid_));
}

SERVICE_INFO::~SERVICE_INFO() {
  // @@protoc_insertion_point(destructor:server_base.SERVICE_INFO)
  SharedDtor();
}

void SERVICE_INFO::SharedDtor() {
  ipstr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SERVICE_INFO::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SERVICE_INFO& SERVICE_INFO::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SERVICE_INFO_server_5fbase_2eproto.base);
  return *internal_default_instance();
}


void SERVICE_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:server_base.SERVICE_INFO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ipstr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&svrid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sessionid_) -
      reinterpret_cast<char*>(&svrid_)) + sizeof(sessionid_));
  _internal_metadata_.Clear();
}

const char* SERVICE_INFO::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 svrid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          svrid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ipstr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_ipstr(), ptr, ctx, "server_base.SERVICE_INFO.ipstr");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 sessionid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SERVICE_INFO::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server_base.SERVICE_INFO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 svrid = 1;
  if (this->svrid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_svrid(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // int32 mode = 3;
  if (this->mode() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_mode(), target);
  }

  // string ipstr = 4;
  if (this->ipstr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ipstr().data(), static_cast<int>(this->_internal_ipstr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "server_base.SERVICE_INFO.ipstr");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ipstr(), target);
  }

  // int32 port = 5;
  if (this->port() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_port(), target);
  }

  // int64 sessionid = 6;
  if (this->sessionid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_sessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server_base.SERVICE_INFO)
  return target;
}

size_t SERVICE_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server_base.SERVICE_INFO)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ipstr = 4;
  if (this->ipstr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ipstr());
  }

  // int32 svrid = 1;
  if (this->svrid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_svrid());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 mode = 3;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mode());
  }

  // int32 port = 5;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  // int64 sessionid = 6;
  if (this->sessionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sessionid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SERVICE_INFO::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server_base.SERVICE_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  const SERVICE_INFO* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SERVICE_INFO>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server_base.SERVICE_INFO)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server_base.SERVICE_INFO)
    MergeFrom(*source);
  }
}

void SERVICE_INFO::MergeFrom(const SERVICE_INFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server_base.SERVICE_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ipstr().size() > 0) {

    ipstr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ipstr_);
  }
  if (from.svrid() != 0) {
    _internal_set_svrid(from._internal_svrid());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.sessionid() != 0) {
    _internal_set_sessionid(from._internal_sessionid());
  }
}

void SERVICE_INFO::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server_base.SERVICE_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SERVICE_INFO::CopyFrom(const SERVICE_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server_base.SERVICE_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SERVICE_INFO::IsInitialized() const {
  return true;
}

void SERVICE_INFO::InternalSwap(SERVICE_INFO* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ipstr_.Swap(&other->ipstr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(svrid_, other->svrid_);
  swap(type_, other->type_);
  swap(mode_, other->mode_);
  swap(port_, other->port_);
  swap(sessionid_, other->sessionid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SERVICE_INFO::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SERVICE_INFO_SINGLE::InitAsDefaultInstance() {
}
class SERVICE_INFO_SINGLE::_Internal {
 public:
};

SERVICE_INFO_SINGLE::SERVICE_INFO_SINGLE()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:server_base.SERVICE_INFO_SINGLE)
}
SERVICE_INFO_SINGLE::SERVICE_INFO_SINGLE(const SERVICE_INFO_SINGLE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&svrid_, &from.svrid_,
    static_cast<size_t>(reinterpret_cast<char*>(&reg_flag_) -
    reinterpret_cast<char*>(&svrid_)) + sizeof(reg_flag_));
  // @@protoc_insertion_point(copy_constructor:server_base.SERVICE_INFO_SINGLE)
}

void SERVICE_INFO_SINGLE::SharedCtor() {
  ::memset(&svrid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reg_flag_) -
      reinterpret_cast<char*>(&svrid_)) + sizeof(reg_flag_));
}

SERVICE_INFO_SINGLE::~SERVICE_INFO_SINGLE() {
  // @@protoc_insertion_point(destructor:server_base.SERVICE_INFO_SINGLE)
  SharedDtor();
}

void SERVICE_INFO_SINGLE::SharedDtor() {
}

void SERVICE_INFO_SINGLE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SERVICE_INFO_SINGLE& SERVICE_INFO_SINGLE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SERVICE_INFO_SINGLE_server_5fbase_2eproto.base);
  return *internal_default_instance();
}


void SERVICE_INFO_SINGLE::Clear() {
// @@protoc_insertion_point(message_clear_start:server_base.SERVICE_INFO_SINGLE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&svrid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reg_flag_) -
      reinterpret_cast<char*>(&svrid_)) + sizeof(reg_flag_));
  _internal_metadata_.Clear();
}

const char* SERVICE_INFO_SINGLE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 svrid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          svrid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 reg_flag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          reg_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SERVICE_INFO_SINGLE::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server_base.SERVICE_INFO_SINGLE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 svrid = 1;
  if (this->svrid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_svrid(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // int64 reg_flag = 3;
  if (this->reg_flag() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_reg_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server_base.SERVICE_INFO_SINGLE)
  return target;
}

size_t SERVICE_INFO_SINGLE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server_base.SERVICE_INFO_SINGLE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 svrid = 1;
  if (this->svrid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_svrid());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int64 reg_flag = 3;
  if (this->reg_flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_reg_flag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SERVICE_INFO_SINGLE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server_base.SERVICE_INFO_SINGLE)
  GOOGLE_DCHECK_NE(&from, this);
  const SERVICE_INFO_SINGLE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SERVICE_INFO_SINGLE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server_base.SERVICE_INFO_SINGLE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server_base.SERVICE_INFO_SINGLE)
    MergeFrom(*source);
  }
}

void SERVICE_INFO_SINGLE::MergeFrom(const SERVICE_INFO_SINGLE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server_base.SERVICE_INFO_SINGLE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.svrid() != 0) {
    _internal_set_svrid(from._internal_svrid());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.reg_flag() != 0) {
    _internal_set_reg_flag(from._internal_reg_flag());
  }
}

void SERVICE_INFO_SINGLE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server_base.SERVICE_INFO_SINGLE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SERVICE_INFO_SINGLE::CopyFrom(const SERVICE_INFO_SINGLE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server_base.SERVICE_INFO_SINGLE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SERVICE_INFO_SINGLE::IsInitialized() const {
  return true;
}

void SERVICE_INFO_SINGLE::InternalSwap(SERVICE_INFO_SINGLE* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(svrid_, other->svrid_);
  swap(type_, other->type_);
  swap(reg_flag_, other->reg_flag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SERVICE_INFO_SINGLE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_HEARTBEAT::InitAsDefaultInstance() {
}
class MSG_HEARTBEAT::_Internal {
 public:
};

MSG_HEARTBEAT::MSG_HEARTBEAT()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:server_base.MSG_HEARTBEAT)
}
MSG_HEARTBEAT::MSG_HEARTBEAT(const MSG_HEARTBEAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:server_base.MSG_HEARTBEAT)
}

void MSG_HEARTBEAT::SharedCtor() {
}

MSG_HEARTBEAT::~MSG_HEARTBEAT() {
  // @@protoc_insertion_point(destructor:server_base.MSG_HEARTBEAT)
  SharedDtor();
}

void MSG_HEARTBEAT::SharedDtor() {
}

void MSG_HEARTBEAT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_HEARTBEAT& MSG_HEARTBEAT::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_HEARTBEAT_server_5fbase_2eproto.base);
  return *internal_default_instance();
}


void MSG_HEARTBEAT::Clear() {
// @@protoc_insertion_point(message_clear_start:server_base.MSG_HEARTBEAT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* MSG_HEARTBEAT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_HEARTBEAT::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server_base.MSG_HEARTBEAT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server_base.MSG_HEARTBEAT)
  return target;
}

size_t MSG_HEARTBEAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server_base.MSG_HEARTBEAT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_HEARTBEAT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server_base.MSG_HEARTBEAT)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_HEARTBEAT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_HEARTBEAT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server_base.MSG_HEARTBEAT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server_base.MSG_HEARTBEAT)
    MergeFrom(*source);
  }
}

void MSG_HEARTBEAT::MergeFrom(const MSG_HEARTBEAT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server_base.MSG_HEARTBEAT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_HEARTBEAT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server_base.MSG_HEARTBEAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_HEARTBEAT::CopyFrom(const MSG_HEARTBEAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server_base.MSG_HEARTBEAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_HEARTBEAT::IsInitialized() const {
  return true;
}

void MSG_HEARTBEAT::InternalSwap(MSG_HEARTBEAT* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_HEARTBEAT::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_HEARTBEAT_RES::InitAsDefaultInstance() {
}
class MSG_HEARTBEAT_RES::_Internal {
 public:
};

MSG_HEARTBEAT_RES::MSG_HEARTBEAT_RES()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:server_base.MSG_HEARTBEAT_RES)
}
MSG_HEARTBEAT_RES::MSG_HEARTBEAT_RES(const MSG_HEARTBEAT_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:server_base.MSG_HEARTBEAT_RES)
}

void MSG_HEARTBEAT_RES::SharedCtor() {
}

MSG_HEARTBEAT_RES::~MSG_HEARTBEAT_RES() {
  // @@protoc_insertion_point(destructor:server_base.MSG_HEARTBEAT_RES)
  SharedDtor();
}

void MSG_HEARTBEAT_RES::SharedDtor() {
}

void MSG_HEARTBEAT_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_HEARTBEAT_RES& MSG_HEARTBEAT_RES::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_HEARTBEAT_RES_server_5fbase_2eproto.base);
  return *internal_default_instance();
}


void MSG_HEARTBEAT_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:server_base.MSG_HEARTBEAT_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* MSG_HEARTBEAT_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_HEARTBEAT_RES::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server_base.MSG_HEARTBEAT_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server_base.MSG_HEARTBEAT_RES)
  return target;
}

size_t MSG_HEARTBEAT_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server_base.MSG_HEARTBEAT_RES)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_HEARTBEAT_RES::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server_base.MSG_HEARTBEAT_RES)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_HEARTBEAT_RES* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_HEARTBEAT_RES>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server_base.MSG_HEARTBEAT_RES)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server_base.MSG_HEARTBEAT_RES)
    MergeFrom(*source);
  }
}

void MSG_HEARTBEAT_RES::MergeFrom(const MSG_HEARTBEAT_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server_base.MSG_HEARTBEAT_RES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_HEARTBEAT_RES::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server_base.MSG_HEARTBEAT_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_HEARTBEAT_RES::CopyFrom(const MSG_HEARTBEAT_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server_base.MSG_HEARTBEAT_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_HEARTBEAT_RES::IsInitialized() const {
  return true;
}

void MSG_HEARTBEAT_RES::InternalSwap(MSG_HEARTBEAT_RES* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_HEARTBEAT_RES::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_LEADER_REG::InitAsDefaultInstance() {
}
class MSG_LEADER_REG::_Internal {
 public:
};

MSG_LEADER_REG::MSG_LEADER_REG()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:server_base.MSG_LEADER_REG)
}
MSG_LEADER_REG::MSG_LEADER_REG(const MSG_LEADER_REG& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  svrid_ = from.svrid_;
  // @@protoc_insertion_point(copy_constructor:server_base.MSG_LEADER_REG)
}

void MSG_LEADER_REG::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_LEADER_REG_server_5fbase_2eproto.base);
  svrid_ = 0;
}

MSG_LEADER_REG::~MSG_LEADER_REG() {
  // @@protoc_insertion_point(destructor:server_base.MSG_LEADER_REG)
  SharedDtor();
}

void MSG_LEADER_REG::SharedDtor() {
}

void MSG_LEADER_REG::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_LEADER_REG& MSG_LEADER_REG::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_LEADER_REG_server_5fbase_2eproto.base);
  return *internal_default_instance();
}


void MSG_LEADER_REG::Clear() {
// @@protoc_insertion_point(message_clear_start:server_base.MSG_LEADER_REG)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  svrid_ = 0;
  _internal_metadata_.Clear();
}

const char* MSG_LEADER_REG::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .server_base.SERVICE_INFO infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 svrid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          svrid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_LEADER_REG::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server_base.MSG_LEADER_REG)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .server_base.SERVICE_INFO infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infos_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_infos(i), target, stream);
  }

  // int32 svrid = 2;
  if (this->svrid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_svrid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server_base.MSG_LEADER_REG)
  return target;
}

size_t MSG_LEADER_REG::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server_base.MSG_LEADER_REG)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .server_base.SERVICE_INFO infos = 1;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 svrid = 2;
  if (this->svrid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_svrid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_LEADER_REG::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server_base.MSG_LEADER_REG)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_LEADER_REG* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_LEADER_REG>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server_base.MSG_LEADER_REG)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server_base.MSG_LEADER_REG)
    MergeFrom(*source);
  }
}

void MSG_LEADER_REG::MergeFrom(const MSG_LEADER_REG& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server_base.MSG_LEADER_REG)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
  if (from.svrid() != 0) {
    _internal_set_svrid(from._internal_svrid());
  }
}

void MSG_LEADER_REG::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server_base.MSG_LEADER_REG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_LEADER_REG::CopyFrom(const MSG_LEADER_REG& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server_base.MSG_LEADER_REG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_LEADER_REG::IsInitialized() const {
  return true;
}

void MSG_LEADER_REG::InternalSwap(MSG_LEADER_REG* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  infos_.InternalSwap(&other->infos_);
  swap(svrid_, other->svrid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_LEADER_REG::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_LEADER_SERVER_LIST::InitAsDefaultInstance() {
}
class MSG_LEADER_SERVER_LIST::_Internal {
 public:
};

MSG_LEADER_SERVER_LIST::MSG_LEADER_SERVER_LIST()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:server_base.MSG_LEADER_SERVER_LIST)
}
MSG_LEADER_SERVER_LIST::MSG_LEADER_SERVER_LIST(const MSG_LEADER_SERVER_LIST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:server_base.MSG_LEADER_SERVER_LIST)
}

void MSG_LEADER_SERVER_LIST::SharedCtor() {
}

MSG_LEADER_SERVER_LIST::~MSG_LEADER_SERVER_LIST() {
  // @@protoc_insertion_point(destructor:server_base.MSG_LEADER_SERVER_LIST)
  SharedDtor();
}

void MSG_LEADER_SERVER_LIST::SharedDtor() {
}

void MSG_LEADER_SERVER_LIST::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_LEADER_SERVER_LIST& MSG_LEADER_SERVER_LIST::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_LEADER_SERVER_LIST_server_5fbase_2eproto.base);
  return *internal_default_instance();
}


void MSG_LEADER_SERVER_LIST::Clear() {
// @@protoc_insertion_point(message_clear_start:server_base.MSG_LEADER_SERVER_LIST)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* MSG_LEADER_SERVER_LIST::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_LEADER_SERVER_LIST::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server_base.MSG_LEADER_SERVER_LIST)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server_base.MSG_LEADER_SERVER_LIST)
  return target;
}

size_t MSG_LEADER_SERVER_LIST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server_base.MSG_LEADER_SERVER_LIST)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_LEADER_SERVER_LIST::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server_base.MSG_LEADER_SERVER_LIST)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_LEADER_SERVER_LIST* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_LEADER_SERVER_LIST>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server_base.MSG_LEADER_SERVER_LIST)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server_base.MSG_LEADER_SERVER_LIST)
    MergeFrom(*source);
  }
}

void MSG_LEADER_SERVER_LIST::MergeFrom(const MSG_LEADER_SERVER_LIST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server_base.MSG_LEADER_SERVER_LIST)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_LEADER_SERVER_LIST::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server_base.MSG_LEADER_SERVER_LIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_LEADER_SERVER_LIST::CopyFrom(const MSG_LEADER_SERVER_LIST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server_base.MSG_LEADER_SERVER_LIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_LEADER_SERVER_LIST::IsInitialized() const {
  return true;
}

void MSG_LEADER_SERVER_LIST::InternalSwap(MSG_LEADER_SERVER_LIST* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_LEADER_SERVER_LIST::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_LEADER_BROADCAST_ADD::InitAsDefaultInstance() {
}
class MSG_LEADER_BROADCAST_ADD::_Internal {
 public:
};

MSG_LEADER_BROADCAST_ADD::MSG_LEADER_BROADCAST_ADD()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:server_base.MSG_LEADER_BROADCAST_ADD)
}
MSG_LEADER_BROADCAST_ADD::MSG_LEADER_BROADCAST_ADD(const MSG_LEADER_BROADCAST_ADD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  svrid_ = from.svrid_;
  // @@protoc_insertion_point(copy_constructor:server_base.MSG_LEADER_BROADCAST_ADD)
}

void MSG_LEADER_BROADCAST_ADD::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_LEADER_BROADCAST_ADD_server_5fbase_2eproto.base);
  svrid_ = 0;
}

MSG_LEADER_BROADCAST_ADD::~MSG_LEADER_BROADCAST_ADD() {
  // @@protoc_insertion_point(destructor:server_base.MSG_LEADER_BROADCAST_ADD)
  SharedDtor();
}

void MSG_LEADER_BROADCAST_ADD::SharedDtor() {
}

void MSG_LEADER_BROADCAST_ADD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_LEADER_BROADCAST_ADD& MSG_LEADER_BROADCAST_ADD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_LEADER_BROADCAST_ADD_server_5fbase_2eproto.base);
  return *internal_default_instance();
}


void MSG_LEADER_BROADCAST_ADD::Clear() {
// @@protoc_insertion_point(message_clear_start:server_base.MSG_LEADER_BROADCAST_ADD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  svrid_ = 0;
  _internal_metadata_.Clear();
}

const char* MSG_LEADER_BROADCAST_ADD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .server_base.SERVICE_INFO infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 svrid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          svrid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_LEADER_BROADCAST_ADD::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server_base.MSG_LEADER_BROADCAST_ADD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .server_base.SERVICE_INFO infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infos_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_infos(i), target, stream);
  }

  // int32 svrid = 2;
  if (this->svrid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_svrid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server_base.MSG_LEADER_BROADCAST_ADD)
  return target;
}

size_t MSG_LEADER_BROADCAST_ADD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server_base.MSG_LEADER_BROADCAST_ADD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .server_base.SERVICE_INFO infos = 1;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 svrid = 2;
  if (this->svrid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_svrid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_LEADER_BROADCAST_ADD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server_base.MSG_LEADER_BROADCAST_ADD)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_LEADER_BROADCAST_ADD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_LEADER_BROADCAST_ADD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server_base.MSG_LEADER_BROADCAST_ADD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server_base.MSG_LEADER_BROADCAST_ADD)
    MergeFrom(*source);
  }
}

void MSG_LEADER_BROADCAST_ADD::MergeFrom(const MSG_LEADER_BROADCAST_ADD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server_base.MSG_LEADER_BROADCAST_ADD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
  if (from.svrid() != 0) {
    _internal_set_svrid(from._internal_svrid());
  }
}

void MSG_LEADER_BROADCAST_ADD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server_base.MSG_LEADER_BROADCAST_ADD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_LEADER_BROADCAST_ADD::CopyFrom(const MSG_LEADER_BROADCAST_ADD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server_base.MSG_LEADER_BROADCAST_ADD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_LEADER_BROADCAST_ADD::IsInitialized() const {
  return true;
}

void MSG_LEADER_BROADCAST_ADD::InternalSwap(MSG_LEADER_BROADCAST_ADD* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  infos_.InternalSwap(&other->infos_);
  swap(svrid_, other->svrid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_LEADER_BROADCAST_ADD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_LEADER_BROADCAST_REMOVE::InitAsDefaultInstance() {
}
class MSG_LEADER_BROADCAST_REMOVE::_Internal {
 public:
};

MSG_LEADER_BROADCAST_REMOVE::MSG_LEADER_BROADCAST_REMOVE()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:server_base.MSG_LEADER_BROADCAST_REMOVE)
}
MSG_LEADER_BROADCAST_REMOVE::MSG_LEADER_BROADCAST_REMOVE(const MSG_LEADER_BROADCAST_REMOVE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  svrid_ = from.svrid_;
  // @@protoc_insertion_point(copy_constructor:server_base.MSG_LEADER_BROADCAST_REMOVE)
}

void MSG_LEADER_BROADCAST_REMOVE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_LEADER_BROADCAST_REMOVE_server_5fbase_2eproto.base);
  svrid_ = 0;
}

MSG_LEADER_BROADCAST_REMOVE::~MSG_LEADER_BROADCAST_REMOVE() {
  // @@protoc_insertion_point(destructor:server_base.MSG_LEADER_BROADCAST_REMOVE)
  SharedDtor();
}

void MSG_LEADER_BROADCAST_REMOVE::SharedDtor() {
}

void MSG_LEADER_BROADCAST_REMOVE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_LEADER_BROADCAST_REMOVE& MSG_LEADER_BROADCAST_REMOVE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_LEADER_BROADCAST_REMOVE_server_5fbase_2eproto.base);
  return *internal_default_instance();
}


void MSG_LEADER_BROADCAST_REMOVE::Clear() {
// @@protoc_insertion_point(message_clear_start:server_base.MSG_LEADER_BROADCAST_REMOVE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  svrid_ = 0;
  _internal_metadata_.Clear();
}

const char* MSG_LEADER_BROADCAST_REMOVE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .server_base.SERVICE_INFO infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 svrid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          svrid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_LEADER_BROADCAST_REMOVE::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server_base.MSG_LEADER_BROADCAST_REMOVE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .server_base.SERVICE_INFO infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infos_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_infos(i), target, stream);
  }

  // int32 svrid = 2;
  if (this->svrid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_svrid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server_base.MSG_LEADER_BROADCAST_REMOVE)
  return target;
}

size_t MSG_LEADER_BROADCAST_REMOVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server_base.MSG_LEADER_BROADCAST_REMOVE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .server_base.SERVICE_INFO infos = 1;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 svrid = 2;
  if (this->svrid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_svrid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_LEADER_BROADCAST_REMOVE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server_base.MSG_LEADER_BROADCAST_REMOVE)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_LEADER_BROADCAST_REMOVE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_LEADER_BROADCAST_REMOVE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server_base.MSG_LEADER_BROADCAST_REMOVE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server_base.MSG_LEADER_BROADCAST_REMOVE)
    MergeFrom(*source);
  }
}

void MSG_LEADER_BROADCAST_REMOVE::MergeFrom(const MSG_LEADER_BROADCAST_REMOVE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server_base.MSG_LEADER_BROADCAST_REMOVE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
  if (from.svrid() != 0) {
    _internal_set_svrid(from._internal_svrid());
  }
}

void MSG_LEADER_BROADCAST_REMOVE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server_base.MSG_LEADER_BROADCAST_REMOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_LEADER_BROADCAST_REMOVE::CopyFrom(const MSG_LEADER_BROADCAST_REMOVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server_base.MSG_LEADER_BROADCAST_REMOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_LEADER_BROADCAST_REMOVE::IsInitialized() const {
  return true;
}

void MSG_LEADER_BROADCAST_REMOVE::InternalSwap(MSG_LEADER_BROADCAST_REMOVE* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  infos_.InternalSwap(&other->infos_);
  swap(svrid_, other->svrid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_LEADER_BROADCAST_REMOVE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_LEADER_REG_RES::InitAsDefaultInstance() {
}
class MSG_LEADER_REG_RES::_Internal {
 public:
};

MSG_LEADER_REG_RES::MSG_LEADER_REG_RES()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:server_base.MSG_LEADER_REG_RES)
}
MSG_LEADER_REG_RES::MSG_LEADER_REG_RES(const MSG_LEADER_REG_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:server_base.MSG_LEADER_REG_RES)
}

void MSG_LEADER_REG_RES::SharedCtor() {
  result_ = 0;
}

MSG_LEADER_REG_RES::~MSG_LEADER_REG_RES() {
  // @@protoc_insertion_point(destructor:server_base.MSG_LEADER_REG_RES)
  SharedDtor();
}

void MSG_LEADER_REG_RES::SharedDtor() {
}

void MSG_LEADER_REG_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_LEADER_REG_RES& MSG_LEADER_REG_RES::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_LEADER_REG_RES_server_5fbase_2eproto.base);
  return *internal_default_instance();
}


void MSG_LEADER_REG_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:server_base.MSG_LEADER_REG_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _internal_metadata_.Clear();
}

const char* MSG_LEADER_REG_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_LEADER_REG_RES::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server_base.MSG_LEADER_REG_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server_base.MSG_LEADER_REG_RES)
  return target;
}

size_t MSG_LEADER_REG_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server_base.MSG_LEADER_REG_RES)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_LEADER_REG_RES::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server_base.MSG_LEADER_REG_RES)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_LEADER_REG_RES* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_LEADER_REG_RES>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server_base.MSG_LEADER_REG_RES)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server_base.MSG_LEADER_REG_RES)
    MergeFrom(*source);
  }
}

void MSG_LEADER_REG_RES::MergeFrom(const MSG_LEADER_REG_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server_base.MSG_LEADER_REG_RES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void MSG_LEADER_REG_RES::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server_base.MSG_LEADER_REG_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_LEADER_REG_RES::CopyFrom(const MSG_LEADER_REG_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server_base.MSG_LEADER_REG_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_LEADER_REG_RES::IsInitialized() const {
  return true;
}

void MSG_LEADER_REG_RES::InternalSwap(MSG_LEADER_REG_RES* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_LEADER_REG_RES::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_LEADER_SERVER_LIST_RES::InitAsDefaultInstance() {
}
class MSG_LEADER_SERVER_LIST_RES::_Internal {
 public:
};

MSG_LEADER_SERVER_LIST_RES::MSG_LEADER_SERVER_LIST_RES()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:server_base.MSG_LEADER_SERVER_LIST_RES)
}
MSG_LEADER_SERVER_LIST_RES::MSG_LEADER_SERVER_LIST_RES(const MSG_LEADER_SERVER_LIST_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:server_base.MSG_LEADER_SERVER_LIST_RES)
}

void MSG_LEADER_SERVER_LIST_RES::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_LEADER_SERVER_LIST_RES_server_5fbase_2eproto.base);
}

MSG_LEADER_SERVER_LIST_RES::~MSG_LEADER_SERVER_LIST_RES() {
  // @@protoc_insertion_point(destructor:server_base.MSG_LEADER_SERVER_LIST_RES)
  SharedDtor();
}

void MSG_LEADER_SERVER_LIST_RES::SharedDtor() {
}

void MSG_LEADER_SERVER_LIST_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_LEADER_SERVER_LIST_RES& MSG_LEADER_SERVER_LIST_RES::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_LEADER_SERVER_LIST_RES_server_5fbase_2eproto.base);
  return *internal_default_instance();
}


void MSG_LEADER_SERVER_LIST_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:server_base.MSG_LEADER_SERVER_LIST_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_LEADER_SERVER_LIST_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .server_base.SERVICE_INFO infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_LEADER_SERVER_LIST_RES::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server_base.MSG_LEADER_SERVER_LIST_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .server_base.SERVICE_INFO infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infos_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server_base.MSG_LEADER_SERVER_LIST_RES)
  return target;
}

size_t MSG_LEADER_SERVER_LIST_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server_base.MSG_LEADER_SERVER_LIST_RES)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .server_base.SERVICE_INFO infos = 1;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_LEADER_SERVER_LIST_RES::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server_base.MSG_LEADER_SERVER_LIST_RES)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_LEADER_SERVER_LIST_RES* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_LEADER_SERVER_LIST_RES>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server_base.MSG_LEADER_SERVER_LIST_RES)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server_base.MSG_LEADER_SERVER_LIST_RES)
    MergeFrom(*source);
  }
}

void MSG_LEADER_SERVER_LIST_RES::MergeFrom(const MSG_LEADER_SERVER_LIST_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server_base.MSG_LEADER_SERVER_LIST_RES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
}

void MSG_LEADER_SERVER_LIST_RES::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server_base.MSG_LEADER_SERVER_LIST_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_LEADER_SERVER_LIST_RES::CopyFrom(const MSG_LEADER_SERVER_LIST_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server_base.MSG_LEADER_SERVER_LIST_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_LEADER_SERVER_LIST_RES::IsInitialized() const {
  return true;
}

void MSG_LEADER_SERVER_LIST_RES::InternalSwap(MSG_LEADER_SERVER_LIST_RES* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  infos_.InternalSwap(&other->infos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_LEADER_SERVER_LIST_RES::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_SVR_REG::InitAsDefaultInstance() {
}
class MSG_SVR_REG::_Internal {
 public:
};

MSG_SVR_REG::MSG_SVR_REG()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:server_base.MSG_SVR_REG)
}
MSG_SVR_REG::MSG_SVR_REG(const MSG_SVR_REG& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:server_base.MSG_SVR_REG)
}

void MSG_SVR_REG::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_SVR_REG_server_5fbase_2eproto.base);
}

MSG_SVR_REG::~MSG_SVR_REG() {
  // @@protoc_insertion_point(destructor:server_base.MSG_SVR_REG)
  SharedDtor();
}

void MSG_SVR_REG::SharedDtor() {
}

void MSG_SVR_REG::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_SVR_REG& MSG_SVR_REG::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_SVR_REG_server_5fbase_2eproto.base);
  return *internal_default_instance();
}


void MSG_SVR_REG::Clear() {
// @@protoc_insertion_point(message_clear_start:server_base.MSG_SVR_REG)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_SVR_REG::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .server_base.SERVICE_INFO_SINGLE infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_SVR_REG::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server_base.MSG_SVR_REG)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .server_base.SERVICE_INFO_SINGLE infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infos_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server_base.MSG_SVR_REG)
  return target;
}

size_t MSG_SVR_REG::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server_base.MSG_SVR_REG)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .server_base.SERVICE_INFO_SINGLE infos = 1;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_SVR_REG::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server_base.MSG_SVR_REG)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_SVR_REG* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_SVR_REG>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server_base.MSG_SVR_REG)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server_base.MSG_SVR_REG)
    MergeFrom(*source);
  }
}

void MSG_SVR_REG::MergeFrom(const MSG_SVR_REG& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server_base.MSG_SVR_REG)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
}

void MSG_SVR_REG::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server_base.MSG_SVR_REG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_SVR_REG::CopyFrom(const MSG_SVR_REG& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server_base.MSG_SVR_REG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_SVR_REG::IsInitialized() const {
  return true;
}

void MSG_SVR_REG::InternalSwap(MSG_SVR_REG* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  infos_.InternalSwap(&other->infos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_SVR_REG::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_SVR_REG_RES::InitAsDefaultInstance() {
}
class MSG_SVR_REG_RES::_Internal {
 public:
};

MSG_SVR_REG_RES::MSG_SVR_REG_RES()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:server_base.MSG_SVR_REG_RES)
}
MSG_SVR_REG_RES::MSG_SVR_REG_RES(const MSG_SVR_REG_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:server_base.MSG_SVR_REG_RES)
}

void MSG_SVR_REG_RES::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_SVR_REG_RES_server_5fbase_2eproto.base);
}

MSG_SVR_REG_RES::~MSG_SVR_REG_RES() {
  // @@protoc_insertion_point(destructor:server_base.MSG_SVR_REG_RES)
  SharedDtor();
}

void MSG_SVR_REG_RES::SharedDtor() {
}

void MSG_SVR_REG_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_SVR_REG_RES& MSG_SVR_REG_RES::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_SVR_REG_RES_server_5fbase_2eproto.base);
  return *internal_default_instance();
}


void MSG_SVR_REG_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:server_base.MSG_SVR_REG_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_SVR_REG_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .server_base.SERVICE_INFO_SINGLE infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_SVR_REG_RES::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server_base.MSG_SVR_REG_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .server_base.SERVICE_INFO_SINGLE infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infos_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server_base.MSG_SVR_REG_RES)
  return target;
}

size_t MSG_SVR_REG_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server_base.MSG_SVR_REG_RES)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .server_base.SERVICE_INFO_SINGLE infos = 1;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_SVR_REG_RES::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server_base.MSG_SVR_REG_RES)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_SVR_REG_RES* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_SVR_REG_RES>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server_base.MSG_SVR_REG_RES)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server_base.MSG_SVR_REG_RES)
    MergeFrom(*source);
  }
}

void MSG_SVR_REG_RES::MergeFrom(const MSG_SVR_REG_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server_base.MSG_SVR_REG_RES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
}

void MSG_SVR_REG_RES::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server_base.MSG_SVR_REG_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_SVR_REG_RES::CopyFrom(const MSG_SVR_REG_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server_base.MSG_SVR_REG_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_SVR_REG_RES::IsInitialized() const {
  return true;
}

void MSG_SVR_REG_RES::InternalSwap(MSG_SVR_REG_RES* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  infos_.InternalSwap(&other->infos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_SVR_REG_RES::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_SVR_BASE::InitAsDefaultInstance() {
  ::server_base::_MSG_SVR_BASE_default_instance_.msg_leader_reg_ = const_cast< ::server_base::MSG_LEADER_REG*>(
      ::server_base::MSG_LEADER_REG::internal_default_instance());
  ::server_base::_MSG_SVR_BASE_default_instance_.msg_leader_server_list_ = const_cast< ::server_base::MSG_LEADER_SERVER_LIST*>(
      ::server_base::MSG_LEADER_SERVER_LIST::internal_default_instance());
  ::server_base::_MSG_SVR_BASE_default_instance_.msg_leader_reg_res_ = const_cast< ::server_base::MSG_LEADER_REG_RES*>(
      ::server_base::MSG_LEADER_REG_RES::internal_default_instance());
  ::server_base::_MSG_SVR_BASE_default_instance_.msg_leader_server_list_res_ = const_cast< ::server_base::MSG_LEADER_SERVER_LIST_RES*>(
      ::server_base::MSG_LEADER_SERVER_LIST_RES::internal_default_instance());
  ::server_base::_MSG_SVR_BASE_default_instance_.msg_leader_broadcast_add_ = const_cast< ::server_base::MSG_LEADER_BROADCAST_ADD*>(
      ::server_base::MSG_LEADER_BROADCAST_ADD::internal_default_instance());
  ::server_base::_MSG_SVR_BASE_default_instance_.msg_leader_broadcast_remove_ = const_cast< ::server_base::MSG_LEADER_BROADCAST_REMOVE*>(
      ::server_base::MSG_LEADER_BROADCAST_REMOVE::internal_default_instance());
  ::server_base::_MSG_SVR_BASE_default_instance_.msg_svr_reg_ = const_cast< ::server_base::MSG_SVR_REG_RES*>(
      ::server_base::MSG_SVR_REG_RES::internal_default_instance());
  ::server_base::_MSG_SVR_BASE_default_instance_.msg_svr_reg_res_ = const_cast< ::server_base::MSG_SVR_REG_RES*>(
      ::server_base::MSG_SVR_REG_RES::internal_default_instance());
  ::server_base::_MSG_SVR_BASE_default_instance_.msg_heartbeat_ = const_cast< ::server_base::MSG_HEARTBEAT*>(
      ::server_base::MSG_HEARTBEAT::internal_default_instance());
  ::server_base::_MSG_SVR_BASE_default_instance_.msg_heartbeat_res_ = const_cast< ::server_base::MSG_HEARTBEAT*>(
      ::server_base::MSG_HEARTBEAT::internal_default_instance());
  ::server_base::_MSG_SVR_BASE_default_instance_.msg_test_ = const_cast< ::server_base::MSG_TEST*>(
      ::server_base::MSG_TEST::internal_default_instance());
  ::server_base::_MSG_SVR_BASE_default_instance_.msg_test_res_ = const_cast< ::server_base::MSG_TEST_RES*>(
      ::server_base::MSG_TEST_RES::internal_default_instance());
}
class MSG_SVR_BASE::_Internal {
 public:
  static const ::server_base::MSG_LEADER_REG& msg_leader_reg(const MSG_SVR_BASE* msg);
  static const ::server_base::MSG_LEADER_SERVER_LIST& msg_leader_server_list(const MSG_SVR_BASE* msg);
  static const ::server_base::MSG_LEADER_REG_RES& msg_leader_reg_res(const MSG_SVR_BASE* msg);
  static const ::server_base::MSG_LEADER_SERVER_LIST_RES& msg_leader_server_list_res(const MSG_SVR_BASE* msg);
  static const ::server_base::MSG_LEADER_BROADCAST_ADD& msg_leader_broadcast_add(const MSG_SVR_BASE* msg);
  static const ::server_base::MSG_LEADER_BROADCAST_REMOVE& msg_leader_broadcast_remove(const MSG_SVR_BASE* msg);
  static const ::server_base::MSG_SVR_REG_RES& msg_svr_reg(const MSG_SVR_BASE* msg);
  static const ::server_base::MSG_SVR_REG_RES& msg_svr_reg_res(const MSG_SVR_BASE* msg);
  static const ::server_base::MSG_HEARTBEAT& msg_heartbeat(const MSG_SVR_BASE* msg);
  static const ::server_base::MSG_HEARTBEAT& msg_heartbeat_res(const MSG_SVR_BASE* msg);
  static const ::server_base::MSG_TEST& msg_test(const MSG_SVR_BASE* msg);
  static const ::server_base::MSG_TEST_RES& msg_test_res(const MSG_SVR_BASE* msg);
};

const ::server_base::MSG_LEADER_REG&
MSG_SVR_BASE::_Internal::msg_leader_reg(const MSG_SVR_BASE* msg) {
  return *msg->msg_.msg_leader_reg_;
}
const ::server_base::MSG_LEADER_SERVER_LIST&
MSG_SVR_BASE::_Internal::msg_leader_server_list(const MSG_SVR_BASE* msg) {
  return *msg->msg_.msg_leader_server_list_;
}
const ::server_base::MSG_LEADER_REG_RES&
MSG_SVR_BASE::_Internal::msg_leader_reg_res(const MSG_SVR_BASE* msg) {
  return *msg->msg_.msg_leader_reg_res_;
}
const ::server_base::MSG_LEADER_SERVER_LIST_RES&
MSG_SVR_BASE::_Internal::msg_leader_server_list_res(const MSG_SVR_BASE* msg) {
  return *msg->msg_.msg_leader_server_list_res_;
}
const ::server_base::MSG_LEADER_BROADCAST_ADD&
MSG_SVR_BASE::_Internal::msg_leader_broadcast_add(const MSG_SVR_BASE* msg) {
  return *msg->msg_.msg_leader_broadcast_add_;
}
const ::server_base::MSG_LEADER_BROADCAST_REMOVE&
MSG_SVR_BASE::_Internal::msg_leader_broadcast_remove(const MSG_SVR_BASE* msg) {
  return *msg->msg_.msg_leader_broadcast_remove_;
}
const ::server_base::MSG_SVR_REG_RES&
MSG_SVR_BASE::_Internal::msg_svr_reg(const MSG_SVR_BASE* msg) {
  return *msg->msg_.msg_svr_reg_;
}
const ::server_base::MSG_SVR_REG_RES&
MSG_SVR_BASE::_Internal::msg_svr_reg_res(const MSG_SVR_BASE* msg) {
  return *msg->msg_.msg_svr_reg_res_;
}
const ::server_base::MSG_HEARTBEAT&
MSG_SVR_BASE::_Internal::msg_heartbeat(const MSG_SVR_BASE* msg) {
  return *msg->msg_.msg_heartbeat_;
}
const ::server_base::MSG_HEARTBEAT&
MSG_SVR_BASE::_Internal::msg_heartbeat_res(const MSG_SVR_BASE* msg) {
  return *msg->msg_.msg_heartbeat_res_;
}
const ::server_base::MSG_TEST&
MSG_SVR_BASE::_Internal::msg_test(const MSG_SVR_BASE* msg) {
  return *msg->msg_.msg_test_;
}
const ::server_base::MSG_TEST_RES&
MSG_SVR_BASE::_Internal::msg_test_res(const MSG_SVR_BASE* msg) {
  return *msg->msg_.msg_test_res_;
}
void MSG_SVR_BASE::set_allocated_msg_leader_reg(::server_base::MSG_LEADER_REG* msg_leader_reg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (msg_leader_reg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_leader_reg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_leader_reg, submessage_arena);
    }
    set_has_msg_leader_reg();
    msg_.msg_leader_reg_ = msg_leader_reg;
  }
  // @@protoc_insertion_point(field_set_allocated:server_base.MSG_SVR_BASE.MSG_LEADER_REG)
}
void MSG_SVR_BASE::set_allocated_msg_leader_server_list(::server_base::MSG_LEADER_SERVER_LIST* msg_leader_server_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (msg_leader_server_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_leader_server_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_leader_server_list, submessage_arena);
    }
    set_has_msg_leader_server_list();
    msg_.msg_leader_server_list_ = msg_leader_server_list;
  }
  // @@protoc_insertion_point(field_set_allocated:server_base.MSG_SVR_BASE.MSG_LEADER_SERVER_LIST)
}
void MSG_SVR_BASE::set_allocated_msg_leader_reg_res(::server_base::MSG_LEADER_REG_RES* msg_leader_reg_res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (msg_leader_reg_res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_leader_reg_res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_leader_reg_res, submessage_arena);
    }
    set_has_msg_leader_reg_res();
    msg_.msg_leader_reg_res_ = msg_leader_reg_res;
  }
  // @@protoc_insertion_point(field_set_allocated:server_base.MSG_SVR_BASE.MSG_LEADER_REG_RES)
}
void MSG_SVR_BASE::set_allocated_msg_leader_server_list_res(::server_base::MSG_LEADER_SERVER_LIST_RES* msg_leader_server_list_res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (msg_leader_server_list_res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_leader_server_list_res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_leader_server_list_res, submessage_arena);
    }
    set_has_msg_leader_server_list_res();
    msg_.msg_leader_server_list_res_ = msg_leader_server_list_res;
  }
  // @@protoc_insertion_point(field_set_allocated:server_base.MSG_SVR_BASE.MSG_LEADER_SERVER_LIST_RES)
}
void MSG_SVR_BASE::set_allocated_msg_leader_broadcast_add(::server_base::MSG_LEADER_BROADCAST_ADD* msg_leader_broadcast_add) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (msg_leader_broadcast_add) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_leader_broadcast_add = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_leader_broadcast_add, submessage_arena);
    }
    set_has_msg_leader_broadcast_add();
    msg_.msg_leader_broadcast_add_ = msg_leader_broadcast_add;
  }
  // @@protoc_insertion_point(field_set_allocated:server_base.MSG_SVR_BASE.MSG_LEADER_BROADCAST_ADD)
}
void MSG_SVR_BASE::set_allocated_msg_leader_broadcast_remove(::server_base::MSG_LEADER_BROADCAST_REMOVE* msg_leader_broadcast_remove) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (msg_leader_broadcast_remove) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_leader_broadcast_remove = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_leader_broadcast_remove, submessage_arena);
    }
    set_has_msg_leader_broadcast_remove();
    msg_.msg_leader_broadcast_remove_ = msg_leader_broadcast_remove;
  }
  // @@protoc_insertion_point(field_set_allocated:server_base.MSG_SVR_BASE.MSG_LEADER_BROADCAST_REMOVE)
}
void MSG_SVR_BASE::set_allocated_msg_svr_reg(::server_base::MSG_SVR_REG_RES* msg_svr_reg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (msg_svr_reg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_svr_reg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_svr_reg, submessage_arena);
    }
    set_has_msg_svr_reg();
    msg_.msg_svr_reg_ = msg_svr_reg;
  }
  // @@protoc_insertion_point(field_set_allocated:server_base.MSG_SVR_BASE.MSG_SVR_REG)
}
void MSG_SVR_BASE::set_allocated_msg_svr_reg_res(::server_base::MSG_SVR_REG_RES* msg_svr_reg_res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (msg_svr_reg_res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_svr_reg_res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_svr_reg_res, submessage_arena);
    }
    set_has_msg_svr_reg_res();
    msg_.msg_svr_reg_res_ = msg_svr_reg_res;
  }
  // @@protoc_insertion_point(field_set_allocated:server_base.MSG_SVR_BASE.MSG_SVR_REG_RES)
}
void MSG_SVR_BASE::set_allocated_msg_heartbeat(::server_base::MSG_HEARTBEAT* msg_heartbeat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (msg_heartbeat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_heartbeat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_heartbeat, submessage_arena);
    }
    set_has_msg_heartbeat();
    msg_.msg_heartbeat_ = msg_heartbeat;
  }
  // @@protoc_insertion_point(field_set_allocated:server_base.MSG_SVR_BASE.MSG_HEARTBEAT)
}
void MSG_SVR_BASE::set_allocated_msg_heartbeat_res(::server_base::MSG_HEARTBEAT* msg_heartbeat_res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (msg_heartbeat_res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_heartbeat_res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_heartbeat_res, submessage_arena);
    }
    set_has_msg_heartbeat_res();
    msg_.msg_heartbeat_res_ = msg_heartbeat_res;
  }
  // @@protoc_insertion_point(field_set_allocated:server_base.MSG_SVR_BASE.MSG_HEARTBEAT_RES)
}
void MSG_SVR_BASE::set_allocated_msg_test(::server_base::MSG_TEST* msg_test) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (msg_test) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_test = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_test, submessage_arena);
    }
    set_has_msg_test();
    msg_.msg_test_ = msg_test;
  }
  // @@protoc_insertion_point(field_set_allocated:server_base.MSG_SVR_BASE.MSG_TEST)
}
void MSG_SVR_BASE::set_allocated_msg_test_res(::server_base::MSG_TEST_RES* msg_test_res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (msg_test_res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_test_res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_test_res, submessage_arena);
    }
    set_has_msg_test_res();
    msg_.msg_test_res_ = msg_test_res;
  }
  // @@protoc_insertion_point(field_set_allocated:server_base.MSG_SVR_BASE.MSG_TEST_RES)
}
MSG_SVR_BASE::MSG_SVR_BASE()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:server_base.MSG_SVR_BASE)
}
MSG_SVR_BASE::MSG_SVR_BASE(const MSG_SVR_BASE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_msg();
  switch (from.msg_case()) {
    case kMSGLEADERREG: {
      _internal_mutable_msg_leader_reg()->::server_base::MSG_LEADER_REG::MergeFrom(from._internal_msg_leader_reg());
      break;
    }
    case kMSGLEADERSERVERLIST: {
      _internal_mutable_msg_leader_server_list()->::server_base::MSG_LEADER_SERVER_LIST::MergeFrom(from._internal_msg_leader_server_list());
      break;
    }
    case kMSGLEADERREGRES: {
      _internal_mutable_msg_leader_reg_res()->::server_base::MSG_LEADER_REG_RES::MergeFrom(from._internal_msg_leader_reg_res());
      break;
    }
    case kMSGLEADERSERVERLISTRES: {
      _internal_mutable_msg_leader_server_list_res()->::server_base::MSG_LEADER_SERVER_LIST_RES::MergeFrom(from._internal_msg_leader_server_list_res());
      break;
    }
    case kMSGLEADERBROADCASTADD: {
      _internal_mutable_msg_leader_broadcast_add()->::server_base::MSG_LEADER_BROADCAST_ADD::MergeFrom(from._internal_msg_leader_broadcast_add());
      break;
    }
    case kMSGLEADERBROADCASTREMOVE: {
      _internal_mutable_msg_leader_broadcast_remove()->::server_base::MSG_LEADER_BROADCAST_REMOVE::MergeFrom(from._internal_msg_leader_broadcast_remove());
      break;
    }
    case kMSGSVRREG: {
      _internal_mutable_msg_svr_reg()->::server_base::MSG_SVR_REG_RES::MergeFrom(from._internal_msg_svr_reg());
      break;
    }
    case kMSGSVRREGRES: {
      _internal_mutable_msg_svr_reg_res()->::server_base::MSG_SVR_REG_RES::MergeFrom(from._internal_msg_svr_reg_res());
      break;
    }
    case kMSGHEARTBEAT: {
      _internal_mutable_msg_heartbeat()->::server_base::MSG_HEARTBEAT::MergeFrom(from._internal_msg_heartbeat());
      break;
    }
    case kMSGHEARTBEATRES: {
      _internal_mutable_msg_heartbeat_res()->::server_base::MSG_HEARTBEAT::MergeFrom(from._internal_msg_heartbeat_res());
      break;
    }
    case kMSGTEST: {
      _internal_mutable_msg_test()->::server_base::MSG_TEST::MergeFrom(from._internal_msg_test());
      break;
    }
    case kMSGTESTRES: {
      _internal_mutable_msg_test_res()->::server_base::MSG_TEST_RES::MergeFrom(from._internal_msg_test_res());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:server_base.MSG_SVR_BASE)
}

void MSG_SVR_BASE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_SVR_BASE_server_5fbase_2eproto.base);
  clear_has_msg();
}

MSG_SVR_BASE::~MSG_SVR_BASE() {
  // @@protoc_insertion_point(destructor:server_base.MSG_SVR_BASE)
  SharedDtor();
}

void MSG_SVR_BASE::SharedDtor() {
  if (has_msg()) {
    clear_msg();
  }
}

void MSG_SVR_BASE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_SVR_BASE& MSG_SVR_BASE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_SVR_BASE_server_5fbase_2eproto.base);
  return *internal_default_instance();
}


void MSG_SVR_BASE::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:server_base.MSG_SVR_BASE)
  switch (msg_case()) {
    case kMSGLEADERREG: {
      delete msg_.msg_leader_reg_;
      break;
    }
    case kMSGLEADERSERVERLIST: {
      delete msg_.msg_leader_server_list_;
      break;
    }
    case kMSGLEADERREGRES: {
      delete msg_.msg_leader_reg_res_;
      break;
    }
    case kMSGLEADERSERVERLISTRES: {
      delete msg_.msg_leader_server_list_res_;
      break;
    }
    case kMSGLEADERBROADCASTADD: {
      delete msg_.msg_leader_broadcast_add_;
      break;
    }
    case kMSGLEADERBROADCASTREMOVE: {
      delete msg_.msg_leader_broadcast_remove_;
      break;
    }
    case kMSGSVRREG: {
      delete msg_.msg_svr_reg_;
      break;
    }
    case kMSGSVRREGRES: {
      delete msg_.msg_svr_reg_res_;
      break;
    }
    case kMSGHEARTBEAT: {
      delete msg_.msg_heartbeat_;
      break;
    }
    case kMSGHEARTBEATRES: {
      delete msg_.msg_heartbeat_res_;
      break;
    }
    case kMSGTEST: {
      delete msg_.msg_test_;
      break;
    }
    case kMSGTESTRES: {
      delete msg_.msg_test_res_;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void MSG_SVR_BASE::Clear() {
// @@protoc_insertion_point(message_clear_start:server_base.MSG_SVR_BASE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_msg();
  _internal_metadata_.Clear();
}

const char* MSG_SVR_BASE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .server_base.MSG_LEADER_REG MSG_LEADER_REG = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_leader_reg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .server_base.MSG_LEADER_SERVER_LIST MSG_LEADER_SERVER_LIST = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_leader_server_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .server_base.MSG_LEADER_REG_RES MSG_LEADER_REG_RES = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_leader_reg_res(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .server_base.MSG_LEADER_SERVER_LIST_RES MSG_LEADER_SERVER_LIST_RES = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_leader_server_list_res(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .server_base.MSG_LEADER_BROADCAST_ADD MSG_LEADER_BROADCAST_ADD = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_leader_broadcast_add(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .server_base.MSG_LEADER_BROADCAST_REMOVE MSG_LEADER_BROADCAST_REMOVE = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_leader_broadcast_remove(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .server_base.MSG_SVR_REG_RES MSG_SVR_REG = 500;
      case 500:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_svr_reg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .server_base.MSG_SVR_REG_RES MSG_SVR_REG_RES = 501;
      case 501:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_svr_reg_res(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .server_base.MSG_HEARTBEAT MSG_HEARTBEAT = 999;
      case 999:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_heartbeat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .server_base.MSG_HEARTBEAT MSG_HEARTBEAT_RES = 1000;
      case 1000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_heartbeat_res(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .server_base.MSG_TEST MSG_TEST = 9001;
      case 9001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_test(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .server_base.MSG_TEST_RES MSG_TEST_RES = 9002;
      case 9002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_test_res(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_SVR_BASE::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server_base.MSG_SVR_BASE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .server_base.MSG_LEADER_REG MSG_LEADER_REG = 101;
  if (_internal_has_msg_leader_reg()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        101, _Internal::msg_leader_reg(this), target, stream);
  }

  // .server_base.MSG_LEADER_SERVER_LIST MSG_LEADER_SERVER_LIST = 102;
  if (_internal_has_msg_leader_server_list()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        102, _Internal::msg_leader_server_list(this), target, stream);
  }

  // .server_base.MSG_LEADER_REG_RES MSG_LEADER_REG_RES = 103;
  if (_internal_has_msg_leader_reg_res()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        103, _Internal::msg_leader_reg_res(this), target, stream);
  }

  // .server_base.MSG_LEADER_SERVER_LIST_RES MSG_LEADER_SERVER_LIST_RES = 104;
  if (_internal_has_msg_leader_server_list_res()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        104, _Internal::msg_leader_server_list_res(this), target, stream);
  }

  // .server_base.MSG_LEADER_BROADCAST_ADD MSG_LEADER_BROADCAST_ADD = 105;
  if (_internal_has_msg_leader_broadcast_add()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        105, _Internal::msg_leader_broadcast_add(this), target, stream);
  }

  // .server_base.MSG_LEADER_BROADCAST_REMOVE MSG_LEADER_BROADCAST_REMOVE = 106;
  if (_internal_has_msg_leader_broadcast_remove()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        106, _Internal::msg_leader_broadcast_remove(this), target, stream);
  }

  // .server_base.MSG_SVR_REG_RES MSG_SVR_REG = 500;
  if (_internal_has_msg_svr_reg()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        500, _Internal::msg_svr_reg(this), target, stream);
  }

  // .server_base.MSG_SVR_REG_RES MSG_SVR_REG_RES = 501;
  if (_internal_has_msg_svr_reg_res()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        501, _Internal::msg_svr_reg_res(this), target, stream);
  }

  // .server_base.MSG_HEARTBEAT MSG_HEARTBEAT = 999;
  if (_internal_has_msg_heartbeat()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        999, _Internal::msg_heartbeat(this), target, stream);
  }

  // .server_base.MSG_HEARTBEAT MSG_HEARTBEAT_RES = 1000;
  if (_internal_has_msg_heartbeat_res()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1000, _Internal::msg_heartbeat_res(this), target, stream);
  }

  // .server_base.MSG_TEST MSG_TEST = 9001;
  if (_internal_has_msg_test()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9001, _Internal::msg_test(this), target, stream);
  }

  // .server_base.MSG_TEST_RES MSG_TEST_RES = 9002;
  if (_internal_has_msg_test_res()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9002, _Internal::msg_test_res(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server_base.MSG_SVR_BASE)
  return target;
}

size_t MSG_SVR_BASE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server_base.MSG_SVR_BASE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (msg_case()) {
    // .server_base.MSG_LEADER_REG MSG_LEADER_REG = 101;
    case kMSGLEADERREG: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.msg_leader_reg_);
      break;
    }
    // .server_base.MSG_LEADER_SERVER_LIST MSG_LEADER_SERVER_LIST = 102;
    case kMSGLEADERSERVERLIST: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.msg_leader_server_list_);
      break;
    }
    // .server_base.MSG_LEADER_REG_RES MSG_LEADER_REG_RES = 103;
    case kMSGLEADERREGRES: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.msg_leader_reg_res_);
      break;
    }
    // .server_base.MSG_LEADER_SERVER_LIST_RES MSG_LEADER_SERVER_LIST_RES = 104;
    case kMSGLEADERSERVERLISTRES: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.msg_leader_server_list_res_);
      break;
    }
    // .server_base.MSG_LEADER_BROADCAST_ADD MSG_LEADER_BROADCAST_ADD = 105;
    case kMSGLEADERBROADCASTADD: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.msg_leader_broadcast_add_);
      break;
    }
    // .server_base.MSG_LEADER_BROADCAST_REMOVE MSG_LEADER_BROADCAST_REMOVE = 106;
    case kMSGLEADERBROADCASTREMOVE: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.msg_leader_broadcast_remove_);
      break;
    }
    // .server_base.MSG_SVR_REG_RES MSG_SVR_REG = 500;
    case kMSGSVRREG: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.msg_svr_reg_);
      break;
    }
    // .server_base.MSG_SVR_REG_RES MSG_SVR_REG_RES = 501;
    case kMSGSVRREGRES: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.msg_svr_reg_res_);
      break;
    }
    // .server_base.MSG_HEARTBEAT MSG_HEARTBEAT = 999;
    case kMSGHEARTBEAT: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.msg_heartbeat_);
      break;
    }
    // .server_base.MSG_HEARTBEAT MSG_HEARTBEAT_RES = 1000;
    case kMSGHEARTBEATRES: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.msg_heartbeat_res_);
      break;
    }
    // .server_base.MSG_TEST MSG_TEST = 9001;
    case kMSGTEST: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.msg_test_);
      break;
    }
    // .server_base.MSG_TEST_RES MSG_TEST_RES = 9002;
    case kMSGTESTRES: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.msg_test_res_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_SVR_BASE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server_base.MSG_SVR_BASE)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_SVR_BASE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_SVR_BASE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server_base.MSG_SVR_BASE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server_base.MSG_SVR_BASE)
    MergeFrom(*source);
  }
}

void MSG_SVR_BASE::MergeFrom(const MSG_SVR_BASE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server_base.MSG_SVR_BASE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.msg_case()) {
    case kMSGLEADERREG: {
      _internal_mutable_msg_leader_reg()->::server_base::MSG_LEADER_REG::MergeFrom(from._internal_msg_leader_reg());
      break;
    }
    case kMSGLEADERSERVERLIST: {
      _internal_mutable_msg_leader_server_list()->::server_base::MSG_LEADER_SERVER_LIST::MergeFrom(from._internal_msg_leader_server_list());
      break;
    }
    case kMSGLEADERREGRES: {
      _internal_mutable_msg_leader_reg_res()->::server_base::MSG_LEADER_REG_RES::MergeFrom(from._internal_msg_leader_reg_res());
      break;
    }
    case kMSGLEADERSERVERLISTRES: {
      _internal_mutable_msg_leader_server_list_res()->::server_base::MSG_LEADER_SERVER_LIST_RES::MergeFrom(from._internal_msg_leader_server_list_res());
      break;
    }
    case kMSGLEADERBROADCASTADD: {
      _internal_mutable_msg_leader_broadcast_add()->::server_base::MSG_LEADER_BROADCAST_ADD::MergeFrom(from._internal_msg_leader_broadcast_add());
      break;
    }
    case kMSGLEADERBROADCASTREMOVE: {
      _internal_mutable_msg_leader_broadcast_remove()->::server_base::MSG_LEADER_BROADCAST_REMOVE::MergeFrom(from._internal_msg_leader_broadcast_remove());
      break;
    }
    case kMSGSVRREG: {
      _internal_mutable_msg_svr_reg()->::server_base::MSG_SVR_REG_RES::MergeFrom(from._internal_msg_svr_reg());
      break;
    }
    case kMSGSVRREGRES: {
      _internal_mutable_msg_svr_reg_res()->::server_base::MSG_SVR_REG_RES::MergeFrom(from._internal_msg_svr_reg_res());
      break;
    }
    case kMSGHEARTBEAT: {
      _internal_mutable_msg_heartbeat()->::server_base::MSG_HEARTBEAT::MergeFrom(from._internal_msg_heartbeat());
      break;
    }
    case kMSGHEARTBEATRES: {
      _internal_mutable_msg_heartbeat_res()->::server_base::MSG_HEARTBEAT::MergeFrom(from._internal_msg_heartbeat_res());
      break;
    }
    case kMSGTEST: {
      _internal_mutable_msg_test()->::server_base::MSG_TEST::MergeFrom(from._internal_msg_test());
      break;
    }
    case kMSGTESTRES: {
      _internal_mutable_msg_test_res()->::server_base::MSG_TEST_RES::MergeFrom(from._internal_msg_test_res());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void MSG_SVR_BASE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server_base.MSG_SVR_BASE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_SVR_BASE::CopyFrom(const MSG_SVR_BASE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server_base.MSG_SVR_BASE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_SVR_BASE::IsInitialized() const {
  return true;
}

void MSG_SVR_BASE::InternalSwap(MSG_SVR_BASE* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msg_, other->msg_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_SVR_BASE::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace server_base
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::server_base::MSG_TEST* Arena::CreateMaybeMessage< ::server_base::MSG_TEST >(Arena* arena) {
  return Arena::CreateInternal< ::server_base::MSG_TEST >(arena);
}
template<> PROTOBUF_NOINLINE ::server_base::MSG_TEST_RES* Arena::CreateMaybeMessage< ::server_base::MSG_TEST_RES >(Arena* arena) {
  return Arena::CreateInternal< ::server_base::MSG_TEST_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::server_base::SERVICE_INFO* Arena::CreateMaybeMessage< ::server_base::SERVICE_INFO >(Arena* arena) {
  return Arena::CreateInternal< ::server_base::SERVICE_INFO >(arena);
}
template<> PROTOBUF_NOINLINE ::server_base::SERVICE_INFO_SINGLE* Arena::CreateMaybeMessage< ::server_base::SERVICE_INFO_SINGLE >(Arena* arena) {
  return Arena::CreateInternal< ::server_base::SERVICE_INFO_SINGLE >(arena);
}
template<> PROTOBUF_NOINLINE ::server_base::MSG_HEARTBEAT* Arena::CreateMaybeMessage< ::server_base::MSG_HEARTBEAT >(Arena* arena) {
  return Arena::CreateInternal< ::server_base::MSG_HEARTBEAT >(arena);
}
template<> PROTOBUF_NOINLINE ::server_base::MSG_HEARTBEAT_RES* Arena::CreateMaybeMessage< ::server_base::MSG_HEARTBEAT_RES >(Arena* arena) {
  return Arena::CreateInternal< ::server_base::MSG_HEARTBEAT_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::server_base::MSG_LEADER_REG* Arena::CreateMaybeMessage< ::server_base::MSG_LEADER_REG >(Arena* arena) {
  return Arena::CreateInternal< ::server_base::MSG_LEADER_REG >(arena);
}
template<> PROTOBUF_NOINLINE ::server_base::MSG_LEADER_SERVER_LIST* Arena::CreateMaybeMessage< ::server_base::MSG_LEADER_SERVER_LIST >(Arena* arena) {
  return Arena::CreateInternal< ::server_base::MSG_LEADER_SERVER_LIST >(arena);
}
template<> PROTOBUF_NOINLINE ::server_base::MSG_LEADER_BROADCAST_ADD* Arena::CreateMaybeMessage< ::server_base::MSG_LEADER_BROADCAST_ADD >(Arena* arena) {
  return Arena::CreateInternal< ::server_base::MSG_LEADER_BROADCAST_ADD >(arena);
}
template<> PROTOBUF_NOINLINE ::server_base::MSG_LEADER_BROADCAST_REMOVE* Arena::CreateMaybeMessage< ::server_base::MSG_LEADER_BROADCAST_REMOVE >(Arena* arena) {
  return Arena::CreateInternal< ::server_base::MSG_LEADER_BROADCAST_REMOVE >(arena);
}
template<> PROTOBUF_NOINLINE ::server_base::MSG_LEADER_REG_RES* Arena::CreateMaybeMessage< ::server_base::MSG_LEADER_REG_RES >(Arena* arena) {
  return Arena::CreateInternal< ::server_base::MSG_LEADER_REG_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::server_base::MSG_LEADER_SERVER_LIST_RES* Arena::CreateMaybeMessage< ::server_base::MSG_LEADER_SERVER_LIST_RES >(Arena* arena) {
  return Arena::CreateInternal< ::server_base::MSG_LEADER_SERVER_LIST_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::server_base::MSG_SVR_REG* Arena::CreateMaybeMessage< ::server_base::MSG_SVR_REG >(Arena* arena) {
  return Arena::CreateInternal< ::server_base::MSG_SVR_REG >(arena);
}
template<> PROTOBUF_NOINLINE ::server_base::MSG_SVR_REG_RES* Arena::CreateMaybeMessage< ::server_base::MSG_SVR_REG_RES >(Arena* arena) {
  return Arena::CreateInternal< ::server_base::MSG_SVR_REG_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::server_base::MSG_SVR_BASE* Arena::CreateMaybeMessage< ::server_base::MSG_SVR_BASE >(Arena* arena) {
  return Arena::CreateInternal< ::server_base::MSG_SVR_BASE >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
