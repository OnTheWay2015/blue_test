// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: t1.proto

#ifndef PROTOBUF_t1_2eproto__INCLUDED
#define PROTOBUF_t1_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "p1.pb.h"
// @@protoc_insertion_point(includes)

namespace t1 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_t1_2eproto();
void protobuf_InitDefaults_t1_2eproto();
void protobuf_AssignDesc_t1_2eproto();
void protobuf_ShutdownFile_t1_2eproto();

class MSG_BASE;

// ===================================================================

class MSG_BASE : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:t1.MSG_BASE) */ {
 public:
  MSG_BASE();
  virtual ~MSG_BASE();

  MSG_BASE(const MSG_BASE& from);

  inline MSG_BASE& operator=(const MSG_BASE& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MSG_BASE& default_instance();

  enum MsgCase {
    kMSGHEARTBEAT = 1000,
    kMSGLEADERREG = 1001,
    kMSGLEADERSERVERLIST = 1002,
    kMSGHEARTBEATRES = 2000,
    kMSGLEADERREGRES = 2001,
    kMSGLEADERSERVERLISTRES = 2002,
    kMSGLEADERBROADCASTADD = 3001,
    kMSGLEADERBROADCASTREMOVE = 3002,
    MSG_NOT_SET = 0,
  };

  static const MSG_BASE* internal_default_instance();

  void Swap(MSG_BASE* other);

  // implements Message ----------------------------------------------

  inline MSG_BASE* New() const { return New(NULL); }

  MSG_BASE* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MSG_BASE& from);
  void MergeFrom(const MSG_BASE& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MSG_BASE* other);
  void UnsafeMergeFrom(const MSG_BASE& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 SessionID = 1;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  ::google::protobuf::int32 sessionid() const;
  void set_sessionid(::google::protobuf::int32 value);

  // optional .p1.MSG_HEARTBEAT MSG_HEARTBEAT = 1000;
  bool has_msg_heartbeat() const;
  void clear_msg_heartbeat();
  static const int kMSGHEARTBEATFieldNumber = 1000;
  const ::p1::MSG_HEARTBEAT& msg_heartbeat() const;
  ::p1::MSG_HEARTBEAT* mutable_msg_heartbeat();
  ::p1::MSG_HEARTBEAT* release_msg_heartbeat();
  void set_allocated_msg_heartbeat(::p1::MSG_HEARTBEAT* msg_heartbeat);

  // optional .p1.MSG_LEADER_REG MSG_LEADER_REG = 1001;
  bool has_msg_leader_reg() const;
  void clear_msg_leader_reg();
  static const int kMSGLEADERREGFieldNumber = 1001;
  const ::p1::MSG_LEADER_REG& msg_leader_reg() const;
  ::p1::MSG_LEADER_REG* mutable_msg_leader_reg();
  ::p1::MSG_LEADER_REG* release_msg_leader_reg();
  void set_allocated_msg_leader_reg(::p1::MSG_LEADER_REG* msg_leader_reg);

  // optional .p1.MSG_LEADER_SERVER_LIST MSG_LEADER_SERVER_LIST = 1002;
  bool has_msg_leader_server_list() const;
  void clear_msg_leader_server_list();
  static const int kMSGLEADERSERVERLISTFieldNumber = 1002;
  const ::p1::MSG_LEADER_SERVER_LIST& msg_leader_server_list() const;
  ::p1::MSG_LEADER_SERVER_LIST* mutable_msg_leader_server_list();
  ::p1::MSG_LEADER_SERVER_LIST* release_msg_leader_server_list();
  void set_allocated_msg_leader_server_list(::p1::MSG_LEADER_SERVER_LIST* msg_leader_server_list);

  // optional .p1.MSG_HEARTBEAT MSG_HEARTBEAT_RES = 2000;
  bool has_msg_heartbeat_res() const;
  void clear_msg_heartbeat_res();
  static const int kMSGHEARTBEATRESFieldNumber = 2000;
  const ::p1::MSG_HEARTBEAT& msg_heartbeat_res() const;
  ::p1::MSG_HEARTBEAT* mutable_msg_heartbeat_res();
  ::p1::MSG_HEARTBEAT* release_msg_heartbeat_res();
  void set_allocated_msg_heartbeat_res(::p1::MSG_HEARTBEAT* msg_heartbeat_res);

  // optional .p1.MSG_LEADER_REG_RES MSG_LEADER_REG_RES = 2001;
  bool has_msg_leader_reg_res() const;
  void clear_msg_leader_reg_res();
  static const int kMSGLEADERREGRESFieldNumber = 2001;
  const ::p1::MSG_LEADER_REG_RES& msg_leader_reg_res() const;
  ::p1::MSG_LEADER_REG_RES* mutable_msg_leader_reg_res();
  ::p1::MSG_LEADER_REG_RES* release_msg_leader_reg_res();
  void set_allocated_msg_leader_reg_res(::p1::MSG_LEADER_REG_RES* msg_leader_reg_res);

  // optional .p1.MSG_LEADER_SERVER_LIST_RES MSG_LEADER_SERVER_LIST_RES = 2002;
  bool has_msg_leader_server_list_res() const;
  void clear_msg_leader_server_list_res();
  static const int kMSGLEADERSERVERLISTRESFieldNumber = 2002;
  const ::p1::MSG_LEADER_SERVER_LIST_RES& msg_leader_server_list_res() const;
  ::p1::MSG_LEADER_SERVER_LIST_RES* mutable_msg_leader_server_list_res();
  ::p1::MSG_LEADER_SERVER_LIST_RES* release_msg_leader_server_list_res();
  void set_allocated_msg_leader_server_list_res(::p1::MSG_LEADER_SERVER_LIST_RES* msg_leader_server_list_res);

  // optional .p1.MSG_LEADER_BROADCAST_ADD MSG_LEADER_BROADCAST_ADD = 3001;
  bool has_msg_leader_broadcast_add() const;
  void clear_msg_leader_broadcast_add();
  static const int kMSGLEADERBROADCASTADDFieldNumber = 3001;
  const ::p1::MSG_LEADER_BROADCAST_ADD& msg_leader_broadcast_add() const;
  ::p1::MSG_LEADER_BROADCAST_ADD* mutable_msg_leader_broadcast_add();
  ::p1::MSG_LEADER_BROADCAST_ADD* release_msg_leader_broadcast_add();
  void set_allocated_msg_leader_broadcast_add(::p1::MSG_LEADER_BROADCAST_ADD* msg_leader_broadcast_add);

  // optional .p1.MSG_LEADER_BROADCAST_REMOVE MSG_LEADER_BROADCAST_REMOVE = 3002;
  bool has_msg_leader_broadcast_remove() const;
  void clear_msg_leader_broadcast_remove();
  static const int kMSGLEADERBROADCASTREMOVEFieldNumber = 3002;
  const ::p1::MSG_LEADER_BROADCAST_REMOVE& msg_leader_broadcast_remove() const;
  ::p1::MSG_LEADER_BROADCAST_REMOVE* mutable_msg_leader_broadcast_remove();
  ::p1::MSG_LEADER_BROADCAST_REMOVE* release_msg_leader_broadcast_remove();
  void set_allocated_msg_leader_broadcast_remove(::p1::MSG_LEADER_BROADCAST_REMOVE* msg_leader_broadcast_remove);

  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:t1.MSG_BASE)
 private:
  inline void set_has_msg_heartbeat();
  inline void set_has_msg_leader_reg();
  inline void set_has_msg_leader_server_list();
  inline void set_has_msg_heartbeat_res();
  inline void set_has_msg_leader_reg_res();
  inline void set_has_msg_leader_server_list_res();
  inline void set_has_msg_leader_broadcast_add();
  inline void set_has_msg_leader_broadcast_remove();

  inline bool has_msg() const;
  void clear_msg();
  inline void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 sessionid_;
  union MsgUnion {
    MsgUnion() {}
    ::p1::MSG_HEARTBEAT* msg_heartbeat_;
    ::p1::MSG_LEADER_REG* msg_leader_reg_;
    ::p1::MSG_LEADER_SERVER_LIST* msg_leader_server_list_;
    ::p1::MSG_HEARTBEAT* msg_heartbeat_res_;
    ::p1::MSG_LEADER_REG_RES* msg_leader_reg_res_;
    ::p1::MSG_LEADER_SERVER_LIST_RES* msg_leader_server_list_res_;
    ::p1::MSG_LEADER_BROADCAST_ADD* msg_leader_broadcast_add_;
    ::p1::MSG_LEADER_BROADCAST_REMOVE* msg_leader_broadcast_remove_;
  } msg_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_InitDefaults_t1_2eproto_impl();
  friend void  protobuf_AddDesc_t1_2eproto_impl();
  friend void protobuf_AssignDesc_t1_2eproto();
  friend void protobuf_ShutdownFile_t1_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MSG_BASE> MSG_BASE_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MSG_BASE

// optional int32 SessionID = 1;
inline void MSG_BASE::clear_sessionid() {
  sessionid_ = 0;
}
inline ::google::protobuf::int32 MSG_BASE::sessionid() const {
  // @@protoc_insertion_point(field_get:t1.MSG_BASE.SessionID)
  return sessionid_;
}
inline void MSG_BASE::set_sessionid(::google::protobuf::int32 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:t1.MSG_BASE.SessionID)
}

// optional .p1.MSG_HEARTBEAT MSG_HEARTBEAT = 1000;
inline bool MSG_BASE::has_msg_heartbeat() const {
  return msg_case() == kMSGHEARTBEAT;
}
inline void MSG_BASE::set_has_msg_heartbeat() {
  _oneof_case_[0] = kMSGHEARTBEAT;
}
inline void MSG_BASE::clear_msg_heartbeat() {
  if (has_msg_heartbeat()) {
    delete msg_.msg_heartbeat_;
    clear_has_msg();
  }
}
inline  const ::p1::MSG_HEARTBEAT& MSG_BASE::msg_heartbeat() const {
  // @@protoc_insertion_point(field_get:t1.MSG_BASE.MSG_HEARTBEAT)
  return has_msg_heartbeat()
      ? *msg_.msg_heartbeat_
      : ::p1::MSG_HEARTBEAT::default_instance();
}
inline ::p1::MSG_HEARTBEAT* MSG_BASE::mutable_msg_heartbeat() {
  if (!has_msg_heartbeat()) {
    clear_msg();
    set_has_msg_heartbeat();
    msg_.msg_heartbeat_ = new ::p1::MSG_HEARTBEAT;
  }
  // @@protoc_insertion_point(field_mutable:t1.MSG_BASE.MSG_HEARTBEAT)
  return msg_.msg_heartbeat_;
}
inline ::p1::MSG_HEARTBEAT* MSG_BASE::release_msg_heartbeat() {
  // @@protoc_insertion_point(field_release:t1.MSG_BASE.MSG_HEARTBEAT)
  if (has_msg_heartbeat()) {
    clear_has_msg();
    ::p1::MSG_HEARTBEAT* temp = msg_.msg_heartbeat_;
    msg_.msg_heartbeat_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MSG_BASE::set_allocated_msg_heartbeat(::p1::MSG_HEARTBEAT* msg_heartbeat) {
  clear_msg();
  if (msg_heartbeat) {
    set_has_msg_heartbeat();
    msg_.msg_heartbeat_ = msg_heartbeat;
  }
  // @@protoc_insertion_point(field_set_allocated:t1.MSG_BASE.MSG_HEARTBEAT)
}

// optional .p1.MSG_LEADER_REG MSG_LEADER_REG = 1001;
inline bool MSG_BASE::has_msg_leader_reg() const {
  return msg_case() == kMSGLEADERREG;
}
inline void MSG_BASE::set_has_msg_leader_reg() {
  _oneof_case_[0] = kMSGLEADERREG;
}
inline void MSG_BASE::clear_msg_leader_reg() {
  if (has_msg_leader_reg()) {
    delete msg_.msg_leader_reg_;
    clear_has_msg();
  }
}
inline  const ::p1::MSG_LEADER_REG& MSG_BASE::msg_leader_reg() const {
  // @@protoc_insertion_point(field_get:t1.MSG_BASE.MSG_LEADER_REG)
  return has_msg_leader_reg()
      ? *msg_.msg_leader_reg_
      : ::p1::MSG_LEADER_REG::default_instance();
}
inline ::p1::MSG_LEADER_REG* MSG_BASE::mutable_msg_leader_reg() {
  if (!has_msg_leader_reg()) {
    clear_msg();
    set_has_msg_leader_reg();
    msg_.msg_leader_reg_ = new ::p1::MSG_LEADER_REG;
  }
  // @@protoc_insertion_point(field_mutable:t1.MSG_BASE.MSG_LEADER_REG)
  return msg_.msg_leader_reg_;
}
inline ::p1::MSG_LEADER_REG* MSG_BASE::release_msg_leader_reg() {
  // @@protoc_insertion_point(field_release:t1.MSG_BASE.MSG_LEADER_REG)
  if (has_msg_leader_reg()) {
    clear_has_msg();
    ::p1::MSG_LEADER_REG* temp = msg_.msg_leader_reg_;
    msg_.msg_leader_reg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MSG_BASE::set_allocated_msg_leader_reg(::p1::MSG_LEADER_REG* msg_leader_reg) {
  clear_msg();
  if (msg_leader_reg) {
    set_has_msg_leader_reg();
    msg_.msg_leader_reg_ = msg_leader_reg;
  }
  // @@protoc_insertion_point(field_set_allocated:t1.MSG_BASE.MSG_LEADER_REG)
}

// optional .p1.MSG_LEADER_SERVER_LIST MSG_LEADER_SERVER_LIST = 1002;
inline bool MSG_BASE::has_msg_leader_server_list() const {
  return msg_case() == kMSGLEADERSERVERLIST;
}
inline void MSG_BASE::set_has_msg_leader_server_list() {
  _oneof_case_[0] = kMSGLEADERSERVERLIST;
}
inline void MSG_BASE::clear_msg_leader_server_list() {
  if (has_msg_leader_server_list()) {
    delete msg_.msg_leader_server_list_;
    clear_has_msg();
  }
}
inline  const ::p1::MSG_LEADER_SERVER_LIST& MSG_BASE::msg_leader_server_list() const {
  // @@protoc_insertion_point(field_get:t1.MSG_BASE.MSG_LEADER_SERVER_LIST)
  return has_msg_leader_server_list()
      ? *msg_.msg_leader_server_list_
      : ::p1::MSG_LEADER_SERVER_LIST::default_instance();
}
inline ::p1::MSG_LEADER_SERVER_LIST* MSG_BASE::mutable_msg_leader_server_list() {
  if (!has_msg_leader_server_list()) {
    clear_msg();
    set_has_msg_leader_server_list();
    msg_.msg_leader_server_list_ = new ::p1::MSG_LEADER_SERVER_LIST;
  }
  // @@protoc_insertion_point(field_mutable:t1.MSG_BASE.MSG_LEADER_SERVER_LIST)
  return msg_.msg_leader_server_list_;
}
inline ::p1::MSG_LEADER_SERVER_LIST* MSG_BASE::release_msg_leader_server_list() {
  // @@protoc_insertion_point(field_release:t1.MSG_BASE.MSG_LEADER_SERVER_LIST)
  if (has_msg_leader_server_list()) {
    clear_has_msg();
    ::p1::MSG_LEADER_SERVER_LIST* temp = msg_.msg_leader_server_list_;
    msg_.msg_leader_server_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MSG_BASE::set_allocated_msg_leader_server_list(::p1::MSG_LEADER_SERVER_LIST* msg_leader_server_list) {
  clear_msg();
  if (msg_leader_server_list) {
    set_has_msg_leader_server_list();
    msg_.msg_leader_server_list_ = msg_leader_server_list;
  }
  // @@protoc_insertion_point(field_set_allocated:t1.MSG_BASE.MSG_LEADER_SERVER_LIST)
}

// optional .p1.MSG_HEARTBEAT MSG_HEARTBEAT_RES = 2000;
inline bool MSG_BASE::has_msg_heartbeat_res() const {
  return msg_case() == kMSGHEARTBEATRES;
}
inline void MSG_BASE::set_has_msg_heartbeat_res() {
  _oneof_case_[0] = kMSGHEARTBEATRES;
}
inline void MSG_BASE::clear_msg_heartbeat_res() {
  if (has_msg_heartbeat_res()) {
    delete msg_.msg_heartbeat_res_;
    clear_has_msg();
  }
}
inline  const ::p1::MSG_HEARTBEAT& MSG_BASE::msg_heartbeat_res() const {
  // @@protoc_insertion_point(field_get:t1.MSG_BASE.MSG_HEARTBEAT_RES)
  return has_msg_heartbeat_res()
      ? *msg_.msg_heartbeat_res_
      : ::p1::MSG_HEARTBEAT::default_instance();
}
inline ::p1::MSG_HEARTBEAT* MSG_BASE::mutable_msg_heartbeat_res() {
  if (!has_msg_heartbeat_res()) {
    clear_msg();
    set_has_msg_heartbeat_res();
    msg_.msg_heartbeat_res_ = new ::p1::MSG_HEARTBEAT;
  }
  // @@protoc_insertion_point(field_mutable:t1.MSG_BASE.MSG_HEARTBEAT_RES)
  return msg_.msg_heartbeat_res_;
}
inline ::p1::MSG_HEARTBEAT* MSG_BASE::release_msg_heartbeat_res() {
  // @@protoc_insertion_point(field_release:t1.MSG_BASE.MSG_HEARTBEAT_RES)
  if (has_msg_heartbeat_res()) {
    clear_has_msg();
    ::p1::MSG_HEARTBEAT* temp = msg_.msg_heartbeat_res_;
    msg_.msg_heartbeat_res_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MSG_BASE::set_allocated_msg_heartbeat_res(::p1::MSG_HEARTBEAT* msg_heartbeat_res) {
  clear_msg();
  if (msg_heartbeat_res) {
    set_has_msg_heartbeat_res();
    msg_.msg_heartbeat_res_ = msg_heartbeat_res;
  }
  // @@protoc_insertion_point(field_set_allocated:t1.MSG_BASE.MSG_HEARTBEAT_RES)
}

// optional .p1.MSG_LEADER_REG_RES MSG_LEADER_REG_RES = 2001;
inline bool MSG_BASE::has_msg_leader_reg_res() const {
  return msg_case() == kMSGLEADERREGRES;
}
inline void MSG_BASE::set_has_msg_leader_reg_res() {
  _oneof_case_[0] = kMSGLEADERREGRES;
}
inline void MSG_BASE::clear_msg_leader_reg_res() {
  if (has_msg_leader_reg_res()) {
    delete msg_.msg_leader_reg_res_;
    clear_has_msg();
  }
}
inline  const ::p1::MSG_LEADER_REG_RES& MSG_BASE::msg_leader_reg_res() const {
  // @@protoc_insertion_point(field_get:t1.MSG_BASE.MSG_LEADER_REG_RES)
  return has_msg_leader_reg_res()
      ? *msg_.msg_leader_reg_res_
      : ::p1::MSG_LEADER_REG_RES::default_instance();
}
inline ::p1::MSG_LEADER_REG_RES* MSG_BASE::mutable_msg_leader_reg_res() {
  if (!has_msg_leader_reg_res()) {
    clear_msg();
    set_has_msg_leader_reg_res();
    msg_.msg_leader_reg_res_ = new ::p1::MSG_LEADER_REG_RES;
  }
  // @@protoc_insertion_point(field_mutable:t1.MSG_BASE.MSG_LEADER_REG_RES)
  return msg_.msg_leader_reg_res_;
}
inline ::p1::MSG_LEADER_REG_RES* MSG_BASE::release_msg_leader_reg_res() {
  // @@protoc_insertion_point(field_release:t1.MSG_BASE.MSG_LEADER_REG_RES)
  if (has_msg_leader_reg_res()) {
    clear_has_msg();
    ::p1::MSG_LEADER_REG_RES* temp = msg_.msg_leader_reg_res_;
    msg_.msg_leader_reg_res_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MSG_BASE::set_allocated_msg_leader_reg_res(::p1::MSG_LEADER_REG_RES* msg_leader_reg_res) {
  clear_msg();
  if (msg_leader_reg_res) {
    set_has_msg_leader_reg_res();
    msg_.msg_leader_reg_res_ = msg_leader_reg_res;
  }
  // @@protoc_insertion_point(field_set_allocated:t1.MSG_BASE.MSG_LEADER_REG_RES)
}

// optional .p1.MSG_LEADER_SERVER_LIST_RES MSG_LEADER_SERVER_LIST_RES = 2002;
inline bool MSG_BASE::has_msg_leader_server_list_res() const {
  return msg_case() == kMSGLEADERSERVERLISTRES;
}
inline void MSG_BASE::set_has_msg_leader_server_list_res() {
  _oneof_case_[0] = kMSGLEADERSERVERLISTRES;
}
inline void MSG_BASE::clear_msg_leader_server_list_res() {
  if (has_msg_leader_server_list_res()) {
    delete msg_.msg_leader_server_list_res_;
    clear_has_msg();
  }
}
inline  const ::p1::MSG_LEADER_SERVER_LIST_RES& MSG_BASE::msg_leader_server_list_res() const {
  // @@protoc_insertion_point(field_get:t1.MSG_BASE.MSG_LEADER_SERVER_LIST_RES)
  return has_msg_leader_server_list_res()
      ? *msg_.msg_leader_server_list_res_
      : ::p1::MSG_LEADER_SERVER_LIST_RES::default_instance();
}
inline ::p1::MSG_LEADER_SERVER_LIST_RES* MSG_BASE::mutable_msg_leader_server_list_res() {
  if (!has_msg_leader_server_list_res()) {
    clear_msg();
    set_has_msg_leader_server_list_res();
    msg_.msg_leader_server_list_res_ = new ::p1::MSG_LEADER_SERVER_LIST_RES;
  }
  // @@protoc_insertion_point(field_mutable:t1.MSG_BASE.MSG_LEADER_SERVER_LIST_RES)
  return msg_.msg_leader_server_list_res_;
}
inline ::p1::MSG_LEADER_SERVER_LIST_RES* MSG_BASE::release_msg_leader_server_list_res() {
  // @@protoc_insertion_point(field_release:t1.MSG_BASE.MSG_LEADER_SERVER_LIST_RES)
  if (has_msg_leader_server_list_res()) {
    clear_has_msg();
    ::p1::MSG_LEADER_SERVER_LIST_RES* temp = msg_.msg_leader_server_list_res_;
    msg_.msg_leader_server_list_res_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MSG_BASE::set_allocated_msg_leader_server_list_res(::p1::MSG_LEADER_SERVER_LIST_RES* msg_leader_server_list_res) {
  clear_msg();
  if (msg_leader_server_list_res) {
    set_has_msg_leader_server_list_res();
    msg_.msg_leader_server_list_res_ = msg_leader_server_list_res;
  }
  // @@protoc_insertion_point(field_set_allocated:t1.MSG_BASE.MSG_LEADER_SERVER_LIST_RES)
}

// optional .p1.MSG_LEADER_BROADCAST_ADD MSG_LEADER_BROADCAST_ADD = 3001;
inline bool MSG_BASE::has_msg_leader_broadcast_add() const {
  return msg_case() == kMSGLEADERBROADCASTADD;
}
inline void MSG_BASE::set_has_msg_leader_broadcast_add() {
  _oneof_case_[0] = kMSGLEADERBROADCASTADD;
}
inline void MSG_BASE::clear_msg_leader_broadcast_add() {
  if (has_msg_leader_broadcast_add()) {
    delete msg_.msg_leader_broadcast_add_;
    clear_has_msg();
  }
}
inline  const ::p1::MSG_LEADER_BROADCAST_ADD& MSG_BASE::msg_leader_broadcast_add() const {
  // @@protoc_insertion_point(field_get:t1.MSG_BASE.MSG_LEADER_BROADCAST_ADD)
  return has_msg_leader_broadcast_add()
      ? *msg_.msg_leader_broadcast_add_
      : ::p1::MSG_LEADER_BROADCAST_ADD::default_instance();
}
inline ::p1::MSG_LEADER_BROADCAST_ADD* MSG_BASE::mutable_msg_leader_broadcast_add() {
  if (!has_msg_leader_broadcast_add()) {
    clear_msg();
    set_has_msg_leader_broadcast_add();
    msg_.msg_leader_broadcast_add_ = new ::p1::MSG_LEADER_BROADCAST_ADD;
  }
  // @@protoc_insertion_point(field_mutable:t1.MSG_BASE.MSG_LEADER_BROADCAST_ADD)
  return msg_.msg_leader_broadcast_add_;
}
inline ::p1::MSG_LEADER_BROADCAST_ADD* MSG_BASE::release_msg_leader_broadcast_add() {
  // @@protoc_insertion_point(field_release:t1.MSG_BASE.MSG_LEADER_BROADCAST_ADD)
  if (has_msg_leader_broadcast_add()) {
    clear_has_msg();
    ::p1::MSG_LEADER_BROADCAST_ADD* temp = msg_.msg_leader_broadcast_add_;
    msg_.msg_leader_broadcast_add_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MSG_BASE::set_allocated_msg_leader_broadcast_add(::p1::MSG_LEADER_BROADCAST_ADD* msg_leader_broadcast_add) {
  clear_msg();
  if (msg_leader_broadcast_add) {
    set_has_msg_leader_broadcast_add();
    msg_.msg_leader_broadcast_add_ = msg_leader_broadcast_add;
  }
  // @@protoc_insertion_point(field_set_allocated:t1.MSG_BASE.MSG_LEADER_BROADCAST_ADD)
}

// optional .p1.MSG_LEADER_BROADCAST_REMOVE MSG_LEADER_BROADCAST_REMOVE = 3002;
inline bool MSG_BASE::has_msg_leader_broadcast_remove() const {
  return msg_case() == kMSGLEADERBROADCASTREMOVE;
}
inline void MSG_BASE::set_has_msg_leader_broadcast_remove() {
  _oneof_case_[0] = kMSGLEADERBROADCASTREMOVE;
}
inline void MSG_BASE::clear_msg_leader_broadcast_remove() {
  if (has_msg_leader_broadcast_remove()) {
    delete msg_.msg_leader_broadcast_remove_;
    clear_has_msg();
  }
}
inline  const ::p1::MSG_LEADER_BROADCAST_REMOVE& MSG_BASE::msg_leader_broadcast_remove() const {
  // @@protoc_insertion_point(field_get:t1.MSG_BASE.MSG_LEADER_BROADCAST_REMOVE)
  return has_msg_leader_broadcast_remove()
      ? *msg_.msg_leader_broadcast_remove_
      : ::p1::MSG_LEADER_BROADCAST_REMOVE::default_instance();
}
inline ::p1::MSG_LEADER_BROADCAST_REMOVE* MSG_BASE::mutable_msg_leader_broadcast_remove() {
  if (!has_msg_leader_broadcast_remove()) {
    clear_msg();
    set_has_msg_leader_broadcast_remove();
    msg_.msg_leader_broadcast_remove_ = new ::p1::MSG_LEADER_BROADCAST_REMOVE;
  }
  // @@protoc_insertion_point(field_mutable:t1.MSG_BASE.MSG_LEADER_BROADCAST_REMOVE)
  return msg_.msg_leader_broadcast_remove_;
}
inline ::p1::MSG_LEADER_BROADCAST_REMOVE* MSG_BASE::release_msg_leader_broadcast_remove() {
  // @@protoc_insertion_point(field_release:t1.MSG_BASE.MSG_LEADER_BROADCAST_REMOVE)
  if (has_msg_leader_broadcast_remove()) {
    clear_has_msg();
    ::p1::MSG_LEADER_BROADCAST_REMOVE* temp = msg_.msg_leader_broadcast_remove_;
    msg_.msg_leader_broadcast_remove_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MSG_BASE::set_allocated_msg_leader_broadcast_remove(::p1::MSG_LEADER_BROADCAST_REMOVE* msg_leader_broadcast_remove) {
  clear_msg();
  if (msg_leader_broadcast_remove) {
    set_has_msg_leader_broadcast_remove();
    msg_.msg_leader_broadcast_remove_ = msg_leader_broadcast_remove;
  }
  // @@protoc_insertion_point(field_set_allocated:t1.MSG_BASE.MSG_LEADER_BROADCAST_REMOVE)
}

inline bool MSG_BASE::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void MSG_BASE::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline MSG_BASE::MsgCase MSG_BASE::msg_case() const {
  return MSG_BASE::MsgCase(_oneof_case_[0]);
}
inline const MSG_BASE* MSG_BASE::internal_default_instance() {
  return &MSG_BASE_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace t1

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_t1_2eproto__INCLUDED
