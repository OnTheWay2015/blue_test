// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: p1.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_p1_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_p1_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_p1_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_p1_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_p1_2eproto;
namespace p1 {
class MSG_HEARTBEAT;
class MSG_HEARTBEATDefaultTypeInternal;
extern MSG_HEARTBEATDefaultTypeInternal _MSG_HEARTBEAT_default_instance_;
class MSG_HEARTBEAT_RES;
class MSG_HEARTBEAT_RESDefaultTypeInternal;
extern MSG_HEARTBEAT_RESDefaultTypeInternal _MSG_HEARTBEAT_RES_default_instance_;
class MSG_LEADER_BROADCAST_ADD;
class MSG_LEADER_BROADCAST_ADDDefaultTypeInternal;
extern MSG_LEADER_BROADCAST_ADDDefaultTypeInternal _MSG_LEADER_BROADCAST_ADD_default_instance_;
class MSG_LEADER_BROADCAST_REMOVE;
class MSG_LEADER_BROADCAST_REMOVEDefaultTypeInternal;
extern MSG_LEADER_BROADCAST_REMOVEDefaultTypeInternal _MSG_LEADER_BROADCAST_REMOVE_default_instance_;
class MSG_LEADER_REG;
class MSG_LEADER_REGDefaultTypeInternal;
extern MSG_LEADER_REGDefaultTypeInternal _MSG_LEADER_REG_default_instance_;
class MSG_LEADER_REG_RES;
class MSG_LEADER_REG_RESDefaultTypeInternal;
extern MSG_LEADER_REG_RESDefaultTypeInternal _MSG_LEADER_REG_RES_default_instance_;
class MSG_LEADER_SERVER_LIST;
class MSG_LEADER_SERVER_LISTDefaultTypeInternal;
extern MSG_LEADER_SERVER_LISTDefaultTypeInternal _MSG_LEADER_SERVER_LIST_default_instance_;
class MSG_LEADER_SERVER_LIST_RES;
class MSG_LEADER_SERVER_LIST_RESDefaultTypeInternal;
extern MSG_LEADER_SERVER_LIST_RESDefaultTypeInternal _MSG_LEADER_SERVER_LIST_RES_default_instance_;
class MSG_TEST;
class MSG_TESTDefaultTypeInternal;
extern MSG_TESTDefaultTypeInternal _MSG_TEST_default_instance_;
class MSG_TEST_RES;
class MSG_TEST_RESDefaultTypeInternal;
extern MSG_TEST_RESDefaultTypeInternal _MSG_TEST_RES_default_instance_;
class SERVER_INFO;
class SERVER_INFODefaultTypeInternal;
extern SERVER_INFODefaultTypeInternal _SERVER_INFO_default_instance_;
}  // namespace p1
PROTOBUF_NAMESPACE_OPEN
template<> ::p1::MSG_HEARTBEAT* Arena::CreateMaybeMessage<::p1::MSG_HEARTBEAT>(Arena*);
template<> ::p1::MSG_HEARTBEAT_RES* Arena::CreateMaybeMessage<::p1::MSG_HEARTBEAT_RES>(Arena*);
template<> ::p1::MSG_LEADER_BROADCAST_ADD* Arena::CreateMaybeMessage<::p1::MSG_LEADER_BROADCAST_ADD>(Arena*);
template<> ::p1::MSG_LEADER_BROADCAST_REMOVE* Arena::CreateMaybeMessage<::p1::MSG_LEADER_BROADCAST_REMOVE>(Arena*);
template<> ::p1::MSG_LEADER_REG* Arena::CreateMaybeMessage<::p1::MSG_LEADER_REG>(Arena*);
template<> ::p1::MSG_LEADER_REG_RES* Arena::CreateMaybeMessage<::p1::MSG_LEADER_REG_RES>(Arena*);
template<> ::p1::MSG_LEADER_SERVER_LIST* Arena::CreateMaybeMessage<::p1::MSG_LEADER_SERVER_LIST>(Arena*);
template<> ::p1::MSG_LEADER_SERVER_LIST_RES* Arena::CreateMaybeMessage<::p1::MSG_LEADER_SERVER_LIST_RES>(Arena*);
template<> ::p1::MSG_TEST* Arena::CreateMaybeMessage<::p1::MSG_TEST>(Arena*);
template<> ::p1::MSG_TEST_RES* Arena::CreateMaybeMessage<::p1::MSG_TEST_RES>(Arena*);
template<> ::p1::SERVER_INFO* Arena::CreateMaybeMessage<::p1::SERVER_INFO>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace p1 {

// ===================================================================

class MSG_TEST :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p1.MSG_TEST) */ {
 public:
  MSG_TEST();
  virtual ~MSG_TEST();

  MSG_TEST(const MSG_TEST& from);
  MSG_TEST(MSG_TEST&& from) noexcept
    : MSG_TEST() {
    *this = ::std::move(from);
  }

  inline MSG_TEST& operator=(const MSG_TEST& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_TEST& operator=(MSG_TEST&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_TEST& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_TEST* internal_default_instance() {
    return reinterpret_cast<const MSG_TEST*>(
               &_MSG_TEST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MSG_TEST& a, MSG_TEST& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_TEST* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_TEST* New() const final {
    return CreateMaybeMessage<MSG_TEST>(nullptr);
  }

  MSG_TEST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_TEST>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_TEST& from);
  void MergeFrom(const MSG_TEST& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_TEST* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p1.MSG_TEST";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_p1_2eproto);
    return ::descriptor_table_p1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:p1.MSG_TEST)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p1_2eproto;
};
// -------------------------------------------------------------------

class MSG_TEST_RES :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p1.MSG_TEST_RES) */ {
 public:
  MSG_TEST_RES();
  virtual ~MSG_TEST_RES();

  MSG_TEST_RES(const MSG_TEST_RES& from);
  MSG_TEST_RES(MSG_TEST_RES&& from) noexcept
    : MSG_TEST_RES() {
    *this = ::std::move(from);
  }

  inline MSG_TEST_RES& operator=(const MSG_TEST_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_TEST_RES& operator=(MSG_TEST_RES&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_TEST_RES& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_TEST_RES* internal_default_instance() {
    return reinterpret_cast<const MSG_TEST_RES*>(
               &_MSG_TEST_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MSG_TEST_RES& a, MSG_TEST_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_TEST_RES* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_TEST_RES* New() const final {
    return CreateMaybeMessage<MSG_TEST_RES>(nullptr);
  }

  MSG_TEST_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_TEST_RES>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_TEST_RES& from);
  void MergeFrom(const MSG_TEST_RES& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_TEST_RES* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p1.MSG_TEST_RES";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_p1_2eproto);
    return ::descriptor_table_p1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameResFieldNumber = 1,
    kA1FieldNumber = 3,
    kA2FieldNumber = 4,
  };
  // string name_res = 1;
  void clear_name_res();
  const std::string& name_res() const;
  void set_name_res(const std::string& value);
  void set_name_res(std::string&& value);
  void set_name_res(const char* value);
  void set_name_res(const char* value, size_t size);
  std::string* mutable_name_res();
  std::string* release_name_res();
  void set_allocated_name_res(std::string* name_res);
  private:
  const std::string& _internal_name_res() const;
  void _internal_set_name_res(const std::string& value);
  std::string* _internal_mutable_name_res();
  public:

  // int32 a1 = 3;
  void clear_a1();
  ::PROTOBUF_NAMESPACE_ID::int32 a1() const;
  void set_a1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_a1() const;
  void _internal_set_a1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 a2 = 4;
  void clear_a2();
  ::PROTOBUF_NAMESPACE_ID::int32 a2() const;
  void set_a2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_a2() const;
  void _internal_set_a2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:p1.MSG_TEST_RES)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_res_;
  ::PROTOBUF_NAMESPACE_ID::int32 a1_;
  ::PROTOBUF_NAMESPACE_ID::int32 a2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p1_2eproto;
};
// -------------------------------------------------------------------

class SERVER_INFO :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p1.SERVER_INFO) */ {
 public:
  SERVER_INFO();
  virtual ~SERVER_INFO();

  SERVER_INFO(const SERVER_INFO& from);
  SERVER_INFO(SERVER_INFO&& from) noexcept
    : SERVER_INFO() {
    *this = ::std::move(from);
  }

  inline SERVER_INFO& operator=(const SERVER_INFO& from) {
    CopyFrom(from);
    return *this;
  }
  inline SERVER_INFO& operator=(SERVER_INFO&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SERVER_INFO& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SERVER_INFO* internal_default_instance() {
    return reinterpret_cast<const SERVER_INFO*>(
               &_SERVER_INFO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SERVER_INFO& a, SERVER_INFO& b) {
    a.Swap(&b);
  }
  inline void Swap(SERVER_INFO* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SERVER_INFO* New() const final {
    return CreateMaybeMessage<SERVER_INFO>(nullptr);
  }

  SERVER_INFO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SERVER_INFO>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SERVER_INFO& from);
  void MergeFrom(const SERVER_INFO& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SERVER_INFO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p1.SERVER_INFO";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_p1_2eproto);
    return ::descriptor_table_p1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpstrFieldNumber = 3,
    kSvridFieldNumber = 1,
    kTypeFieldNumber = 2,
    kPortFieldNumber = 4,
  };
  // string ipstr = 3;
  void clear_ipstr();
  const std::string& ipstr() const;
  void set_ipstr(const std::string& value);
  void set_ipstr(std::string&& value);
  void set_ipstr(const char* value);
  void set_ipstr(const char* value, size_t size);
  std::string* mutable_ipstr();
  std::string* release_ipstr();
  void set_allocated_ipstr(std::string* ipstr);
  private:
  const std::string& _internal_ipstr() const;
  void _internal_set_ipstr(const std::string& value);
  std::string* _internal_mutable_ipstr();
  public:

  // int64 svrid = 1;
  void clear_svrid();
  ::PROTOBUF_NAMESPACE_ID::int64 svrid() const;
  void set_svrid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_svrid() const;
  void _internal_set_svrid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 port = 4;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:p1.SERVER_INFO)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipstr_;
  ::PROTOBUF_NAMESPACE_ID::int64 svrid_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p1_2eproto;
};
// -------------------------------------------------------------------

class MSG_HEARTBEAT :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p1.MSG_HEARTBEAT) */ {
 public:
  MSG_HEARTBEAT();
  virtual ~MSG_HEARTBEAT();

  MSG_HEARTBEAT(const MSG_HEARTBEAT& from);
  MSG_HEARTBEAT(MSG_HEARTBEAT&& from) noexcept
    : MSG_HEARTBEAT() {
    *this = ::std::move(from);
  }

  inline MSG_HEARTBEAT& operator=(const MSG_HEARTBEAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_HEARTBEAT& operator=(MSG_HEARTBEAT&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_HEARTBEAT& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_HEARTBEAT* internal_default_instance() {
    return reinterpret_cast<const MSG_HEARTBEAT*>(
               &_MSG_HEARTBEAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MSG_HEARTBEAT& a, MSG_HEARTBEAT& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_HEARTBEAT* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_HEARTBEAT* New() const final {
    return CreateMaybeMessage<MSG_HEARTBEAT>(nullptr);
  }

  MSG_HEARTBEAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_HEARTBEAT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_HEARTBEAT& from);
  void MergeFrom(const MSG_HEARTBEAT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_HEARTBEAT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p1.MSG_HEARTBEAT";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_p1_2eproto);
    return ::descriptor_table_p1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:p1.MSG_HEARTBEAT)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p1_2eproto;
};
// -------------------------------------------------------------------

class MSG_HEARTBEAT_RES :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p1.MSG_HEARTBEAT_RES) */ {
 public:
  MSG_HEARTBEAT_RES();
  virtual ~MSG_HEARTBEAT_RES();

  MSG_HEARTBEAT_RES(const MSG_HEARTBEAT_RES& from);
  MSG_HEARTBEAT_RES(MSG_HEARTBEAT_RES&& from) noexcept
    : MSG_HEARTBEAT_RES() {
    *this = ::std::move(from);
  }

  inline MSG_HEARTBEAT_RES& operator=(const MSG_HEARTBEAT_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_HEARTBEAT_RES& operator=(MSG_HEARTBEAT_RES&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_HEARTBEAT_RES& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_HEARTBEAT_RES* internal_default_instance() {
    return reinterpret_cast<const MSG_HEARTBEAT_RES*>(
               &_MSG_HEARTBEAT_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MSG_HEARTBEAT_RES& a, MSG_HEARTBEAT_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_HEARTBEAT_RES* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_HEARTBEAT_RES* New() const final {
    return CreateMaybeMessage<MSG_HEARTBEAT_RES>(nullptr);
  }

  MSG_HEARTBEAT_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_HEARTBEAT_RES>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_HEARTBEAT_RES& from);
  void MergeFrom(const MSG_HEARTBEAT_RES& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_HEARTBEAT_RES* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p1.MSG_HEARTBEAT_RES";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_p1_2eproto);
    return ::descriptor_table_p1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:p1.MSG_HEARTBEAT_RES)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p1_2eproto;
};
// -------------------------------------------------------------------

class MSG_LEADER_REG :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p1.MSG_LEADER_REG) */ {
 public:
  MSG_LEADER_REG();
  virtual ~MSG_LEADER_REG();

  MSG_LEADER_REG(const MSG_LEADER_REG& from);
  MSG_LEADER_REG(MSG_LEADER_REG&& from) noexcept
    : MSG_LEADER_REG() {
    *this = ::std::move(from);
  }

  inline MSG_LEADER_REG& operator=(const MSG_LEADER_REG& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_LEADER_REG& operator=(MSG_LEADER_REG&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_LEADER_REG& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_LEADER_REG* internal_default_instance() {
    return reinterpret_cast<const MSG_LEADER_REG*>(
               &_MSG_LEADER_REG_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MSG_LEADER_REG& a, MSG_LEADER_REG& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_LEADER_REG* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_LEADER_REG* New() const final {
    return CreateMaybeMessage<MSG_LEADER_REG>(nullptr);
  }

  MSG_LEADER_REG* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_LEADER_REG>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_LEADER_REG& from);
  void MergeFrom(const MSG_LEADER_REG& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_LEADER_REG* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p1.MSG_LEADER_REG";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_p1_2eproto);
    return ::descriptor_table_p1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .p1.SERVER_INFO info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::p1::SERVER_INFO& info() const;
  ::p1::SERVER_INFO* release_info();
  ::p1::SERVER_INFO* mutable_info();
  void set_allocated_info(::p1::SERVER_INFO* info);
  private:
  const ::p1::SERVER_INFO& _internal_info() const;
  ::p1::SERVER_INFO* _internal_mutable_info();
  public:

  // @@protoc_insertion_point(class_scope:p1.MSG_LEADER_REG)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::p1::SERVER_INFO* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p1_2eproto;
};
// -------------------------------------------------------------------

class MSG_LEADER_SERVER_LIST :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p1.MSG_LEADER_SERVER_LIST) */ {
 public:
  MSG_LEADER_SERVER_LIST();
  virtual ~MSG_LEADER_SERVER_LIST();

  MSG_LEADER_SERVER_LIST(const MSG_LEADER_SERVER_LIST& from);
  MSG_LEADER_SERVER_LIST(MSG_LEADER_SERVER_LIST&& from) noexcept
    : MSG_LEADER_SERVER_LIST() {
    *this = ::std::move(from);
  }

  inline MSG_LEADER_SERVER_LIST& operator=(const MSG_LEADER_SERVER_LIST& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_LEADER_SERVER_LIST& operator=(MSG_LEADER_SERVER_LIST&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_LEADER_SERVER_LIST& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_LEADER_SERVER_LIST* internal_default_instance() {
    return reinterpret_cast<const MSG_LEADER_SERVER_LIST*>(
               &_MSG_LEADER_SERVER_LIST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MSG_LEADER_SERVER_LIST& a, MSG_LEADER_SERVER_LIST& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_LEADER_SERVER_LIST* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_LEADER_SERVER_LIST* New() const final {
    return CreateMaybeMessage<MSG_LEADER_SERVER_LIST>(nullptr);
  }

  MSG_LEADER_SERVER_LIST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_LEADER_SERVER_LIST>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_LEADER_SERVER_LIST& from);
  void MergeFrom(const MSG_LEADER_SERVER_LIST& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_LEADER_SERVER_LIST* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p1.MSG_LEADER_SERVER_LIST";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_p1_2eproto);
    return ::descriptor_table_p1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:p1.MSG_LEADER_SERVER_LIST)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p1_2eproto;
};
// -------------------------------------------------------------------

class MSG_LEADER_BROADCAST_ADD :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p1.MSG_LEADER_BROADCAST_ADD) */ {
 public:
  MSG_LEADER_BROADCAST_ADD();
  virtual ~MSG_LEADER_BROADCAST_ADD();

  MSG_LEADER_BROADCAST_ADD(const MSG_LEADER_BROADCAST_ADD& from);
  MSG_LEADER_BROADCAST_ADD(MSG_LEADER_BROADCAST_ADD&& from) noexcept
    : MSG_LEADER_BROADCAST_ADD() {
    *this = ::std::move(from);
  }

  inline MSG_LEADER_BROADCAST_ADD& operator=(const MSG_LEADER_BROADCAST_ADD& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_LEADER_BROADCAST_ADD& operator=(MSG_LEADER_BROADCAST_ADD&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_LEADER_BROADCAST_ADD& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_LEADER_BROADCAST_ADD* internal_default_instance() {
    return reinterpret_cast<const MSG_LEADER_BROADCAST_ADD*>(
               &_MSG_LEADER_BROADCAST_ADD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MSG_LEADER_BROADCAST_ADD& a, MSG_LEADER_BROADCAST_ADD& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_LEADER_BROADCAST_ADD* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_LEADER_BROADCAST_ADD* New() const final {
    return CreateMaybeMessage<MSG_LEADER_BROADCAST_ADD>(nullptr);
  }

  MSG_LEADER_BROADCAST_ADD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_LEADER_BROADCAST_ADD>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_LEADER_BROADCAST_ADD& from);
  void MergeFrom(const MSG_LEADER_BROADCAST_ADD& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_LEADER_BROADCAST_ADD* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p1.MSG_LEADER_BROADCAST_ADD";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_p1_2eproto);
    return ::descriptor_table_p1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .p1.SERVER_INFO info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::p1::SERVER_INFO& info() const;
  ::p1::SERVER_INFO* release_info();
  ::p1::SERVER_INFO* mutable_info();
  void set_allocated_info(::p1::SERVER_INFO* info);
  private:
  const ::p1::SERVER_INFO& _internal_info() const;
  ::p1::SERVER_INFO* _internal_mutable_info();
  public:

  // @@protoc_insertion_point(class_scope:p1.MSG_LEADER_BROADCAST_ADD)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::p1::SERVER_INFO* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p1_2eproto;
};
// -------------------------------------------------------------------

class MSG_LEADER_BROADCAST_REMOVE :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p1.MSG_LEADER_BROADCAST_REMOVE) */ {
 public:
  MSG_LEADER_BROADCAST_REMOVE();
  virtual ~MSG_LEADER_BROADCAST_REMOVE();

  MSG_LEADER_BROADCAST_REMOVE(const MSG_LEADER_BROADCAST_REMOVE& from);
  MSG_LEADER_BROADCAST_REMOVE(MSG_LEADER_BROADCAST_REMOVE&& from) noexcept
    : MSG_LEADER_BROADCAST_REMOVE() {
    *this = ::std::move(from);
  }

  inline MSG_LEADER_BROADCAST_REMOVE& operator=(const MSG_LEADER_BROADCAST_REMOVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_LEADER_BROADCAST_REMOVE& operator=(MSG_LEADER_BROADCAST_REMOVE&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_LEADER_BROADCAST_REMOVE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_LEADER_BROADCAST_REMOVE* internal_default_instance() {
    return reinterpret_cast<const MSG_LEADER_BROADCAST_REMOVE*>(
               &_MSG_LEADER_BROADCAST_REMOVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MSG_LEADER_BROADCAST_REMOVE& a, MSG_LEADER_BROADCAST_REMOVE& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_LEADER_BROADCAST_REMOVE* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_LEADER_BROADCAST_REMOVE* New() const final {
    return CreateMaybeMessage<MSG_LEADER_BROADCAST_REMOVE>(nullptr);
  }

  MSG_LEADER_BROADCAST_REMOVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_LEADER_BROADCAST_REMOVE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_LEADER_BROADCAST_REMOVE& from);
  void MergeFrom(const MSG_LEADER_BROADCAST_REMOVE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_LEADER_BROADCAST_REMOVE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p1.MSG_LEADER_BROADCAST_REMOVE";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_p1_2eproto);
    return ::descriptor_table_p1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .p1.SERVER_INFO info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::p1::SERVER_INFO& info() const;
  ::p1::SERVER_INFO* release_info();
  ::p1::SERVER_INFO* mutable_info();
  void set_allocated_info(::p1::SERVER_INFO* info);
  private:
  const ::p1::SERVER_INFO& _internal_info() const;
  ::p1::SERVER_INFO* _internal_mutable_info();
  public:

  // @@protoc_insertion_point(class_scope:p1.MSG_LEADER_BROADCAST_REMOVE)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::p1::SERVER_INFO* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p1_2eproto;
};
// -------------------------------------------------------------------

class MSG_LEADER_REG_RES :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p1.MSG_LEADER_REG_RES) */ {
 public:
  MSG_LEADER_REG_RES();
  virtual ~MSG_LEADER_REG_RES();

  MSG_LEADER_REG_RES(const MSG_LEADER_REG_RES& from);
  MSG_LEADER_REG_RES(MSG_LEADER_REG_RES&& from) noexcept
    : MSG_LEADER_REG_RES() {
    *this = ::std::move(from);
  }

  inline MSG_LEADER_REG_RES& operator=(const MSG_LEADER_REG_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_LEADER_REG_RES& operator=(MSG_LEADER_REG_RES&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_LEADER_REG_RES& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_LEADER_REG_RES* internal_default_instance() {
    return reinterpret_cast<const MSG_LEADER_REG_RES*>(
               &_MSG_LEADER_REG_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MSG_LEADER_REG_RES& a, MSG_LEADER_REG_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_LEADER_REG_RES* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_LEADER_REG_RES* New() const final {
    return CreateMaybeMessage<MSG_LEADER_REG_RES>(nullptr);
  }

  MSG_LEADER_REG_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_LEADER_REG_RES>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_LEADER_REG_RES& from);
  void MergeFrom(const MSG_LEADER_REG_RES& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_LEADER_REG_RES* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p1.MSG_LEADER_REG_RES";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_p1_2eproto);
    return ::descriptor_table_p1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:p1.MSG_LEADER_REG_RES)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p1_2eproto;
};
// -------------------------------------------------------------------

class MSG_LEADER_SERVER_LIST_RES :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p1.MSG_LEADER_SERVER_LIST_RES) */ {
 public:
  MSG_LEADER_SERVER_LIST_RES();
  virtual ~MSG_LEADER_SERVER_LIST_RES();

  MSG_LEADER_SERVER_LIST_RES(const MSG_LEADER_SERVER_LIST_RES& from);
  MSG_LEADER_SERVER_LIST_RES(MSG_LEADER_SERVER_LIST_RES&& from) noexcept
    : MSG_LEADER_SERVER_LIST_RES() {
    *this = ::std::move(from);
  }

  inline MSG_LEADER_SERVER_LIST_RES& operator=(const MSG_LEADER_SERVER_LIST_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_LEADER_SERVER_LIST_RES& operator=(MSG_LEADER_SERVER_LIST_RES&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_LEADER_SERVER_LIST_RES& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_LEADER_SERVER_LIST_RES* internal_default_instance() {
    return reinterpret_cast<const MSG_LEADER_SERVER_LIST_RES*>(
               &_MSG_LEADER_SERVER_LIST_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MSG_LEADER_SERVER_LIST_RES& a, MSG_LEADER_SERVER_LIST_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_LEADER_SERVER_LIST_RES* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_LEADER_SERVER_LIST_RES* New() const final {
    return CreateMaybeMessage<MSG_LEADER_SERVER_LIST_RES>(nullptr);
  }

  MSG_LEADER_SERVER_LIST_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_LEADER_SERVER_LIST_RES>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_LEADER_SERVER_LIST_RES& from);
  void MergeFrom(const MSG_LEADER_SERVER_LIST_RES& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_LEADER_SERVER_LIST_RES* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p1.MSG_LEADER_SERVER_LIST_RES";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_p1_2eproto);
    return ::descriptor_table_p1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 1,
  };
  // repeated .p1.SERVER_INFO infos = 1;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::p1::SERVER_INFO* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p1::SERVER_INFO >*
      mutable_infos();
  private:
  const ::p1::SERVER_INFO& _internal_infos(int index) const;
  ::p1::SERVER_INFO* _internal_add_infos();
  public:
  const ::p1::SERVER_INFO& infos(int index) const;
  ::p1::SERVER_INFO* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p1::SERVER_INFO >&
      infos() const;

  // @@protoc_insertion_point(class_scope:p1.MSG_LEADER_SERVER_LIST_RES)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p1::SERVER_INFO > infos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p1_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MSG_TEST

// string name = 1;
inline void MSG_TEST::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MSG_TEST::name() const {
  // @@protoc_insertion_point(field_get:p1.MSG_TEST.name)
  return _internal_name();
}
inline void MSG_TEST::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:p1.MSG_TEST.name)
}
inline std::string* MSG_TEST::mutable_name() {
  // @@protoc_insertion_point(field_mutable:p1.MSG_TEST.name)
  return _internal_mutable_name();
}
inline const std::string& MSG_TEST::_internal_name() const {
  return name_.GetNoArena();
}
inline void MSG_TEST::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_TEST::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p1.MSG_TEST.name)
}
inline void MSG_TEST::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p1.MSG_TEST.name)
}
inline void MSG_TEST::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p1.MSG_TEST.name)
}
inline std::string* MSG_TEST::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_TEST::release_name() {
  // @@protoc_insertion_point(field_release:p1.MSG_TEST.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_TEST::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:p1.MSG_TEST.name)
}

// -------------------------------------------------------------------

// MSG_TEST_RES

// string name_res = 1;
inline void MSG_TEST_RES::clear_name_res() {
  name_res_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MSG_TEST_RES::name_res() const {
  // @@protoc_insertion_point(field_get:p1.MSG_TEST_RES.name_res)
  return _internal_name_res();
}
inline void MSG_TEST_RES::set_name_res(const std::string& value) {
  _internal_set_name_res(value);
  // @@protoc_insertion_point(field_set:p1.MSG_TEST_RES.name_res)
}
inline std::string* MSG_TEST_RES::mutable_name_res() {
  // @@protoc_insertion_point(field_mutable:p1.MSG_TEST_RES.name_res)
  return _internal_mutable_name_res();
}
inline const std::string& MSG_TEST_RES::_internal_name_res() const {
  return name_res_.GetNoArena();
}
inline void MSG_TEST_RES::_internal_set_name_res(const std::string& value) {
  
  name_res_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_TEST_RES::set_name_res(std::string&& value) {
  
  name_res_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p1.MSG_TEST_RES.name_res)
}
inline void MSG_TEST_RES::set_name_res(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_res_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p1.MSG_TEST_RES.name_res)
}
inline void MSG_TEST_RES::set_name_res(const char* value, size_t size) {
  
  name_res_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p1.MSG_TEST_RES.name_res)
}
inline std::string* MSG_TEST_RES::_internal_mutable_name_res() {
  
  return name_res_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_TEST_RES::release_name_res() {
  // @@protoc_insertion_point(field_release:p1.MSG_TEST_RES.name_res)
  
  return name_res_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_TEST_RES::set_allocated_name_res(std::string* name_res) {
  if (name_res != nullptr) {
    
  } else {
    
  }
  name_res_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name_res);
  // @@protoc_insertion_point(field_set_allocated:p1.MSG_TEST_RES.name_res)
}

// int32 a1 = 3;
inline void MSG_TEST_RES::clear_a1() {
  a1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MSG_TEST_RES::_internal_a1() const {
  return a1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MSG_TEST_RES::a1() const {
  // @@protoc_insertion_point(field_get:p1.MSG_TEST_RES.a1)
  return _internal_a1();
}
inline void MSG_TEST_RES::_internal_set_a1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  a1_ = value;
}
inline void MSG_TEST_RES::set_a1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_a1(value);
  // @@protoc_insertion_point(field_set:p1.MSG_TEST_RES.a1)
}

// int32 a2 = 4;
inline void MSG_TEST_RES::clear_a2() {
  a2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MSG_TEST_RES::_internal_a2() const {
  return a2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MSG_TEST_RES::a2() const {
  // @@protoc_insertion_point(field_get:p1.MSG_TEST_RES.a2)
  return _internal_a2();
}
inline void MSG_TEST_RES::_internal_set_a2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  a2_ = value;
}
inline void MSG_TEST_RES::set_a2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_a2(value);
  // @@protoc_insertion_point(field_set:p1.MSG_TEST_RES.a2)
}

// -------------------------------------------------------------------

// SERVER_INFO

// int64 svrid = 1;
inline void SERVER_INFO::clear_svrid() {
  svrid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SERVER_INFO::_internal_svrid() const {
  return svrid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SERVER_INFO::svrid() const {
  // @@protoc_insertion_point(field_get:p1.SERVER_INFO.svrid)
  return _internal_svrid();
}
inline void SERVER_INFO::_internal_set_svrid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  svrid_ = value;
}
inline void SERVER_INFO::set_svrid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_svrid(value);
  // @@protoc_insertion_point(field_set:p1.SERVER_INFO.svrid)
}

// int32 type = 2;
inline void SERVER_INFO::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SERVER_INFO::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SERVER_INFO::type() const {
  // @@protoc_insertion_point(field_get:p1.SERVER_INFO.type)
  return _internal_type();
}
inline void SERVER_INFO::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void SERVER_INFO::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:p1.SERVER_INFO.type)
}

// string ipstr = 3;
inline void SERVER_INFO::clear_ipstr() {
  ipstr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SERVER_INFO::ipstr() const {
  // @@protoc_insertion_point(field_get:p1.SERVER_INFO.ipstr)
  return _internal_ipstr();
}
inline void SERVER_INFO::set_ipstr(const std::string& value) {
  _internal_set_ipstr(value);
  // @@protoc_insertion_point(field_set:p1.SERVER_INFO.ipstr)
}
inline std::string* SERVER_INFO::mutable_ipstr() {
  // @@protoc_insertion_point(field_mutable:p1.SERVER_INFO.ipstr)
  return _internal_mutable_ipstr();
}
inline const std::string& SERVER_INFO::_internal_ipstr() const {
  return ipstr_.GetNoArena();
}
inline void SERVER_INFO::_internal_set_ipstr(const std::string& value) {
  
  ipstr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SERVER_INFO::set_ipstr(std::string&& value) {
  
  ipstr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p1.SERVER_INFO.ipstr)
}
inline void SERVER_INFO::set_ipstr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ipstr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p1.SERVER_INFO.ipstr)
}
inline void SERVER_INFO::set_ipstr(const char* value, size_t size) {
  
  ipstr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p1.SERVER_INFO.ipstr)
}
inline std::string* SERVER_INFO::_internal_mutable_ipstr() {
  
  return ipstr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SERVER_INFO::release_ipstr() {
  // @@protoc_insertion_point(field_release:p1.SERVER_INFO.ipstr)
  
  return ipstr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SERVER_INFO::set_allocated_ipstr(std::string* ipstr) {
  if (ipstr != nullptr) {
    
  } else {
    
  }
  ipstr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipstr);
  // @@protoc_insertion_point(field_set_allocated:p1.SERVER_INFO.ipstr)
}

// int32 port = 4;
inline void SERVER_INFO::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SERVER_INFO::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SERVER_INFO::port() const {
  // @@protoc_insertion_point(field_get:p1.SERVER_INFO.port)
  return _internal_port();
}
inline void SERVER_INFO::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void SERVER_INFO::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:p1.SERVER_INFO.port)
}

// -------------------------------------------------------------------

// MSG_HEARTBEAT

// -------------------------------------------------------------------

// MSG_HEARTBEAT_RES

// -------------------------------------------------------------------

// MSG_LEADER_REG

// .p1.SERVER_INFO info = 1;
inline bool MSG_LEADER_REG::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool MSG_LEADER_REG::has_info() const {
  return _internal_has_info();
}
inline void MSG_LEADER_REG::clear_info() {
  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::p1::SERVER_INFO& MSG_LEADER_REG::_internal_info() const {
  const ::p1::SERVER_INFO* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::p1::SERVER_INFO*>(
      &::p1::_SERVER_INFO_default_instance_);
}
inline const ::p1::SERVER_INFO& MSG_LEADER_REG::info() const {
  // @@protoc_insertion_point(field_get:p1.MSG_LEADER_REG.info)
  return _internal_info();
}
inline ::p1::SERVER_INFO* MSG_LEADER_REG::release_info() {
  // @@protoc_insertion_point(field_release:p1.MSG_LEADER_REG.info)
  
  ::p1::SERVER_INFO* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::p1::SERVER_INFO* MSG_LEADER_REG::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::p1::SERVER_INFO>(GetArenaNoVirtual());
    info_ = p;
  }
  return info_;
}
inline ::p1::SERVER_INFO* MSG_LEADER_REG::mutable_info() {
  // @@protoc_insertion_point(field_mutable:p1.MSG_LEADER_REG.info)
  return _internal_mutable_info();
}
inline void MSG_LEADER_REG::set_allocated_info(::p1::SERVER_INFO* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:p1.MSG_LEADER_REG.info)
}

// -------------------------------------------------------------------

// MSG_LEADER_SERVER_LIST

// -------------------------------------------------------------------

// MSG_LEADER_BROADCAST_ADD

// .p1.SERVER_INFO info = 1;
inline bool MSG_LEADER_BROADCAST_ADD::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool MSG_LEADER_BROADCAST_ADD::has_info() const {
  return _internal_has_info();
}
inline void MSG_LEADER_BROADCAST_ADD::clear_info() {
  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::p1::SERVER_INFO& MSG_LEADER_BROADCAST_ADD::_internal_info() const {
  const ::p1::SERVER_INFO* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::p1::SERVER_INFO*>(
      &::p1::_SERVER_INFO_default_instance_);
}
inline const ::p1::SERVER_INFO& MSG_LEADER_BROADCAST_ADD::info() const {
  // @@protoc_insertion_point(field_get:p1.MSG_LEADER_BROADCAST_ADD.info)
  return _internal_info();
}
inline ::p1::SERVER_INFO* MSG_LEADER_BROADCAST_ADD::release_info() {
  // @@protoc_insertion_point(field_release:p1.MSG_LEADER_BROADCAST_ADD.info)
  
  ::p1::SERVER_INFO* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::p1::SERVER_INFO* MSG_LEADER_BROADCAST_ADD::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::p1::SERVER_INFO>(GetArenaNoVirtual());
    info_ = p;
  }
  return info_;
}
inline ::p1::SERVER_INFO* MSG_LEADER_BROADCAST_ADD::mutable_info() {
  // @@protoc_insertion_point(field_mutable:p1.MSG_LEADER_BROADCAST_ADD.info)
  return _internal_mutable_info();
}
inline void MSG_LEADER_BROADCAST_ADD::set_allocated_info(::p1::SERVER_INFO* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:p1.MSG_LEADER_BROADCAST_ADD.info)
}

// -------------------------------------------------------------------

// MSG_LEADER_BROADCAST_REMOVE

// .p1.SERVER_INFO info = 1;
inline bool MSG_LEADER_BROADCAST_REMOVE::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool MSG_LEADER_BROADCAST_REMOVE::has_info() const {
  return _internal_has_info();
}
inline void MSG_LEADER_BROADCAST_REMOVE::clear_info() {
  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::p1::SERVER_INFO& MSG_LEADER_BROADCAST_REMOVE::_internal_info() const {
  const ::p1::SERVER_INFO* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::p1::SERVER_INFO*>(
      &::p1::_SERVER_INFO_default_instance_);
}
inline const ::p1::SERVER_INFO& MSG_LEADER_BROADCAST_REMOVE::info() const {
  // @@protoc_insertion_point(field_get:p1.MSG_LEADER_BROADCAST_REMOVE.info)
  return _internal_info();
}
inline ::p1::SERVER_INFO* MSG_LEADER_BROADCAST_REMOVE::release_info() {
  // @@protoc_insertion_point(field_release:p1.MSG_LEADER_BROADCAST_REMOVE.info)
  
  ::p1::SERVER_INFO* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::p1::SERVER_INFO* MSG_LEADER_BROADCAST_REMOVE::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::p1::SERVER_INFO>(GetArenaNoVirtual());
    info_ = p;
  }
  return info_;
}
inline ::p1::SERVER_INFO* MSG_LEADER_BROADCAST_REMOVE::mutable_info() {
  // @@protoc_insertion_point(field_mutable:p1.MSG_LEADER_BROADCAST_REMOVE.info)
  return _internal_mutable_info();
}
inline void MSG_LEADER_BROADCAST_REMOVE::set_allocated_info(::p1::SERVER_INFO* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:p1.MSG_LEADER_BROADCAST_REMOVE.info)
}

// -------------------------------------------------------------------

// MSG_LEADER_REG_RES

// int32 result = 1;
inline void MSG_LEADER_REG_RES::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MSG_LEADER_REG_RES::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MSG_LEADER_REG_RES::result() const {
  // @@protoc_insertion_point(field_get:p1.MSG_LEADER_REG_RES.result)
  return _internal_result();
}
inline void MSG_LEADER_REG_RES::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void MSG_LEADER_REG_RES::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:p1.MSG_LEADER_REG_RES.result)
}

// -------------------------------------------------------------------

// MSG_LEADER_SERVER_LIST_RES

// repeated .p1.SERVER_INFO infos = 1;
inline int MSG_LEADER_SERVER_LIST_RES::_internal_infos_size() const {
  return infos_.size();
}
inline int MSG_LEADER_SERVER_LIST_RES::infos_size() const {
  return _internal_infos_size();
}
inline void MSG_LEADER_SERVER_LIST_RES::clear_infos() {
  infos_.Clear();
}
inline ::p1::SERVER_INFO* MSG_LEADER_SERVER_LIST_RES::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:p1.MSG_LEADER_SERVER_LIST_RES.infos)
  return infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p1::SERVER_INFO >*
MSG_LEADER_SERVER_LIST_RES::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:p1.MSG_LEADER_SERVER_LIST_RES.infos)
  return &infos_;
}
inline const ::p1::SERVER_INFO& MSG_LEADER_SERVER_LIST_RES::_internal_infos(int index) const {
  return infos_.Get(index);
}
inline const ::p1::SERVER_INFO& MSG_LEADER_SERVER_LIST_RES::infos(int index) const {
  // @@protoc_insertion_point(field_get:p1.MSG_LEADER_SERVER_LIST_RES.infos)
  return _internal_infos(index);
}
inline ::p1::SERVER_INFO* MSG_LEADER_SERVER_LIST_RES::_internal_add_infos() {
  return infos_.Add();
}
inline ::p1::SERVER_INFO* MSG_LEADER_SERVER_LIST_RES::add_infos() {
  // @@protoc_insertion_point(field_add:p1.MSG_LEADER_SERVER_LIST_RES.infos)
  return _internal_add_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p1::SERVER_INFO >&
MSG_LEADER_SERVER_LIST_RES::infos() const {
  // @@protoc_insertion_point(field_list:p1.MSG_LEADER_SERVER_LIST_RES.infos)
  return infos_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace p1

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_p1_2eproto
