// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: p1.proto

#include "p1.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_p1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SERVER_INFO_p1_2eproto;
namespace p1 {
class MSG_TESTDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_TEST> _instance;
} _MSG_TEST_default_instance_;
class MSG_TEST_RESDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_TEST_RES> _instance;
} _MSG_TEST_RES_default_instance_;
class SERVER_INFODefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SERVER_INFO> _instance;
} _SERVER_INFO_default_instance_;
class MSG_HEARTBEATDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_HEARTBEAT> _instance;
} _MSG_HEARTBEAT_default_instance_;
class MSG_HEARTBEAT_RESDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_HEARTBEAT_RES> _instance;
} _MSG_HEARTBEAT_RES_default_instance_;
class MSG_LEADER_REGDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_LEADER_REG> _instance;
} _MSG_LEADER_REG_default_instance_;
class MSG_LEADER_SERVER_LISTDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_LEADER_SERVER_LIST> _instance;
} _MSG_LEADER_SERVER_LIST_default_instance_;
class MSG_LEADER_BROADCAST_ADDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_LEADER_BROADCAST_ADD> _instance;
} _MSG_LEADER_BROADCAST_ADD_default_instance_;
class MSG_LEADER_BROADCAST_REMOVEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_LEADER_BROADCAST_REMOVE> _instance;
} _MSG_LEADER_BROADCAST_REMOVE_default_instance_;
class MSG_LEADER_REG_RESDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_LEADER_REG_RES> _instance;
} _MSG_LEADER_REG_RES_default_instance_;
class MSG_LEADER_SERVER_LIST_RESDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_LEADER_SERVER_LIST_RES> _instance;
} _MSG_LEADER_SERVER_LIST_RES_default_instance_;
}  // namespace p1
static void InitDefaultsscc_info_MSG_HEARTBEAT_p1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::p1::_MSG_HEARTBEAT_default_instance_;
    new (ptr) ::p1::MSG_HEARTBEAT();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::p1::MSG_HEARTBEAT::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_HEARTBEAT_p1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_HEARTBEAT_p1_2eproto}, {}};

static void InitDefaultsscc_info_MSG_HEARTBEAT_RES_p1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::p1::_MSG_HEARTBEAT_RES_default_instance_;
    new (ptr) ::p1::MSG_HEARTBEAT_RES();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::p1::MSG_HEARTBEAT_RES::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_HEARTBEAT_RES_p1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_HEARTBEAT_RES_p1_2eproto}, {}};

static void InitDefaultsscc_info_MSG_LEADER_BROADCAST_ADD_p1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::p1::_MSG_LEADER_BROADCAST_ADD_default_instance_;
    new (ptr) ::p1::MSG_LEADER_BROADCAST_ADD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::p1::MSG_LEADER_BROADCAST_ADD::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_LEADER_BROADCAST_ADD_p1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_LEADER_BROADCAST_ADD_p1_2eproto}, {
      &scc_info_SERVER_INFO_p1_2eproto.base,}};

static void InitDefaultsscc_info_MSG_LEADER_BROADCAST_REMOVE_p1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::p1::_MSG_LEADER_BROADCAST_REMOVE_default_instance_;
    new (ptr) ::p1::MSG_LEADER_BROADCAST_REMOVE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::p1::MSG_LEADER_BROADCAST_REMOVE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_LEADER_BROADCAST_REMOVE_p1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_LEADER_BROADCAST_REMOVE_p1_2eproto}, {
      &scc_info_SERVER_INFO_p1_2eproto.base,}};

static void InitDefaultsscc_info_MSG_LEADER_REG_p1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::p1::_MSG_LEADER_REG_default_instance_;
    new (ptr) ::p1::MSG_LEADER_REG();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::p1::MSG_LEADER_REG::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_LEADER_REG_p1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_LEADER_REG_p1_2eproto}, {
      &scc_info_SERVER_INFO_p1_2eproto.base,}};

static void InitDefaultsscc_info_MSG_LEADER_REG_RES_p1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::p1::_MSG_LEADER_REG_RES_default_instance_;
    new (ptr) ::p1::MSG_LEADER_REG_RES();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::p1::MSG_LEADER_REG_RES::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_LEADER_REG_RES_p1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_LEADER_REG_RES_p1_2eproto}, {}};

static void InitDefaultsscc_info_MSG_LEADER_SERVER_LIST_p1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::p1::_MSG_LEADER_SERVER_LIST_default_instance_;
    new (ptr) ::p1::MSG_LEADER_SERVER_LIST();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::p1::MSG_LEADER_SERVER_LIST::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_LEADER_SERVER_LIST_p1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_LEADER_SERVER_LIST_p1_2eproto}, {}};

static void InitDefaultsscc_info_MSG_LEADER_SERVER_LIST_RES_p1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::p1::_MSG_LEADER_SERVER_LIST_RES_default_instance_;
    new (ptr) ::p1::MSG_LEADER_SERVER_LIST_RES();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::p1::MSG_LEADER_SERVER_LIST_RES::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_LEADER_SERVER_LIST_RES_p1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_LEADER_SERVER_LIST_RES_p1_2eproto}, {
      &scc_info_SERVER_INFO_p1_2eproto.base,}};

static void InitDefaultsscc_info_MSG_TEST_p1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::p1::_MSG_TEST_default_instance_;
    new (ptr) ::p1::MSG_TEST();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::p1::MSG_TEST::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_TEST_p1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_TEST_p1_2eproto}, {}};

static void InitDefaultsscc_info_MSG_TEST_RES_p1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::p1::_MSG_TEST_RES_default_instance_;
    new (ptr) ::p1::MSG_TEST_RES();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::p1::MSG_TEST_RES::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_TEST_RES_p1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_TEST_RES_p1_2eproto}, {}};

static void InitDefaultsscc_info_SERVER_INFO_p1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::p1::_SERVER_INFO_default_instance_;
    new (ptr) ::p1::SERVER_INFO();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::p1::SERVER_INFO::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SERVER_INFO_p1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SERVER_INFO_p1_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_p1_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_p1_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_p1_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_p1_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p1::MSG_TEST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::p1::MSG_TEST, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p1::MSG_TEST_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::p1::MSG_TEST_RES, name_res_),
  PROTOBUF_FIELD_OFFSET(::p1::MSG_TEST_RES, a1_),
  PROTOBUF_FIELD_OFFSET(::p1::MSG_TEST_RES, a2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p1::SERVER_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::p1::SERVER_INFO, svrid_),
  PROTOBUF_FIELD_OFFSET(::p1::SERVER_INFO, type_),
  PROTOBUF_FIELD_OFFSET(::p1::SERVER_INFO, ipstr_),
  PROTOBUF_FIELD_OFFSET(::p1::SERVER_INFO, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p1::MSG_HEARTBEAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p1::MSG_HEARTBEAT_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p1::MSG_LEADER_REG, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::p1::MSG_LEADER_REG, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p1::MSG_LEADER_SERVER_LIST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p1::MSG_LEADER_BROADCAST_ADD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::p1::MSG_LEADER_BROADCAST_ADD, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p1::MSG_LEADER_BROADCAST_REMOVE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::p1::MSG_LEADER_BROADCAST_REMOVE, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p1::MSG_LEADER_REG_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::p1::MSG_LEADER_REG_RES, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p1::MSG_LEADER_SERVER_LIST_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::p1::MSG_LEADER_SERVER_LIST_RES, infos_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::p1::MSG_TEST)},
  { 6, -1, sizeof(::p1::MSG_TEST_RES)},
  { 14, -1, sizeof(::p1::SERVER_INFO)},
  { 23, -1, sizeof(::p1::MSG_HEARTBEAT)},
  { 28, -1, sizeof(::p1::MSG_HEARTBEAT_RES)},
  { 33, -1, sizeof(::p1::MSG_LEADER_REG)},
  { 39, -1, sizeof(::p1::MSG_LEADER_SERVER_LIST)},
  { 44, -1, sizeof(::p1::MSG_LEADER_BROADCAST_ADD)},
  { 50, -1, sizeof(::p1::MSG_LEADER_BROADCAST_REMOVE)},
  { 56, -1, sizeof(::p1::MSG_LEADER_REG_RES)},
  { 62, -1, sizeof(::p1::MSG_LEADER_SERVER_LIST_RES)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p1::_MSG_TEST_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p1::_MSG_TEST_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p1::_SERVER_INFO_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p1::_MSG_HEARTBEAT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p1::_MSG_HEARTBEAT_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p1::_MSG_LEADER_REG_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p1::_MSG_LEADER_SERVER_LIST_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p1::_MSG_LEADER_BROADCAST_ADD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p1::_MSG_LEADER_BROADCAST_REMOVE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p1::_MSG_LEADER_REG_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p1::_MSG_LEADER_SERVER_LIST_RES_default_instance_),
};

const char descriptor_table_protodef_p1_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010p1.proto\022\002p1\"\030\n\010MSG_TEST\022\014\n\004name\030\001 \001(\t"
  "\"8\n\014MSG_TEST_RES\022\020\n\010name_res\030\001 \001(\t\022\n\n\002a1"
  "\030\003 \001(\005\022\n\n\002a2\030\004 \001(\005\"G\n\013SERVER_INFO\022\r\n\005svr"
  "id\030\001 \001(\003\022\014\n\004type\030\002 \001(\005\022\r\n\005ipstr\030\003 \001(\t\022\014\n"
  "\004port\030\004 \001(\005\"\017\n\rMSG_HEARTBEAT\"\023\n\021MSG_HEAR"
  "TBEAT_RES\"/\n\016MSG_LEADER_REG\022\035\n\004info\030\001 \001("
  "\0132\017.p1.SERVER_INFO\"\030\n\026MSG_LEADER_SERVER_"
  "LIST\"9\n\030MSG_LEADER_BROADCAST_ADD\022\035\n\004info"
  "\030\001 \001(\0132\017.p1.SERVER_INFO\"<\n\033MSG_LEADER_BR"
  "OADCAST_REMOVE\022\035\n\004info\030\001 \001(\0132\017.p1.SERVER"
  "_INFO\"$\n\022MSG_LEADER_REG_RES\022\016\n\006result\030\001 "
  "\001(\005\"<\n\032MSG_LEADER_SERVER_LIST_RES\022\036\n\005inf"
  "os\030\001 \003(\0132\017.p1.SERVER_INFOb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_p1_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_p1_2eproto_sccs[11] = {
  &scc_info_MSG_HEARTBEAT_p1_2eproto.base,
  &scc_info_MSG_HEARTBEAT_RES_p1_2eproto.base,
  &scc_info_MSG_LEADER_BROADCAST_ADD_p1_2eproto.base,
  &scc_info_MSG_LEADER_BROADCAST_REMOVE_p1_2eproto.base,
  &scc_info_MSG_LEADER_REG_p1_2eproto.base,
  &scc_info_MSG_LEADER_REG_RES_p1_2eproto.base,
  &scc_info_MSG_LEADER_SERVER_LIST_p1_2eproto.base,
  &scc_info_MSG_LEADER_SERVER_LIST_RES_p1_2eproto.base,
  &scc_info_MSG_TEST_p1_2eproto.base,
  &scc_info_MSG_TEST_RES_p1_2eproto.base,
  &scc_info_SERVER_INFO_p1_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_p1_2eproto_once;
static bool descriptor_table_p1_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_p1_2eproto = {
  &descriptor_table_p1_2eproto_initialized, descriptor_table_protodef_p1_2eproto, "p1.proto", 513,
  &descriptor_table_p1_2eproto_once, descriptor_table_p1_2eproto_sccs, descriptor_table_p1_2eproto_deps, 11, 0,
  schemas, file_default_instances, TableStruct_p1_2eproto::offsets,
  file_level_metadata_p1_2eproto, 11, file_level_enum_descriptors_p1_2eproto, file_level_service_descriptors_p1_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_p1_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_p1_2eproto), true);
namespace p1 {

// ===================================================================

void MSG_TEST::InitAsDefaultInstance() {
}
class MSG_TEST::_Internal {
 public:
};

MSG_TEST::MSG_TEST()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:p1.MSG_TEST)
}
MSG_TEST::MSG_TEST(const MSG_TEST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:p1.MSG_TEST)
}

void MSG_TEST::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_TEST_p1_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MSG_TEST::~MSG_TEST() {
  // @@protoc_insertion_point(destructor:p1.MSG_TEST)
  SharedDtor();
}

void MSG_TEST::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_TEST::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_TEST& MSG_TEST::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_TEST_p1_2eproto.base);
  return *internal_default_instance();
}


void MSG_TEST::Clear() {
// @@protoc_insertion_point(message_clear_start:p1.MSG_TEST)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* MSG_TEST::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "p1.MSG_TEST.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_TEST::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p1.MSG_TEST)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p1.MSG_TEST.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p1.MSG_TEST)
  return target;
}

size_t MSG_TEST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p1.MSG_TEST)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_TEST::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p1.MSG_TEST)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_TEST* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_TEST>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p1.MSG_TEST)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p1.MSG_TEST)
    MergeFrom(*source);
  }
}

void MSG_TEST::MergeFrom(const MSG_TEST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p1.MSG_TEST)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void MSG_TEST::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p1.MSG_TEST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_TEST::CopyFrom(const MSG_TEST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p1.MSG_TEST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_TEST::IsInitialized() const {
  return true;
}

void MSG_TEST::InternalSwap(MSG_TEST* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_TEST::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_TEST_RES::InitAsDefaultInstance() {
}
class MSG_TEST_RES::_Internal {
 public:
};

MSG_TEST_RES::MSG_TEST_RES()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:p1.MSG_TEST_RES)
}
MSG_TEST_RES::MSG_TEST_RES(const MSG_TEST_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_res_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name_res().empty()) {
    name_res_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_res_);
  }
  ::memcpy(&a1_, &from.a1_,
    static_cast<size_t>(reinterpret_cast<char*>(&a2_) -
    reinterpret_cast<char*>(&a1_)) + sizeof(a2_));
  // @@protoc_insertion_point(copy_constructor:p1.MSG_TEST_RES)
}

void MSG_TEST_RES::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_TEST_RES_p1_2eproto.base);
  name_res_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&a1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a2_) -
      reinterpret_cast<char*>(&a1_)) + sizeof(a2_));
}

MSG_TEST_RES::~MSG_TEST_RES() {
  // @@protoc_insertion_point(destructor:p1.MSG_TEST_RES)
  SharedDtor();
}

void MSG_TEST_RES::SharedDtor() {
  name_res_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_TEST_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_TEST_RES& MSG_TEST_RES::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_TEST_RES_p1_2eproto.base);
  return *internal_default_instance();
}


void MSG_TEST_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:p1.MSG_TEST_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_res_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&a1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a2_) -
      reinterpret_cast<char*>(&a1_)) + sizeof(a2_));
  _internal_metadata_.Clear();
}

const char* MSG_TEST_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name_res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name_res(), ptr, ctx, "p1.MSG_TEST_RES.name_res");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 a1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          a1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 a2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          a2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_TEST_RES::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p1.MSG_TEST_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name_res = 1;
  if (this->name_res().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name_res().data(), static_cast<int>(this->_internal_name_res().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p1.MSG_TEST_RES.name_res");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name_res(), target);
  }

  // int32 a1 = 3;
  if (this->a1() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_a1(), target);
  }

  // int32 a2 = 4;
  if (this->a2() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_a2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p1.MSG_TEST_RES)
  return target;
}

size_t MSG_TEST_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p1.MSG_TEST_RES)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name_res = 1;
  if (this->name_res().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name_res());
  }

  // int32 a1 = 3;
  if (this->a1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_a1());
  }

  // int32 a2 = 4;
  if (this->a2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_a2());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_TEST_RES::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p1.MSG_TEST_RES)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_TEST_RES* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_TEST_RES>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p1.MSG_TEST_RES)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p1.MSG_TEST_RES)
    MergeFrom(*source);
  }
}

void MSG_TEST_RES::MergeFrom(const MSG_TEST_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p1.MSG_TEST_RES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name_res().size() > 0) {

    name_res_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_res_);
  }
  if (from.a1() != 0) {
    _internal_set_a1(from._internal_a1());
  }
  if (from.a2() != 0) {
    _internal_set_a2(from._internal_a2());
  }
}

void MSG_TEST_RES::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p1.MSG_TEST_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_TEST_RES::CopyFrom(const MSG_TEST_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p1.MSG_TEST_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_TEST_RES::IsInitialized() const {
  return true;
}

void MSG_TEST_RES::InternalSwap(MSG_TEST_RES* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_res_.Swap(&other->name_res_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(a1_, other->a1_);
  swap(a2_, other->a2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_TEST_RES::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SERVER_INFO::InitAsDefaultInstance() {
}
class SERVER_INFO::_Internal {
 public:
};

SERVER_INFO::SERVER_INFO()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:p1.SERVER_INFO)
}
SERVER_INFO::SERVER_INFO(const SERVER_INFO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ipstr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ipstr().empty()) {
    ipstr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ipstr_);
  }
  ::memcpy(&svrid_, &from.svrid_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&svrid_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:p1.SERVER_INFO)
}

void SERVER_INFO::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SERVER_INFO_p1_2eproto.base);
  ipstr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&svrid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&svrid_)) + sizeof(port_));
}

SERVER_INFO::~SERVER_INFO() {
  // @@protoc_insertion_point(destructor:p1.SERVER_INFO)
  SharedDtor();
}

void SERVER_INFO::SharedDtor() {
  ipstr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SERVER_INFO::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SERVER_INFO& SERVER_INFO::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SERVER_INFO_p1_2eproto.base);
  return *internal_default_instance();
}


void SERVER_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:p1.SERVER_INFO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ipstr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&svrid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&svrid_)) + sizeof(port_));
  _internal_metadata_.Clear();
}

const char* SERVER_INFO::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 svrid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          svrid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ipstr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_ipstr(), ptr, ctx, "p1.SERVER_INFO.ipstr");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SERVER_INFO::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p1.SERVER_INFO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 svrid = 1;
  if (this->svrid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_svrid(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // string ipstr = 3;
  if (this->ipstr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ipstr().data(), static_cast<int>(this->_internal_ipstr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p1.SERVER_INFO.ipstr");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ipstr(), target);
  }

  // int32 port = 4;
  if (this->port() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p1.SERVER_INFO)
  return target;
}

size_t SERVER_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p1.SERVER_INFO)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ipstr = 3;
  if (this->ipstr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ipstr());
  }

  // int64 svrid = 1;
  if (this->svrid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_svrid());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 port = 4;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SERVER_INFO::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p1.SERVER_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  const SERVER_INFO* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SERVER_INFO>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p1.SERVER_INFO)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p1.SERVER_INFO)
    MergeFrom(*source);
  }
}

void SERVER_INFO::MergeFrom(const SERVER_INFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p1.SERVER_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ipstr().size() > 0) {

    ipstr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ipstr_);
  }
  if (from.svrid() != 0) {
    _internal_set_svrid(from._internal_svrid());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void SERVER_INFO::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p1.SERVER_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SERVER_INFO::CopyFrom(const SERVER_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p1.SERVER_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SERVER_INFO::IsInitialized() const {
  return true;
}

void SERVER_INFO::InternalSwap(SERVER_INFO* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ipstr_.Swap(&other->ipstr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(svrid_, other->svrid_);
  swap(type_, other->type_);
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SERVER_INFO::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_HEARTBEAT::InitAsDefaultInstance() {
}
class MSG_HEARTBEAT::_Internal {
 public:
};

MSG_HEARTBEAT::MSG_HEARTBEAT()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:p1.MSG_HEARTBEAT)
}
MSG_HEARTBEAT::MSG_HEARTBEAT(const MSG_HEARTBEAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:p1.MSG_HEARTBEAT)
}

void MSG_HEARTBEAT::SharedCtor() {
}

MSG_HEARTBEAT::~MSG_HEARTBEAT() {
  // @@protoc_insertion_point(destructor:p1.MSG_HEARTBEAT)
  SharedDtor();
}

void MSG_HEARTBEAT::SharedDtor() {
}

void MSG_HEARTBEAT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_HEARTBEAT& MSG_HEARTBEAT::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_HEARTBEAT_p1_2eproto.base);
  return *internal_default_instance();
}


void MSG_HEARTBEAT::Clear() {
// @@protoc_insertion_point(message_clear_start:p1.MSG_HEARTBEAT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* MSG_HEARTBEAT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_HEARTBEAT::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p1.MSG_HEARTBEAT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p1.MSG_HEARTBEAT)
  return target;
}

size_t MSG_HEARTBEAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p1.MSG_HEARTBEAT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_HEARTBEAT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p1.MSG_HEARTBEAT)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_HEARTBEAT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_HEARTBEAT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p1.MSG_HEARTBEAT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p1.MSG_HEARTBEAT)
    MergeFrom(*source);
  }
}

void MSG_HEARTBEAT::MergeFrom(const MSG_HEARTBEAT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p1.MSG_HEARTBEAT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_HEARTBEAT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p1.MSG_HEARTBEAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_HEARTBEAT::CopyFrom(const MSG_HEARTBEAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p1.MSG_HEARTBEAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_HEARTBEAT::IsInitialized() const {
  return true;
}

void MSG_HEARTBEAT::InternalSwap(MSG_HEARTBEAT* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_HEARTBEAT::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_HEARTBEAT_RES::InitAsDefaultInstance() {
}
class MSG_HEARTBEAT_RES::_Internal {
 public:
};

MSG_HEARTBEAT_RES::MSG_HEARTBEAT_RES()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:p1.MSG_HEARTBEAT_RES)
}
MSG_HEARTBEAT_RES::MSG_HEARTBEAT_RES(const MSG_HEARTBEAT_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:p1.MSG_HEARTBEAT_RES)
}

void MSG_HEARTBEAT_RES::SharedCtor() {
}

MSG_HEARTBEAT_RES::~MSG_HEARTBEAT_RES() {
  // @@protoc_insertion_point(destructor:p1.MSG_HEARTBEAT_RES)
  SharedDtor();
}

void MSG_HEARTBEAT_RES::SharedDtor() {
}

void MSG_HEARTBEAT_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_HEARTBEAT_RES& MSG_HEARTBEAT_RES::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_HEARTBEAT_RES_p1_2eproto.base);
  return *internal_default_instance();
}


void MSG_HEARTBEAT_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:p1.MSG_HEARTBEAT_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* MSG_HEARTBEAT_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_HEARTBEAT_RES::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p1.MSG_HEARTBEAT_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p1.MSG_HEARTBEAT_RES)
  return target;
}

size_t MSG_HEARTBEAT_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p1.MSG_HEARTBEAT_RES)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_HEARTBEAT_RES::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p1.MSG_HEARTBEAT_RES)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_HEARTBEAT_RES* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_HEARTBEAT_RES>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p1.MSG_HEARTBEAT_RES)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p1.MSG_HEARTBEAT_RES)
    MergeFrom(*source);
  }
}

void MSG_HEARTBEAT_RES::MergeFrom(const MSG_HEARTBEAT_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p1.MSG_HEARTBEAT_RES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_HEARTBEAT_RES::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p1.MSG_HEARTBEAT_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_HEARTBEAT_RES::CopyFrom(const MSG_HEARTBEAT_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p1.MSG_HEARTBEAT_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_HEARTBEAT_RES::IsInitialized() const {
  return true;
}

void MSG_HEARTBEAT_RES::InternalSwap(MSG_HEARTBEAT_RES* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_HEARTBEAT_RES::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_LEADER_REG::InitAsDefaultInstance() {
  ::p1::_MSG_LEADER_REG_default_instance_._instance.get_mutable()->info_ = const_cast< ::p1::SERVER_INFO*>(
      ::p1::SERVER_INFO::internal_default_instance());
}
class MSG_LEADER_REG::_Internal {
 public:
  static const ::p1::SERVER_INFO& info(const MSG_LEADER_REG* msg);
};

const ::p1::SERVER_INFO&
MSG_LEADER_REG::_Internal::info(const MSG_LEADER_REG* msg) {
  return *msg->info_;
}
MSG_LEADER_REG::MSG_LEADER_REG()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:p1.MSG_LEADER_REG)
}
MSG_LEADER_REG::MSG_LEADER_REG(const MSG_LEADER_REG& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::p1::SERVER_INFO(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:p1.MSG_LEADER_REG)
}

void MSG_LEADER_REG::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_LEADER_REG_p1_2eproto.base);
  info_ = nullptr;
}

MSG_LEADER_REG::~MSG_LEADER_REG() {
  // @@protoc_insertion_point(destructor:p1.MSG_LEADER_REG)
  SharedDtor();
}

void MSG_LEADER_REG::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void MSG_LEADER_REG::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_LEADER_REG& MSG_LEADER_REG::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_LEADER_REG_p1_2eproto.base);
  return *internal_default_instance();
}


void MSG_LEADER_REG::Clear() {
// @@protoc_insertion_point(message_clear_start:p1.MSG_LEADER_REG)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MSG_LEADER_REG::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .p1.SERVER_INFO info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_LEADER_REG::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p1.MSG_LEADER_REG)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .p1.SERVER_INFO info = 1;
  if (this->has_info()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p1.MSG_LEADER_REG)
  return target;
}

size_t MSG_LEADER_REG::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p1.MSG_LEADER_REG)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .p1.SERVER_INFO info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_LEADER_REG::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p1.MSG_LEADER_REG)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_LEADER_REG* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_LEADER_REG>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p1.MSG_LEADER_REG)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p1.MSG_LEADER_REG)
    MergeFrom(*source);
  }
}

void MSG_LEADER_REG::MergeFrom(const MSG_LEADER_REG& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p1.MSG_LEADER_REG)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::p1::SERVER_INFO::MergeFrom(from._internal_info());
  }
}

void MSG_LEADER_REG::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p1.MSG_LEADER_REG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_LEADER_REG::CopyFrom(const MSG_LEADER_REG& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p1.MSG_LEADER_REG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_LEADER_REG::IsInitialized() const {
  return true;
}

void MSG_LEADER_REG::InternalSwap(MSG_LEADER_REG* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_LEADER_REG::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_LEADER_SERVER_LIST::InitAsDefaultInstance() {
}
class MSG_LEADER_SERVER_LIST::_Internal {
 public:
};

MSG_LEADER_SERVER_LIST::MSG_LEADER_SERVER_LIST()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:p1.MSG_LEADER_SERVER_LIST)
}
MSG_LEADER_SERVER_LIST::MSG_LEADER_SERVER_LIST(const MSG_LEADER_SERVER_LIST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:p1.MSG_LEADER_SERVER_LIST)
}

void MSG_LEADER_SERVER_LIST::SharedCtor() {
}

MSG_LEADER_SERVER_LIST::~MSG_LEADER_SERVER_LIST() {
  // @@protoc_insertion_point(destructor:p1.MSG_LEADER_SERVER_LIST)
  SharedDtor();
}

void MSG_LEADER_SERVER_LIST::SharedDtor() {
}

void MSG_LEADER_SERVER_LIST::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_LEADER_SERVER_LIST& MSG_LEADER_SERVER_LIST::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_LEADER_SERVER_LIST_p1_2eproto.base);
  return *internal_default_instance();
}


void MSG_LEADER_SERVER_LIST::Clear() {
// @@protoc_insertion_point(message_clear_start:p1.MSG_LEADER_SERVER_LIST)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* MSG_LEADER_SERVER_LIST::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_LEADER_SERVER_LIST::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p1.MSG_LEADER_SERVER_LIST)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p1.MSG_LEADER_SERVER_LIST)
  return target;
}

size_t MSG_LEADER_SERVER_LIST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p1.MSG_LEADER_SERVER_LIST)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_LEADER_SERVER_LIST::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p1.MSG_LEADER_SERVER_LIST)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_LEADER_SERVER_LIST* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_LEADER_SERVER_LIST>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p1.MSG_LEADER_SERVER_LIST)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p1.MSG_LEADER_SERVER_LIST)
    MergeFrom(*source);
  }
}

void MSG_LEADER_SERVER_LIST::MergeFrom(const MSG_LEADER_SERVER_LIST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p1.MSG_LEADER_SERVER_LIST)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_LEADER_SERVER_LIST::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p1.MSG_LEADER_SERVER_LIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_LEADER_SERVER_LIST::CopyFrom(const MSG_LEADER_SERVER_LIST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p1.MSG_LEADER_SERVER_LIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_LEADER_SERVER_LIST::IsInitialized() const {
  return true;
}

void MSG_LEADER_SERVER_LIST::InternalSwap(MSG_LEADER_SERVER_LIST* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_LEADER_SERVER_LIST::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_LEADER_BROADCAST_ADD::InitAsDefaultInstance() {
  ::p1::_MSG_LEADER_BROADCAST_ADD_default_instance_._instance.get_mutable()->info_ = const_cast< ::p1::SERVER_INFO*>(
      ::p1::SERVER_INFO::internal_default_instance());
}
class MSG_LEADER_BROADCAST_ADD::_Internal {
 public:
  static const ::p1::SERVER_INFO& info(const MSG_LEADER_BROADCAST_ADD* msg);
};

const ::p1::SERVER_INFO&
MSG_LEADER_BROADCAST_ADD::_Internal::info(const MSG_LEADER_BROADCAST_ADD* msg) {
  return *msg->info_;
}
MSG_LEADER_BROADCAST_ADD::MSG_LEADER_BROADCAST_ADD()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:p1.MSG_LEADER_BROADCAST_ADD)
}
MSG_LEADER_BROADCAST_ADD::MSG_LEADER_BROADCAST_ADD(const MSG_LEADER_BROADCAST_ADD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::p1::SERVER_INFO(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:p1.MSG_LEADER_BROADCAST_ADD)
}

void MSG_LEADER_BROADCAST_ADD::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_LEADER_BROADCAST_ADD_p1_2eproto.base);
  info_ = nullptr;
}

MSG_LEADER_BROADCAST_ADD::~MSG_LEADER_BROADCAST_ADD() {
  // @@protoc_insertion_point(destructor:p1.MSG_LEADER_BROADCAST_ADD)
  SharedDtor();
}

void MSG_LEADER_BROADCAST_ADD::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void MSG_LEADER_BROADCAST_ADD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_LEADER_BROADCAST_ADD& MSG_LEADER_BROADCAST_ADD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_LEADER_BROADCAST_ADD_p1_2eproto.base);
  return *internal_default_instance();
}


void MSG_LEADER_BROADCAST_ADD::Clear() {
// @@protoc_insertion_point(message_clear_start:p1.MSG_LEADER_BROADCAST_ADD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MSG_LEADER_BROADCAST_ADD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .p1.SERVER_INFO info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_LEADER_BROADCAST_ADD::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p1.MSG_LEADER_BROADCAST_ADD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .p1.SERVER_INFO info = 1;
  if (this->has_info()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p1.MSG_LEADER_BROADCAST_ADD)
  return target;
}

size_t MSG_LEADER_BROADCAST_ADD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p1.MSG_LEADER_BROADCAST_ADD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .p1.SERVER_INFO info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_LEADER_BROADCAST_ADD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p1.MSG_LEADER_BROADCAST_ADD)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_LEADER_BROADCAST_ADD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_LEADER_BROADCAST_ADD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p1.MSG_LEADER_BROADCAST_ADD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p1.MSG_LEADER_BROADCAST_ADD)
    MergeFrom(*source);
  }
}

void MSG_LEADER_BROADCAST_ADD::MergeFrom(const MSG_LEADER_BROADCAST_ADD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p1.MSG_LEADER_BROADCAST_ADD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::p1::SERVER_INFO::MergeFrom(from._internal_info());
  }
}

void MSG_LEADER_BROADCAST_ADD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p1.MSG_LEADER_BROADCAST_ADD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_LEADER_BROADCAST_ADD::CopyFrom(const MSG_LEADER_BROADCAST_ADD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p1.MSG_LEADER_BROADCAST_ADD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_LEADER_BROADCAST_ADD::IsInitialized() const {
  return true;
}

void MSG_LEADER_BROADCAST_ADD::InternalSwap(MSG_LEADER_BROADCAST_ADD* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_LEADER_BROADCAST_ADD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_LEADER_BROADCAST_REMOVE::InitAsDefaultInstance() {
  ::p1::_MSG_LEADER_BROADCAST_REMOVE_default_instance_._instance.get_mutable()->info_ = const_cast< ::p1::SERVER_INFO*>(
      ::p1::SERVER_INFO::internal_default_instance());
}
class MSG_LEADER_BROADCAST_REMOVE::_Internal {
 public:
  static const ::p1::SERVER_INFO& info(const MSG_LEADER_BROADCAST_REMOVE* msg);
};

const ::p1::SERVER_INFO&
MSG_LEADER_BROADCAST_REMOVE::_Internal::info(const MSG_LEADER_BROADCAST_REMOVE* msg) {
  return *msg->info_;
}
MSG_LEADER_BROADCAST_REMOVE::MSG_LEADER_BROADCAST_REMOVE()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:p1.MSG_LEADER_BROADCAST_REMOVE)
}
MSG_LEADER_BROADCAST_REMOVE::MSG_LEADER_BROADCAST_REMOVE(const MSG_LEADER_BROADCAST_REMOVE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::p1::SERVER_INFO(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:p1.MSG_LEADER_BROADCAST_REMOVE)
}

void MSG_LEADER_BROADCAST_REMOVE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_LEADER_BROADCAST_REMOVE_p1_2eproto.base);
  info_ = nullptr;
}

MSG_LEADER_BROADCAST_REMOVE::~MSG_LEADER_BROADCAST_REMOVE() {
  // @@protoc_insertion_point(destructor:p1.MSG_LEADER_BROADCAST_REMOVE)
  SharedDtor();
}

void MSG_LEADER_BROADCAST_REMOVE::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void MSG_LEADER_BROADCAST_REMOVE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_LEADER_BROADCAST_REMOVE& MSG_LEADER_BROADCAST_REMOVE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_LEADER_BROADCAST_REMOVE_p1_2eproto.base);
  return *internal_default_instance();
}


void MSG_LEADER_BROADCAST_REMOVE::Clear() {
// @@protoc_insertion_point(message_clear_start:p1.MSG_LEADER_BROADCAST_REMOVE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MSG_LEADER_BROADCAST_REMOVE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .p1.SERVER_INFO info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_LEADER_BROADCAST_REMOVE::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p1.MSG_LEADER_BROADCAST_REMOVE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .p1.SERVER_INFO info = 1;
  if (this->has_info()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p1.MSG_LEADER_BROADCAST_REMOVE)
  return target;
}

size_t MSG_LEADER_BROADCAST_REMOVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p1.MSG_LEADER_BROADCAST_REMOVE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .p1.SERVER_INFO info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_LEADER_BROADCAST_REMOVE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p1.MSG_LEADER_BROADCAST_REMOVE)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_LEADER_BROADCAST_REMOVE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_LEADER_BROADCAST_REMOVE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p1.MSG_LEADER_BROADCAST_REMOVE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p1.MSG_LEADER_BROADCAST_REMOVE)
    MergeFrom(*source);
  }
}

void MSG_LEADER_BROADCAST_REMOVE::MergeFrom(const MSG_LEADER_BROADCAST_REMOVE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p1.MSG_LEADER_BROADCAST_REMOVE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::p1::SERVER_INFO::MergeFrom(from._internal_info());
  }
}

void MSG_LEADER_BROADCAST_REMOVE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p1.MSG_LEADER_BROADCAST_REMOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_LEADER_BROADCAST_REMOVE::CopyFrom(const MSG_LEADER_BROADCAST_REMOVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p1.MSG_LEADER_BROADCAST_REMOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_LEADER_BROADCAST_REMOVE::IsInitialized() const {
  return true;
}

void MSG_LEADER_BROADCAST_REMOVE::InternalSwap(MSG_LEADER_BROADCAST_REMOVE* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_LEADER_BROADCAST_REMOVE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_LEADER_REG_RES::InitAsDefaultInstance() {
}
class MSG_LEADER_REG_RES::_Internal {
 public:
};

MSG_LEADER_REG_RES::MSG_LEADER_REG_RES()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:p1.MSG_LEADER_REG_RES)
}
MSG_LEADER_REG_RES::MSG_LEADER_REG_RES(const MSG_LEADER_REG_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:p1.MSG_LEADER_REG_RES)
}

void MSG_LEADER_REG_RES::SharedCtor() {
  result_ = 0;
}

MSG_LEADER_REG_RES::~MSG_LEADER_REG_RES() {
  // @@protoc_insertion_point(destructor:p1.MSG_LEADER_REG_RES)
  SharedDtor();
}

void MSG_LEADER_REG_RES::SharedDtor() {
}

void MSG_LEADER_REG_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_LEADER_REG_RES& MSG_LEADER_REG_RES::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_LEADER_REG_RES_p1_2eproto.base);
  return *internal_default_instance();
}


void MSG_LEADER_REG_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:p1.MSG_LEADER_REG_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _internal_metadata_.Clear();
}

const char* MSG_LEADER_REG_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_LEADER_REG_RES::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p1.MSG_LEADER_REG_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p1.MSG_LEADER_REG_RES)
  return target;
}

size_t MSG_LEADER_REG_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p1.MSG_LEADER_REG_RES)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_LEADER_REG_RES::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p1.MSG_LEADER_REG_RES)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_LEADER_REG_RES* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_LEADER_REG_RES>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p1.MSG_LEADER_REG_RES)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p1.MSG_LEADER_REG_RES)
    MergeFrom(*source);
  }
}

void MSG_LEADER_REG_RES::MergeFrom(const MSG_LEADER_REG_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p1.MSG_LEADER_REG_RES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void MSG_LEADER_REG_RES::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p1.MSG_LEADER_REG_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_LEADER_REG_RES::CopyFrom(const MSG_LEADER_REG_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p1.MSG_LEADER_REG_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_LEADER_REG_RES::IsInitialized() const {
  return true;
}

void MSG_LEADER_REG_RES::InternalSwap(MSG_LEADER_REG_RES* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_LEADER_REG_RES::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_LEADER_SERVER_LIST_RES::InitAsDefaultInstance() {
}
class MSG_LEADER_SERVER_LIST_RES::_Internal {
 public:
};

MSG_LEADER_SERVER_LIST_RES::MSG_LEADER_SERVER_LIST_RES()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:p1.MSG_LEADER_SERVER_LIST_RES)
}
MSG_LEADER_SERVER_LIST_RES::MSG_LEADER_SERVER_LIST_RES(const MSG_LEADER_SERVER_LIST_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:p1.MSG_LEADER_SERVER_LIST_RES)
}

void MSG_LEADER_SERVER_LIST_RES::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_LEADER_SERVER_LIST_RES_p1_2eproto.base);
}

MSG_LEADER_SERVER_LIST_RES::~MSG_LEADER_SERVER_LIST_RES() {
  // @@protoc_insertion_point(destructor:p1.MSG_LEADER_SERVER_LIST_RES)
  SharedDtor();
}

void MSG_LEADER_SERVER_LIST_RES::SharedDtor() {
}

void MSG_LEADER_SERVER_LIST_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_LEADER_SERVER_LIST_RES& MSG_LEADER_SERVER_LIST_RES::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_LEADER_SERVER_LIST_RES_p1_2eproto.base);
  return *internal_default_instance();
}


void MSG_LEADER_SERVER_LIST_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:p1.MSG_LEADER_SERVER_LIST_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_LEADER_SERVER_LIST_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .p1.SERVER_INFO infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_LEADER_SERVER_LIST_RES::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p1.MSG_LEADER_SERVER_LIST_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .p1.SERVER_INFO infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infos_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p1.MSG_LEADER_SERVER_LIST_RES)
  return target;
}

size_t MSG_LEADER_SERVER_LIST_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p1.MSG_LEADER_SERVER_LIST_RES)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .p1.SERVER_INFO infos = 1;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_LEADER_SERVER_LIST_RES::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p1.MSG_LEADER_SERVER_LIST_RES)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_LEADER_SERVER_LIST_RES* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_LEADER_SERVER_LIST_RES>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p1.MSG_LEADER_SERVER_LIST_RES)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p1.MSG_LEADER_SERVER_LIST_RES)
    MergeFrom(*source);
  }
}

void MSG_LEADER_SERVER_LIST_RES::MergeFrom(const MSG_LEADER_SERVER_LIST_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p1.MSG_LEADER_SERVER_LIST_RES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
}

void MSG_LEADER_SERVER_LIST_RES::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p1.MSG_LEADER_SERVER_LIST_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_LEADER_SERVER_LIST_RES::CopyFrom(const MSG_LEADER_SERVER_LIST_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p1.MSG_LEADER_SERVER_LIST_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_LEADER_SERVER_LIST_RES::IsInitialized() const {
  return true;
}

void MSG_LEADER_SERVER_LIST_RES::InternalSwap(MSG_LEADER_SERVER_LIST_RES* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  infos_.InternalSwap(&other->infos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_LEADER_SERVER_LIST_RES::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace p1
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::p1::MSG_TEST* Arena::CreateMaybeMessage< ::p1::MSG_TEST >(Arena* arena) {
  return Arena::CreateInternal< ::p1::MSG_TEST >(arena);
}
template<> PROTOBUF_NOINLINE ::p1::MSG_TEST_RES* Arena::CreateMaybeMessage< ::p1::MSG_TEST_RES >(Arena* arena) {
  return Arena::CreateInternal< ::p1::MSG_TEST_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::p1::SERVER_INFO* Arena::CreateMaybeMessage< ::p1::SERVER_INFO >(Arena* arena) {
  return Arena::CreateInternal< ::p1::SERVER_INFO >(arena);
}
template<> PROTOBUF_NOINLINE ::p1::MSG_HEARTBEAT* Arena::CreateMaybeMessage< ::p1::MSG_HEARTBEAT >(Arena* arena) {
  return Arena::CreateInternal< ::p1::MSG_HEARTBEAT >(arena);
}
template<> PROTOBUF_NOINLINE ::p1::MSG_HEARTBEAT_RES* Arena::CreateMaybeMessage< ::p1::MSG_HEARTBEAT_RES >(Arena* arena) {
  return Arena::CreateInternal< ::p1::MSG_HEARTBEAT_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::p1::MSG_LEADER_REG* Arena::CreateMaybeMessage< ::p1::MSG_LEADER_REG >(Arena* arena) {
  return Arena::CreateInternal< ::p1::MSG_LEADER_REG >(arena);
}
template<> PROTOBUF_NOINLINE ::p1::MSG_LEADER_SERVER_LIST* Arena::CreateMaybeMessage< ::p1::MSG_LEADER_SERVER_LIST >(Arena* arena) {
  return Arena::CreateInternal< ::p1::MSG_LEADER_SERVER_LIST >(arena);
}
template<> PROTOBUF_NOINLINE ::p1::MSG_LEADER_BROADCAST_ADD* Arena::CreateMaybeMessage< ::p1::MSG_LEADER_BROADCAST_ADD >(Arena* arena) {
  return Arena::CreateInternal< ::p1::MSG_LEADER_BROADCAST_ADD >(arena);
}
template<> PROTOBUF_NOINLINE ::p1::MSG_LEADER_BROADCAST_REMOVE* Arena::CreateMaybeMessage< ::p1::MSG_LEADER_BROADCAST_REMOVE >(Arena* arena) {
  return Arena::CreateInternal< ::p1::MSG_LEADER_BROADCAST_REMOVE >(arena);
}
template<> PROTOBUF_NOINLINE ::p1::MSG_LEADER_REG_RES* Arena::CreateMaybeMessage< ::p1::MSG_LEADER_REG_RES >(Arena* arena) {
  return Arena::CreateInternal< ::p1::MSG_LEADER_REG_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::p1::MSG_LEADER_SERVER_LIST_RES* Arena::CreateMaybeMessage< ::p1::MSG_LEADER_SERVER_LIST_RES >(Arena* arena) {
  return Arena::CreateInternal< ::p1::MSG_LEADER_SERVER_LIST_RES >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
